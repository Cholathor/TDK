
L476_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009a30  08009a30  00019a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab8  08009ab8  000201bc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ac0  08009ac0  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08009ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d70  200001bc  08009c84  000201bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f2c  08009c84  00020f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a91  00000000  00000000  0002022f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003204  00000000  00000000  00038cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d6  00000000  00000000  0003d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296c7  00000000  00000000  0003e766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfe8  00000000  00000000  00067e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbed2  00000000  00000000  00083e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b4c  00000000  00000000  0017fce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00186834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001bc 	.word	0x200001bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a14 	.word	0x08009a14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001c0 	.word	0x200001c0
 80001c4:	08009a14 	.word	0x08009a14

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b970 	b.w	8000dfc <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	460f      	mov	r7, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4694      	mov	ip, r2
 8000b48:	d965      	bls.n	8000c16 <__udivmoddi4+0xe2>
 8000b4a:	fab2 f382 	clz	r3, r2
 8000b4e:	b143      	cbz	r3, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	f1c3 0220 	rsb	r2, r3, #32
 8000b58:	409f      	lsls	r7, r3
 8000b5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	409c      	lsls	r4, r3
 8000b62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b66:	fa1f f58c 	uxth.w	r5, ip
 8000b6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b6e:	0c22      	lsrs	r2, r4, #16
 8000b70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b78:	fb01 f005 	mul.w	r0, r1, r5
 8000b7c:	4290      	cmp	r0, r2
 8000b7e:	d90a      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b80:	eb1c 0202 	adds.w	r2, ip, r2
 8000b84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b88:	f080 811c 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	f240 8119 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000b92:	3902      	subs	r1, #2
 8000b94:	4462      	add	r2, ip
 8000b96:	1a12      	subs	r2, r2, r0
 8000b98:	b2a4      	uxth	r4, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba6:	fb00 f505 	mul.w	r5, r0, r5
 8000baa:	42a5      	cmp	r5, r4
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x90>
 8000bae:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb6:	f080 8107 	bcs.w	8000dc8 <__udivmoddi4+0x294>
 8000bba:	42a5      	cmp	r5, r4
 8000bbc:	f240 8104 	bls.w	8000dc8 <__udivmoddi4+0x294>
 8000bc0:	4464      	add	r4, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11e      	cbz	r6, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40dc      	lsrs	r4, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0xbc>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80ed 	beq.w	8000dbe <__udivmoddi4+0x28a>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d149      	bne.n	8000c8c <__udivmoddi4+0x158>
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d302      	bcc.n	8000c02 <__udivmoddi4+0xce>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	f200 80f8 	bhi.w	8000df2 <__udivmoddi4+0x2be>
 8000c02:	1a84      	subs	r4, r0, r2
 8000c04:	eb65 0203 	sbc.w	r2, r5, r3
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d0e2      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	e9c6 4700 	strd	r4, r7, [r6]
 8000c14:	e7df      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xe6>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f382 	clz	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8090 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c24:	1a8a      	subs	r2, r1, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c34:	fb07 2015 	mls	r0, r7, r5, r2
 8000c38:	0c22      	lsrs	r2, r4, #16
 8000c3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c3e:	fb0e f005 	mul.w	r0, lr, r5
 8000c42:	4290      	cmp	r0, r2
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c46:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2b8>
 8000c56:	4645      	mov	r5, r8
 8000c58:	1a12      	subs	r2, r2, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c60:	fb07 2210 	mls	r2, r7, r0, r2
 8000c64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x14e>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x14c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2c2>
 8000c80:	4610      	mov	r0, r2
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c8a:	e79f      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c8c:	f1c1 0720 	rsb	r7, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ca2:	40fd      	lsrs	r5, r7
 8000ca4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca8:	4323      	orrs	r3, r4
 8000caa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cb6:	0c1c      	lsrs	r4, r3, #16
 8000cb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2b4>
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2b4>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4464      	add	r4, ip
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	b29d      	uxth	r5, r3
 8000ce8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cec:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2ac>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2ac>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d12:	fba3 9502 	umull	r9, r5, r3, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	42ac      	cmp	r4, r5
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46ae      	mov	lr, r5
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x29c>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x298>
 8000d24:	b156      	cbz	r6, 8000d3c <__udivmoddi4+0x208>
 8000d26:	ebb0 0208 	subs.w	r2, r0, r8
 8000d2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d32:	40ca      	lsrs	r2, r1
 8000d34:	40cc      	lsrs	r4, r1
 8000d36:	4317      	orrs	r7, r2
 8000d38:	e9c6 7400 	strd	r7, r4, [r6]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	f1c3 0120 	rsb	r1, r3, #32
 8000d48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d50:	fa25 f101 	lsr.w	r1, r5, r1
 8000d54:	409d      	lsls	r5, r3
 8000d56:	432a      	orrs	r2, r5
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d64:	fb07 1510 	mls	r5, r7, r0, r1
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d72:	428d      	cmp	r5, r1
 8000d74:	fa04 f403 	lsl.w	r4, r4, r3
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x258>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000d84:	428d      	cmp	r5, r1
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4461      	add	r1, ip
 8000d8c:	1b49      	subs	r1, r1, r5
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d94:	fb07 1115 	mls	r1, r7, r5, r1
 8000d98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000da0:	4291      	cmp	r1, r2
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x282>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000dae:	4291      	cmp	r1, r2
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000db2:	3d02      	subs	r5, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a52      	subs	r2, r2, r1
 8000db8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0xfc>
 8000dbe:	4631      	mov	r1, r6
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e6e6      	b.n	8000b96 <__udivmoddi4+0x62>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	e6fb      	b.n	8000bc4 <__udivmoddi4+0x90>
 8000dcc:	4548      	cmp	r0, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000ddc:	4645      	mov	r5, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x282>
 8000de0:	462b      	mov	r3, r5
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x258>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dec:	3d02      	subs	r5, #2
 8000dee:	4462      	add	r2, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e70a      	b.n	8000c0c <__udivmoddi4+0xd8>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x14e>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e08:	1d39      	adds	r1, r7, #4
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <__io_putchar+0x20>)
 8000e12:	f006 fbd1 	bl	80075b8 <HAL_UART_Transmit>
  return ch;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200004ac 	.word	0x200004ac
 8000e24:	00000000 	.word	0x00000000

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	ed2d 8b02 	vpush	{d8}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	for (int i = 0; i < 4; i++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	e051      	b.n	8000edc <main+0xb4>
	{
		fillWithBell(intensityValues[2*i], NS, NS / 2, dev, voltageconstant * voltageLevels[i], 1910);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	4a9a      	ldr	r2, [pc, #616]	; (80010a8 <main+0x280>)
 8000e40:	189c      	adds	r4, r3, r2
 8000e42:	ed9f 8b8f 	vldr	d8, [pc, #572]	; 8001080 <main+0x258>
 8000e46:	4a99      	ldr	r2, [pc, #612]	; (80010ac <main+0x284>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb0c 	bl	800046c <__aeabi_i2d>
 8000e54:	a38c      	add	r3, pc, #560	; (adr r3, 8001088 <main+0x260>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff fb71 	bl	8000540 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	ec43 2b17 	vmov	d7, r2, r3
 8000e66:	ed9f 3b8a 	vldr	d3, [pc, #552]	; 8001090 <main+0x268>
 8000e6a:	eeb0 2a47 	vmov.f32	s4, s14
 8000e6e:	eef0 2a67 	vmov.f32	s5, s15
 8000e72:	eeb0 1a48 	vmov.f32	s2, s16
 8000e76:	eef0 1a68 	vmov.f32	s3, s17
 8000e7a:	ed9f 0b87 	vldr	d0, [pc, #540]	; 8001098 <main+0x270>
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	4620      	mov	r0, r4
 8000e82:	f001 fc6b 	bl	800275c <fillWithBell>
		fillWithBell(intensityValues[2*i + 1], NS, NS / 2, dev, -voltageconstant * voltageLevels[i], 1910);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	4a86      	ldr	r2, [pc, #536]	; (80010a8 <main+0x280>)
 8000e90:	189c      	adds	r4, r3, r2
 8000e92:	ed9f 8b7b 	vldr	d8, [pc, #492]	; 8001080 <main+0x258>
 8000e96:	4a85      	ldr	r2, [pc, #532]	; (80010ac <main+0x284>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fae4 	bl	800046c <__aeabi_i2d>
 8000ea4:	a37e      	add	r3, pc, #504	; (adr r3, 80010a0 <main+0x278>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fb49 	bl	8000540 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	ec43 2b17 	vmov	d7, r2, r3
 8000eb6:	ed9f 3b76 	vldr	d3, [pc, #472]	; 8001090 <main+0x268>
 8000eba:	eeb0 2a47 	vmov.f32	s4, s14
 8000ebe:	eef0 2a67 	vmov.f32	s5, s15
 8000ec2:	eeb0 1a48 	vmov.f32	s2, s16
 8000ec6:	eef0 1a68 	vmov.f32	s3, s17
 8000eca:	ed9f 0b73 	vldr	d0, [pc, #460]	; 8001098 <main+0x270>
 8000ece:	2140      	movs	r1, #64	; 0x40
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f001 fc43 	bl	800275c <fillWithBell>
	for (int i = 0; i < 4; i++)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	ddaa      	ble.n	8000e38 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f001 fce5 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f911 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 fbd3 	bl	8001694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eee:	f000 fbb3 	bl	8001658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ef2:	f000 fb81 	bl	80015f8 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000ef6:	f000 f95d 	bl	80011b4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000efa:	f000 fa51 	bl	80013a0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000efe:	f000 fb4b 	bl	8001598 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f02:	f000 fa9b 	bl	800143c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000f06:	f000 fa0d 	bl	8001324 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000f0a:	f000 fb0f 	bl	800152c <MX_TIM6_Init>
  MX_I2C3_Init();
 8000f0e:	f000 f9c9 	bl	80012a4 <MX_I2C3_Init>
  MX_I2C1_Init();
 8000f12:	f000 f987 	bl	8001224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("HELLO \r\n");
 8000f16:	4866      	ldr	r0, [pc, #408]	; (80010b0 <main+0x288>)
 8000f18:	f007 ffde 	bl	8008ed8 <puts>
  printf("WORLD \r\n");
 8000f1c:	4865      	ldr	r0, [pc, #404]	; (80010b4 <main+0x28c>)
 8000f1e:	f007 ffdb 	bl	8008ed8 <puts>


  //this is for debug purposes
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000f22:	2101      	movs	r1, #1
 8000f24:	4864      	ldr	r0, [pc, #400]	; (80010b8 <main+0x290>)
 8000f26:	f002 fdd9 	bl	8003adc <HAL_GPIO_TogglePin>

  HAL_UART_Receive_IT(&huart2, Rx_data, 7);
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	4963      	ldr	r1, [pc, #396]	; (80010bc <main+0x294>)
 8000f2e:	4864      	ldr	r0, [pc, #400]	; (80010c0 <main+0x298>)
 8000f30:	f006 fbcc 	bl	80076cc <HAL_UART_Receive_IT>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) Line_LUT, NS, DAC_ALIGN_12B_R);
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	4a62      	ldr	r2, [pc, #392]	; (80010c4 <main+0x29c>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4862      	ldr	r0, [pc, #392]	; (80010c8 <main+0x2a0>)
 8000f40:	f001 fe8a 	bl	8002c58 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f44:	4861      	ldr	r0, [pc, #388]	; (80010cc <main+0x2a4>)
 8000f46:	f005 f933 	bl	80061b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000f4a:	4861      	ldr	r0, [pc, #388]	; (80010d0 <main+0x2a8>)
 8000f4c:	f005 f930 	bl	80061b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4860      	ldr	r0, [pc, #384]	; (80010d4 <main+0x2ac>)
 8000f54:	f005 f9fe 	bl	8006354 <HAL_TIM_PWM_Start>

  //default PWM duty cycle: 30%
  TIM3->CCR1 = 300;
 8000f58:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <main+0x2b0>)
 8000f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34

  //disable the half transfer complete interrupt for the DMA
  __HAL_DMA_DISABLE_IT(&hdma_dac_ch1, DMA_IT_HT);
 8000f60:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <main+0x2b4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <main+0x2b4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0204 	bic.w	r2, r2, #4
 8000f6e:	601a      	str	r2, [r3, #0]

  //uint8_t testData[2] = {255, 255};


  HAL_I2C_Master_Transmit(&hi2c3, 0b0000000001011110, 0b00000000, 1, 100);
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2200      	movs	r2, #0
 8000f78:	215e      	movs	r1, #94	; 0x5e
 8000f7a:	4859      	ldr	r0, [pc, #356]	; (80010e0 <main+0x2b8>)
 8000f7c:	f002 fe64 	bl	8003c48 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, 0b0000000001011110, 0b00000000, 1, 100);
 8000f80:	2364      	movs	r3, #100	; 0x64
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	2200      	movs	r2, #0
 8000f88:	215e      	movs	r1, #94	; 0x5e
 8000f8a:	4856      	ldr	r0, [pc, #344]	; (80010e4 <main+0x2bc>)
 8000f8c:	f002 fe5c 	bl	8003c48 <HAL_I2C_Master_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (enableSPITransmit)
 8000f90:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <main+0x2c0>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02b      	beq.n	8000ff0 <main+0x1c8>
	 {

		 HAL_SPI_Transmit(&hspi1, SPIdata, 2, 1000);
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	4953      	ldr	r1, [pc, #332]	; (80010ec <main+0x2c4>)
 8000fa0:	4853      	ldr	r0, [pc, #332]	; (80010f0 <main+0x2c8>)
 8000fa2:	f004 fdd4 	bl	8005b4e <HAL_SPI_Transmit>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	4851      	ldr	r0, [pc, #324]	; (80010f4 <main+0x2cc>)
 8000fae:	f002 fd7d 	bl	8003aac <HAL_GPIO_WritePin>
		 enableSPITransmit = false;
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <main+0x2c0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
		 for (int i = 0; i < 20; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	e008      	b.n	8000fd0 <main+0x1a8>
		 {
			 i--;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
			 i++;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
		 for (int i = 0; i < 20; i++)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b13      	cmp	r3, #19
 8000fd4:	ddf3      	ble.n	8000fbe <main+0x196>
		 }
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	4845      	ldr	r0, [pc, #276]	; (80010f4 <main+0x2cc>)
 8000fde:	f002 fd65 	bl	8003aac <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi1, SPIdata, 2, 1000);
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4940      	ldr	r1, [pc, #256]	; (80010ec <main+0x2c4>)
 8000fea:	4841      	ldr	r0, [pc, #260]	; (80010f0 <main+0x2c8>)
 8000fec:	f004 fdaf 	bl	8005b4e <HAL_SPI_Transmit>
	 }

	 if (enableI2Ctransmit == 1)
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <main+0x2d0>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d135      	bne.n	8001064 <main+0x23c>
	 {

		 enableI2Ctransmit = 0;
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <main+0x2d0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
		 if (I2Cdata[0] > 127)
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <main+0x2d4>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b25b      	sxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	da05      	bge.n	8001014 <main+0x1ec>
		 {
			 I2Cdata[0] = 127;
 8001008:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <main+0x2d4>)
 800100a:	227f      	movs	r2, #127	; 0x7f
 800100c:	701a      	strb	r2, [r3, #0]
			 I2CdataTMP[0] = 127;
 800100e:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <main+0x2d8>)
 8001010:	227f      	movs	r2, #127	; 0x7f
 8001012:	701a      	strb	r2, [r3, #0]
		 }
		 if (I2Cdata[0] < 6)
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <main+0x2d4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b05      	cmp	r3, #5
 800101a:	d805      	bhi.n	8001028 <main+0x200>
		 {
			 I2Cdata[0] = 6;
 800101c:	4b37      	ldr	r3, [pc, #220]	; (80010fc <main+0x2d4>)
 800101e:	2206      	movs	r2, #6
 8001020:	701a      	strb	r2, [r3, #0]
			 I2CdataTMP[0] = 6;
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <main+0x2d8>)
 8001024:	2206      	movs	r2, #6
 8001026:	701a      	strb	r2, [r3, #0]
		 }
		 HAL_StatusTypeDef i2c3Status = HAL_I2C_Master_Transmit(&hi2c3, 0b0000000001011110, I2Cdata, 1, 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	4a33      	ldr	r2, [pc, #204]	; (80010fc <main+0x2d4>)
 8001030:	215e      	movs	r1, #94	; 0x5e
 8001032:	482b      	ldr	r0, [pc, #172]	; (80010e0 <main+0x2b8>)
 8001034:	f002 fe08 	bl	8003c48 <HAL_I2C_Master_Transmit>
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
		 HAL_StatusTypeDef i2c1Status = HAL_I2C_Master_Transmit(&hi2c1, 0b0000000001011110, I2CdataTMP, 1, 100);
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <main+0x2d8>)
 8001044:	215e      	movs	r1, #94	; 0x5e
 8001046:	4827      	ldr	r0, [pc, #156]	; (80010e4 <main+0x2bc>)
 8001048:	f002 fdfe 	bl	8003c48 <HAL_I2C_Master_Transmit>
 800104c:	4603      	mov	r3, r0
 800104e:	71bb      	strb	r3, [r7, #6]
		 if (i2c3Status != HAL_OK)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <main+0x232>
		 {
			  MX_I2C3_Init();
 8001056:	f000 f925 	bl	80012a4 <MX_I2C3_Init>
		 }
		 if (i2c1Status != HAL_OK)
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <main+0x23c>
		 {
			 MX_I2C1_Init();
 8001060:	f000 f8e0 	bl	8001224 <MX_I2C1_Init>
		 }
	 }

	 if (startParseInput)
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <main+0x2dc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <main+0x248>
	 {
		 parseUserInput();
 800106c:	f000 fbdc 	bl	8001828 <parseUserInput>
	 }

	 if (setVoltage)
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <main+0x2e0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d08b      	beq.n	8000f90 <main+0x168>
	 {
		 setVoltage = false;
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <main+0x2e0>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	 if (enableSPITransmit)
 800107e:	e787      	b.n	8000f90 <main+0x168>
 8001080:	00000000 	.word	0x00000000
 8001084:	40240000 	.word	0x40240000
 8001088:	9999999a 	.word	0x9999999a
 800108c:	3ff39999 	.word	0x3ff39999
 8001090:	00000000 	.word	0x00000000
 8001094:	409dd800 	.word	0x409dd800
 8001098:	00000000 	.word	0x00000000
 800109c:	40400000 	.word	0x40400000
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	bff39999 	.word	0xbff39999
 80010a8:	20000534 	.word	0x20000534
 80010ac:	20000034 	.word	0x20000034
 80010b0:	08009a30 	.word	0x08009a30
 80010b4:	08009a38 	.word	0x08009a38
 80010b8:	48000800 	.word	0x48000800
 80010bc:	20000d44 	.word	0x20000d44
 80010c0:	200004ac 	.word	0x200004ac
 80010c4:	20000040 	.word	0x20000040
 80010c8:	200001d8 	.word	0x200001d8
 80010cc:	20000340 	.word	0x20000340
 80010d0:	200003d8 	.word	0x200003d8
 80010d4:	2000038c 	.word	0x2000038c
 80010d8:	40000400 	.word	0x40000400
 80010dc:	200001ec 	.word	0x200001ec
 80010e0:	20000288 	.word	0x20000288
 80010e4:	20000234 	.word	0x20000234
 80010e8:	20000d4f 	.word	0x20000d4f
 80010ec:	20000dd0 	.word	0x20000dd0
 80010f0:	200002dc 	.word	0x200002dc
 80010f4:	48000400 	.word	0x48000400
 80010f8:	20000dd2 	.word	0x20000dd2
 80010fc:	20000148 	.word	0x20000148
 8001100:	2000014c 	.word	0x2000014c
 8001104:	20000d4e 	.word	0x20000d4e
 8001108:	20000d50 	.word	0x20000d50

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b096      	sub	sp, #88	; 0x58
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2244      	movs	r2, #68	; 0x44
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f007 ffbc 	bl	8009098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800112e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001132:	f003 f957 	bl	80043e4 <HAL_PWREx_ControlVoltageScaling>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800113c:	f000 fdd8 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001140:	230a      	movs	r3, #10
 8001142:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	2310      	movs	r3, #16
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001156:	2302      	movs	r3, #2
 8001158:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800115e:	230a      	movs	r3, #10
 8001160:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001162:	2307      	movs	r3, #7
 8001164:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4618      	mov	r0, r3
 8001174:	f003 f98c 	bl	8004490 <HAL_RCC_OscConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800117e:	f000 fdb7 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001182:	230f      	movs	r3, #15
 8001184:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001186:	2303      	movs	r3, #3
 8001188:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	2104      	movs	r1, #4
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fd54 	bl	8004c48 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011a6:	f000 fda3 	bl	8001cf0 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3758      	adds	r7, #88	; 0x58
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2224      	movs	r2, #36	; 0x24
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 ff69 	bl	8009098 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_DAC1_Init+0x68>)
 80011c8:	4a15      	ldr	r2, [pc, #84]	; (8001220 <MX_DAC1_Init+0x6c>)
 80011ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <MX_DAC1_Init+0x68>)
 80011ce:	f001 fd20 	bl	8002c12 <HAL_DAC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011d8:	f000 fd8a 	bl	8001cf0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_ENABLE;
 80011dc:	2304      	movs	r3, #4
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011e0:	2324      	movs	r3, #36	; 0x24
 80011e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  sConfig.DAC_SampleAndHoldConfig.DAC_SampleTime = 20;
 80011f0:	2314      	movs	r3, #20
 80011f2:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_SampleAndHoldConfig.DAC_HoldTime = 700;
 80011f4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80011f8:	623b      	str	r3, [r7, #32]
  sConfig.DAC_SampleAndHoldConfig.DAC_RefreshTime = 5;
 80011fa:	2305      	movs	r3, #5
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_DAC1_Init+0x68>)
 8001206:	f001 fe75 	bl	8002ef4 <HAL_DAC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_DAC1_Init+0x60>
  {
    Error_Handler();
 8001210:	f000 fd6e 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200001d8 	.word	0x200001d8
 8001220:	40007400 	.word	0x40007400

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f002 fc56 	bl	8003b10 <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f000 fd41 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f003 f811 	bl	8004298 <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 fd38 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f003 f853 	bl	800432e <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 fd2f 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000234 	.word	0x20000234
 800129c:	40005400 	.word	0x40005400
 80012a0:	00702991 	.word	0x00702991

080012a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_I2C3_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_I2C3_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_I2C3_Init+0x74>)
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <MX_I2C3_Init+0x7c>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_I2C3_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_I2C3_Init+0x74>)
 80012bc:	2201      	movs	r2, #1
 80012be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_I2C3_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_I2C3_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C3_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C3_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C3_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <MX_I2C3_Init+0x74>)
 80012e0:	f002 fc16 	bl	8003b10 <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f000 fd01 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_I2C3_Init+0x74>)
 80012f2:	f002 ffd1 	bl	8004298 <HAL_I2CEx_ConfigAnalogFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f000 fcf8 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_I2C3_Init+0x74>)
 8001304:	f003 f813 	bl	800432e <HAL_I2CEx_ConfigDigitalFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800130e:	f000 fcef 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000288 	.word	0x20000288
 800131c:	40005c00 	.word	0x40005c00
 8001320:	00702991 	.word	0x00702991

08001324 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_SPI1_Init+0x74>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_SPI1_Init+0x78>)
 800132c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_SPI1_Init+0x74>)
 8001330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_SPI1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_SPI1_Init+0x74>)
 800133e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001342:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_SPI1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_SPI1_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_SPI1_Init+0x74>)
 8001352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001356:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_SPI1_Init+0x74>)
 800135a:	2238      	movs	r2, #56	; 0x38
 800135c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_SPI1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_SPI1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_SPI1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_SPI1_Init+0x74>)
 8001372:	2207      	movs	r2, #7
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_SPI1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_SPI1_Init+0x74>)
 800137e:	2208      	movs	r2, #8
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_SPI1_Init+0x74>)
 8001384:	f004 fb40 	bl	8005a08 <HAL_SPI_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800138e:	f000 fcaf 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002dc 	.word	0x200002dc
 800139c:	40013000 	.word	0x40013000

080013a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MX_TIM2_Init+0x98>)
 80013c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_TIM2_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_TIM2_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_TIM2_Init+0x98>)
 80013d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_TIM2_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_TIM2_Init+0x98>)
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e6:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_TIM2_Init+0x98>)
 80013e8:	f004 fe8a 	bl	8006100 <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013f2:	f000 fc7d 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_TIM2_Init+0x98>)
 8001404:	f005 fac2 	bl	800698c <HAL_TIM_ConfigClockSource>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800140e:	f000 fc6f 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001412:	2320      	movs	r3, #32
 8001414:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_TIM2_Init+0x98>)
 8001420:	f005 ffd6 	bl	80073d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800142a:	f000 fc61 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000340 	.word	0x20000340

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	; 0x38
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_TIM3_Init+0xe8>)
 8001470:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <MX_TIM3_Init+0xec>)
 8001472:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_TIM3_Init+0xe8>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_TIM3_Init+0xe8>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_TIM3_Init+0xe8>)
 8001482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001486:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_TIM3_Init+0xe8>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_TIM3_Init+0xe8>)
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_TIM3_Init+0xe8>)
 8001496:	f004 fe33 	bl	8006100 <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014a0:	f000 fc26 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	4619      	mov	r1, r3
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_TIM3_Init+0xe8>)
 80014b2:	f005 fa6b 	bl	800698c <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014bc:	f000 fc18 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014c0:	4818      	ldr	r0, [pc, #96]	; (8001524 <MX_TIM3_Init+0xe8>)
 80014c2:	f004 fee5 	bl	8006290 <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014cc:	f000 fc10 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4811      	ldr	r0, [pc, #68]	; (8001524 <MX_TIM3_Init+0xe8>)
 80014e0:	f005 ff76 	bl	80073d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014ea:	f000 fc01 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	; 0x60
 80014f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM3_Init+0xe8>)
 8001506:	f005 f92d 	bl	8006764 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001510:	f000 fbee 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001514:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM3_Init+0xe8>)
 8001516:	f000 fdc7 	bl	80020a8 <HAL_TIM_MspPostInit>

}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	; 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000038c 	.word	0x2000038c
 8001528:	40000400 	.word	0x40000400

0800152c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_TIM6_Init+0x64>)
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <MX_TIM6_Init+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 799;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_TIM6_Init+0x64>)
 8001544:	f240 321f 	movw	r2, #799	; 0x31f
 8001548:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_TIM6_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_TIM6_Init+0x64>)
 8001552:	2264      	movs	r2, #100	; 0x64
 8001554:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_TIM6_Init+0x64>)
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <MX_TIM6_Init+0x64>)
 800155e:	f004 fdcf 	bl	8006100 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001568:	f000 fbc2 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_TIM6_Init+0x64>)
 800157a:	f005 ff29 	bl	80073d0 <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001584:	f000 fbb4 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200003d8 	.word	0x200003d8
 8001594:	40001000 	.word	0x40001000

08001598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <MX_USART1_UART_Init+0x5c>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015dc:	f005 ff9e 	bl	800751c <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015e6:	f000 fb83 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000424 	.word	0x20000424
 80015f4:	40013800 	.word	0x40013800

080015f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART2_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <MX_USART2_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800163c:	f005 ff6e 	bl	800751c <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 fb53 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200004ac 	.word	0x200004ac
 8001654:	40004400 	.word	0x40004400

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_DMA_Init+0x38>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <MX_DMA_Init+0x38>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6493      	str	r3, [r2, #72]	; 0x48
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_DMA_Init+0x38>)
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200d      	movs	r0, #13
 800167c:	f001 fa93 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001680:	200d      	movs	r0, #13
 8001682:	f001 faac 	bl	8002bde <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b46      	ldr	r3, [pc, #280]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a42      	ldr	r2, [pc, #264]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a3c      	ldr	r2, [pc, #240]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a36      	ldr	r2, [pc, #216]	; (80017d0 <MX_GPIO_Init+0x13c>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <MX_GPIO_Init+0x13c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001710:	4830      	ldr	r0, [pc, #192]	; (80017d4 <MX_GPIO_Init+0x140>)
 8001712:	f002 f9cb 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	482f      	ldr	r0, [pc, #188]	; (80017d8 <MX_GPIO_Init+0x144>)
 800171c:	f002 f9c6 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f002 f9bf 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001734:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4824      	ldr	r0, [pc, #144]	; (80017d8 <MX_GPIO_Init+0x144>)
 8001746:	f002 f807 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800174a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <MX_GPIO_Init+0x140>)
 8001764:	f001 fff8 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001772:	2301      	movs	r3, #1
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800177a:	2304      	movs	r3, #4
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4813      	ldr	r0, [pc, #76]	; (80017d4 <MX_GPIO_Init+0x140>)
 8001786:	f001 ffe7 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_GPIO_Init+0x144>)
 80017a2:	f001 ffd9 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f001 ffc9 	bl	8003758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800

080017dc <startBurst>:
/* USER CODE BEGIN 4 */


// check if "ENTER" is the string inside Rx_data
bool startBurst()
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	return (Rx_data[0] == 'E' && Rx_data[1] == 'N' && Rx_data[2] == 'T' && Rx_data[3] == 'E' && Rx_data[4] == 'R');
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <startBurst+0x44>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b45      	cmp	r3, #69	; 0x45
 80017e6:	d111      	bne.n	800180c <startBurst+0x30>
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <startBurst+0x44>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	2b4e      	cmp	r3, #78	; 0x4e
 80017ee:	d10d      	bne.n	800180c <startBurst+0x30>
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <startBurst+0x44>)
 80017f2:	789b      	ldrb	r3, [r3, #2]
 80017f4:	2b54      	cmp	r3, #84	; 0x54
 80017f6:	d109      	bne.n	800180c <startBurst+0x30>
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <startBurst+0x44>)
 80017fa:	78db      	ldrb	r3, [r3, #3]
 80017fc:	2b45      	cmp	r3, #69	; 0x45
 80017fe:	d105      	bne.n	800180c <startBurst+0x30>
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <startBurst+0x44>)
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	2b52      	cmp	r3, #82	; 0x52
 8001806:	d101      	bne.n	800180c <startBurst+0x30>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <startBurst+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000d44 	.word	0x20000d44
 8001824:	00000000 	.word	0x00000000

08001828 <parseUserInput>:


void parseUserInput()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	uint16_t tmpValue = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	80fb      	strh	r3, [r7, #6]

	tmpValue = (Rx_data[1] - 48) * 100 + (Rx_data[2] - 48) * 10 + (Rx_data[3] - 48);
 8001832:	4bc1      	ldr	r3, [pc, #772]	; (8001b38 <parseUserInput+0x310>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	3b30      	subs	r3, #48	; 0x30
 8001838:	b29b      	uxth	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	0091      	lsls	r1, r2, #2
 8001844:	461a      	mov	r2, r3
 8001846:	460b      	mov	r3, r1
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	b29a      	uxth	r2, r3
 800184e:	4bba      	ldr	r3, [pc, #744]	; (8001b38 <parseUserInput+0x310>)
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	3b30      	subs	r3, #48	; 0x30
 8001854:	b29b      	uxth	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	0089      	lsls	r1, r1, #2
 800185a:	440b      	add	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	4413      	add	r3, r2
 8001862:	b29a      	uxth	r2, r3
 8001864:	4bb4      	ldr	r3, [pc, #720]	; (8001b38 <parseUserInput+0x310>)
 8001866:	78db      	ldrb	r3, [r3, #3]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4413      	add	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b30      	subs	r3, #48	; 0x30
 8001870:	80fb      	strh	r3, [r7, #6]
	tmpValue *= pow_10[Rx_data[4]-48];
 8001872:	4bb1      	ldr	r3, [pc, #708]	; (8001b38 <parseUserInput+0x310>)
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	3b30      	subs	r3, #48	; 0x30
 8001878:	4ab0      	ldr	r2, [pc, #704]	; (8001b3c <parseUserInput+0x314>)
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	b29b      	uxth	r3, r3
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	fb12 f303 	smulbb	r3, r2, r3
 8001886:	80fb      	strh	r3, [r7, #6]


	//1.25 = 80.0/64.0 (Main CLK / number of data points in bell curve arrays)
	switch (Rx_data[0])
 8001888:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <parseUserInput+0x310>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	3b41      	subs	r3, #65	; 0x41
 800188e:	2b35      	cmp	r3, #53	; 0x35
 8001890:	f200 81b9 	bhi.w	8001c06 <parseUserInput+0x3de>
 8001894:	a201      	add	r2, pc, #4	; (adr r2, 800189c <parseUserInput+0x74>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	08001975 	.word	0x08001975
 80018a0:	0800199d 	.word	0x0800199d
 80018a4:	080019c5 	.word	0x080019c5
 80018a8:	080019ed 	.word	0x080019ed
 80018ac:	08001c07 	.word	0x08001c07
 80018b0:	08001c07 	.word	0x08001c07
 80018b4:	08001c07 	.word	0x08001c07
 80018b8:	08001c07 	.word	0x08001c07
 80018bc:	08001c07 	.word	0x08001c07
 80018c0:	08001c07 	.word	0x08001c07
 80018c4:	08001c07 	.word	0x08001c07
 80018c8:	08001c07 	.word	0x08001c07
 80018cc:	08001b7d 	.word	0x08001b7d
 80018d0:	08001a15 	.word	0x08001a15
 80018d4:	08001ae7 	.word	0x08001ae7
 80018d8:	08001a25 	.word	0x08001a25
 80018dc:	08001c07 	.word	0x08001c07
 80018e0:	08001be7 	.word	0x08001be7
 80018e4:	08001a37 	.word	0x08001a37
 80018e8:	08001c07 	.word	0x08001c07
 80018ec:	08001c07 	.word	0x08001c07
 80018f0:	08001a79 	.word	0x08001a79
 80018f4:	08001c07 	.word	0x08001c07
 80018f8:	08001c07 	.word	0x08001c07
 80018fc:	08001c07 	.word	0x08001c07
 8001900:	08001c07 	.word	0x08001c07
 8001904:	08001c07 	.word	0x08001c07
 8001908:	08001c07 	.word	0x08001c07
 800190c:	08001c07 	.word	0x08001c07
 8001910:	08001c07 	.word	0x08001c07
 8001914:	08001c07 	.word	0x08001c07
 8001918:	08001c07 	.word	0x08001c07
 800191c:	08001c07 	.word	0x08001c07
 8001920:	08001c07 	.word	0x08001c07
 8001924:	08001c07 	.word	0x08001c07
 8001928:	08001c07 	.word	0x08001c07
 800192c:	08001c07 	.word	0x08001c07
 8001930:	08001c07 	.word	0x08001c07
 8001934:	08001c07 	.word	0x08001c07
 8001938:	08001c07 	.word	0x08001c07
 800193c:	08001c07 	.word	0x08001c07
 8001940:	08001c07 	.word	0x08001c07
 8001944:	08001c07 	.word	0x08001c07
 8001948:	08001c07 	.word	0x08001c07
 800194c:	08001a1d 	.word	0x08001a1d
 8001950:	08001c07 	.word	0x08001c07
 8001954:	08001c07 	.word	0x08001c07
 8001958:	08001c07 	.word	0x08001c07
 800195c:	08001c07 	.word	0x08001c07
 8001960:	08001c07 	.word	0x08001c07
 8001964:	08001b87 	.word	0x08001b87
 8001968:	08001c07 	.word	0x08001c07
 800196c:	08001c07 	.word	0x08001c07
 8001970:	08001bdd 	.word	0x08001bdd
	{
		case 'A':
			A_ARR = 1.25 * tmpValue;
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd78 	bl	800046c <__aeabi_i2d>
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <parseUserInput+0x318>)
 8001982:	f7fe fddd 	bl	8000540 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f899 	bl	8000ac4 <__aeabi_d2uiz>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <parseUserInput+0x31c>)
 8001998:	801a      	strh	r2, [r3, #0]
			break;
 800199a:	e134      	b.n	8001c06 <parseUserInput+0x3de>
		case 'B':
			B_ARR = 1.25 * tmpValue;
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd64 	bl	800046c <__aeabi_i2d>
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <parseUserInput+0x318>)
 80019aa:	f7fe fdc9 	bl	8000540 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f885 	bl	8000ac4 <__aeabi_d2uiz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <parseUserInput+0x320>)
 80019c0:	801a      	strh	r2, [r3, #0]
			break;
 80019c2:	e120      	b.n	8001c06 <parseUserInput+0x3de>
		case 'C':
			C_ARR = 1.25 * tmpValue;
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd50 	bl	800046c <__aeabi_i2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <parseUserInput+0x318>)
 80019d2:	f7fe fdb5 	bl	8000540 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f871 	bl	8000ac4 <__aeabi_d2uiz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <parseUserInput+0x324>)
 80019e8:	801a      	strh	r2, [r3, #0]
			break;
 80019ea:	e10c      	b.n	8001c06 <parseUserInput+0x3de>
		case 'D':
			D_ARR = 1.25 * tmpValue;
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd3c 	bl	800046c <__aeabi_i2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <parseUserInput+0x318>)
 80019fa:	f7fe fda1 	bl	8000540 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f85d 	bl	8000ac4 <__aeabi_d2uiz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <parseUserInput+0x328>)
 8001a10:	801a      	strh	r2, [r3, #0]
			break;
 8001a12:	e0f8      	b.n	8001c06 <parseUserInput+0x3de>
		case 'N':
			maxWaveNumber = tmpValue;
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <parseUserInput+0x32c>)
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	8013      	strh	r3, [r2, #0]
			break;
 8001a1a:	e0f4      	b.n	8001c06 <parseUserInput+0x3de>
		case 'm':
			timeBetweenBursts = tmpValue;
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <parseUserInput+0x330>)
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	8013      	strh	r3, [r2, #0]
			break;
 8001a22:	e0f0      	b.n	8001c06 <parseUserInput+0x3de>
		case 'P': //PWM duty cycle
			TIM3->CCR1 = tmpValue*10;
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <parseUserInput+0x334>)
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001a34:	e0e7      	b.n	8001c06 <parseUserInput+0x3de>
		case 'S': //spi transmit data (for analog switch)
			if (tmpValue == 17)
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	f000 80e1 	beq.w	8001c00 <parseUserInput+0x3d8>
			{
				break;
			}
			if (tmpValue > 7)
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d90b      	bls.n	8001a5c <parseUserInput+0x234>
			{
				SPIdata[0] = 1<<(tmpValue-8);
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	3b08      	subs	r3, #8
 8001a48:	2201      	movs	r2, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <parseUserInput+0x338>)
 8001a52:	701a      	strb	r2, [r3, #0]
				SPIdata[1] = 0;
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <parseUserInput+0x338>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	705a      	strb	r2, [r3, #1]
 8001a5a:	e009      	b.n	8001a70 <parseUserInput+0x248>
			} else
			{
				SPIdata[0] = 0;
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <parseUserInput+0x338>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
				SPIdata[1] = 1<<tmpValue;
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2201      	movs	r2, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <parseUserInput+0x338>)
 8001a6e:	705a      	strb	r2, [r3, #1]
			}
			enableSPITransmit = true;
 8001a70:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <parseUserInput+0x33c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
			break;
 8001a76:	e0c6      	b.n	8001c06 <parseUserInput+0x3de>
		case 'V':
			if (Rx_data[1] == '0')
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <parseUserInput+0x310>)
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	2b30      	cmp	r3, #48	; 0x30
 8001a7e:	f040 80c1 	bne.w	8001c04 <parseUserInput+0x3dc>
			{
				useIndividualIntensities = 1;
 8001a82:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <parseUserInput+0x340>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
				setVoltage = true;
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <parseUserInput+0x344>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
				uint8_t channelIndex = (Rx_data[5] - '0') * 10 + Rx_data[6] - '0';
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <parseUserInput+0x310>)
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	461a      	mov	r2, r3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <parseUserInput+0x310>)
 8001a9e:	799b      	ldrb	r3, [r3, #6]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3b10      	subs	r3, #16
 8001aa6:	703b      	strb	r3, [r7, #0]
				channelLevels[channelIndex] = (Rx_data[2] - '0') * 100 + (Rx_data[3] - '0') * 10 + Rx_data[4] - '0';
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <parseUserInput+0x310>)
 8001aaa:	789b      	ldrb	r3, [r3, #2]
 8001aac:	461a      	mov	r2, r3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	0091      	lsls	r1, r2, #2
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <parseUserInput+0x310>)
 8001ac2:	78db      	ldrb	r3, [r3, #3]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	0089      	lsls	r1, r1, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <parseUserInput+0x310>)
 8001ad4:	791b      	ldrb	r3, [r3, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	783b      	ldrb	r3, [r7, #0]
 8001adc:	3230      	adds	r2, #48	; 0x30
 8001ade:	b2d1      	uxtb	r1, r2
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <parseUserInput+0x348>)
 8001ae2:	54d1      	strb	r1, [r2, r3]
//				}
//				I2Cdata[0] = (Rx_data[2] - '0') * 100 + (Rx_data[3] - '0') * 10 + Rx_data[4] - '0';
//			}


			break;
 8001ae4:	e08e      	b.n	8001c04 <parseUserInput+0x3dc>
		case 'O':
			offset = voltageconstant * tmpValue;
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fcbf 	bl	800046c <__aeabi_i2d>
 8001aee:	a310      	add	r3, pc, #64	; (adr r3, 8001b30 <parseUserInput+0x308>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd24 	bl	8000540 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7fe ffe0 	bl	8000ac4 <__aeabi_d2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <parseUserInput+0x34c>)
 8001b0a:	801a      	strh	r2, [r3, #0]
			if (offset > 4095)
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <parseUserInput+0x34c>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b14:	d303      	bcc.n	8001b1e <parseUserInput+0x2f6>
			{
				offset = 4095;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <parseUserInput+0x34c>)
 8001b18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b1c:	801a      	strh	r2, [r3, #0]
			}
			if (offset < 0)
			{
				offset = 0;
			}
			setOffset = true;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <parseUserInput+0x350>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
			setVoltage = true;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <parseUserInput+0x344>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
			break;
 8001b2a:	e06c      	b.n	8001c06 <parseUserInput+0x3de>
 8001b2c:	f3af 8000 	nop.w
 8001b30:	9999999a 	.word	0x9999999a
 8001b34:	3ff39999 	.word	0x3ff39999
 8001b38:	20000d44 	.word	0x20000d44
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	3ff40000 	.word	0x3ff40000
 8001b44:	2000002a 	.word	0x2000002a
 8001b48:	2000002c 	.word	0x2000002c
 8001b4c:	2000002e 	.word	0x2000002e
 8001b50:	20000030 	.word	0x20000030
 8001b54:	20000140 	.word	0x20000140
 8001b58:	20000144 	.word	0x20000144
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	20000dd0 	.word	0x20000dd0
 8001b64:	20000d4f 	.word	0x20000d4f
 8001b68:	2000003c 	.word	0x2000003c
 8001b6c:	20000d50 	.word	0x20000d50
 8001b70:	20000d34 	.word	0x20000d34
 8001b74:	20000142 	.word	0x20000142
 8001b78:	20000d51 	.word	0x20000d51
		case 'M': //mode
			stimMode = tmpValue;
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <parseUserInput+0x3ec>)
 8001b82:	701a      	strb	r2, [r3, #0]
			break;
 8001b84:	e03f      	b.n	8001c06 <parseUserInput+0x3de>
		case 's':


			uint8_t channelOrderIndex = Rx_data[1];
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <parseUserInput+0x3f0>)
 8001b88:	785b      	ldrb	r3, [r3, #1]
 8001b8a:	717b      	strb	r3, [r7, #5]

			uint8_t channelOrderIntensity = Rx_data[2];
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <parseUserInput+0x3f0>)
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	713b      	strb	r3, [r7, #4]

			uint16_t stimChannelIndexToSet = (Rx_data[3] << 8) +  Rx_data[4];
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <parseUserInput+0x3f0>)
 8001b94:	78db      	ldrb	r3, [r3, #3]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <parseUserInput+0x3f0>)
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	807b      	strh	r3, [r7, #2]

			uint8_t stimChannelNumberOfBurstsToSet = (Rx_data[5] - '0') * 10 + (Rx_data[6] - '0');
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <parseUserInput+0x3f0>)
 8001ba8:	795b      	ldrb	r3, [r3, #5]
 8001baa:	461a      	mov	r2, r3
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <parseUserInput+0x3f0>)
 8001bb6:	799b      	ldrb	r3, [r3, #6]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3b10      	subs	r3, #16
 8001bbe:	707b      	strb	r3, [r7, #1]

			stimChannelOrder[channelOrderIndex] = stimChannelIndexToSet;
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	4916      	ldr	r1, [pc, #88]	; (8001c1c <parseUserInput+0x3f4>)
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			stimChannelOrderIntensity[channelOrderIndex] = channelOrderIntensity;
 8001bca:	797b      	ldrb	r3, [r7, #5]
 8001bcc:	4914      	ldr	r1, [pc, #80]	; (8001c20 <parseUserInput+0x3f8>)
 8001bce:	793a      	ldrb	r2, [r7, #4]
 8001bd0:	54ca      	strb	r2, [r1, r3]

			stimChannelBurstNumber[channelOrderIndex] = stimChannelNumberOfBurstsToSet;
 8001bd2:	797b      	ldrb	r3, [r7, #5]
 8001bd4:	4913      	ldr	r1, [pc, #76]	; (8001c24 <parseUserInput+0x3fc>)
 8001bd6:	787a      	ldrb	r2, [r7, #1]
 8001bd8:	54ca      	strb	r2, [r1, r3]


			break;
 8001bda:	e014      	b.n	8001c06 <parseUserInput+0x3de>
		case 'v':
			validStimChannelOrderValues = tmpValue;
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <parseUserInput+0x400>)
 8001be2:	701a      	strb	r2, [r3, #0]
			break;
 8001be4:	e00f      	b.n	8001c06 <parseUserInput+0x3de>
		case 'R':
			//I2Cdata[0] = tmpValue;
			//enableI2Ctransmit = 1;
			baseIntensity = tmpValue / 127.0f;
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001c2c <parseUserInput+0x404>
 8001bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <parseUserInput+0x408>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001bfe:	e002      	b.n	8001c06 <parseUserInput+0x3de>
				break;
 8001c00:	bf00      	nop
 8001c02:	e000      	b.n	8001c06 <parseUserInput+0x3de>
			break;
 8001c04:	bf00      	nop

	}
	startParseInput = false;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <parseUserInput+0x40c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000d52 	.word	0x20000d52
 8001c18:	20000d44 	.word	0x20000d44
 8001c1c:	20000d54 	.word	0x20000d54
 8001c20:	20000d90 	.word	0x20000d90
 8001c24:	20000db0 	.word	0x20000db0
 8001c28:	20000dae 	.word	0x20000dae
 8001c2c:	42fe0000 	.word	0x42fe0000
 8001c30:	20000150 	.word	0x20000150
 8001c34:	20000d4e 	.word	0x20000d4e

08001c38 <HAL_UART_RxCpltCallback>:

/*
 * gets called whenever data is sent through UART
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	if (startBurst())
 8001c40:	f7ff fdcc 	bl	80017dc <startBurst>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01f      	beq.n	8001c8a <HAL_UART_RxCpltCallback+0x52>
	{
		toggleBurst = 1 - toggleBurst;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_UART_RxCpltCallback+0x78>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f1c3 0301 	rsb	r3, r3, #1
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_UART_RxCpltCallback+0x78>)
 8001c56:	701a      	strb	r2, [r3, #0]

		if (toggleBurst == 1)
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_RxCpltCallback+0x78>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_UART_RxCpltCallback+0x36>
		{
			enableBurst = maxWaveNumber;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_UART_RxCpltCallback+0x80>)
 8001c66:	801a      	strh	r2, [r3, #0]
			stimChannelIndex = 0;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_UART_RxCpltCallback+0x84>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
		}
		if (toggleBurst == 0)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_UART_RxCpltCallback+0x78>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d113      	bne.n	8001c9e <HAL_UART_RxCpltCallback+0x66>
		{
			htim2.Instance->ARR = D_ARR;
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_UART_RxCpltCallback+0x88>)
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_UART_RxCpltCallback+0x8c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
			hdma_dac_ch1.Instance->CMAR = (uint32_t) &Line_LUT;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_UART_RxCpltCallback+0x90>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_UART_RxCpltCallback+0x94>)
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	e009      	b.n	8001c9e <HAL_UART_RxCpltCallback+0x66>
		}

	} else
	if (!startParseInput)
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_UART_RxCpltCallback+0x98>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	f083 0301 	eor.w	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_UART_RxCpltCallback+0x66>
	{
		startParseInput = true;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_UART_RxCpltCallback+0x98>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, Rx_data, 7);
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <HAL_UART_RxCpltCallback+0x9c>)
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <HAL_UART_RxCpltCallback+0xa0>)
 8001ca4:	f005 fd12 	bl	80076cc <HAL_UART_Receive_IT>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000d4b 	.word	0x20000d4b
 8001cb4:	20000140 	.word	0x20000140
 8001cb8:	20000d4c 	.word	0x20000d4c
 8001cbc:	20000dce 	.word	0x20000dce
 8001cc0:	20000030 	.word	0x20000030
 8001cc4:	20000340 	.word	0x20000340
 8001cc8:	200001ec 	.word	0x200001ec
 8001ccc:	20000040 	.word	0x20000040
 8001cd0:	20000d4e 	.word	0x20000d4e
 8001cd4:	20000d44 	.word	0x20000d44
 8001cd8:	200004ac 	.word	0x200004ac

08001cdc <HAL_TIM_PeriodElapsedCallback>:

/*
 * not using this at the moment
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>
	...

08001cfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x44>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x44>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x44>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x44>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <HAL_DAC_MspInit+0xdc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d158      	bne.n	8001e18 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_DAC_MspInit+0xe0>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_DAC_MspInit+0xe0>)
 8001d6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <HAL_DAC_MspInit+0xe0>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_DAC_MspInit+0xe0>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <HAL_DAC_MspInit+0xe0>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_DAC_MspInit+0xe0>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d96:	2310      	movs	r3, #16
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dac:	f001 fcd4 	bl	8003758 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_DAC_MspInit+0xe8>)
 8001db4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001db8:	2206      	movs	r2, #6
 8001dba:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ddc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001de0:	2220      	movs	r2, #32
 8001de2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001dec:	480e      	ldr	r0, [pc, #56]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001dee:	f001 fa3d 	bl	800326c <HAL_DMA_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001df8:	f7ff ff7a 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_DAC_MspInit+0xe4>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2036      	movs	r0, #54	; 0x36
 8001e0e:	f000 feca 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e12:	2036      	movs	r0, #54	; 0x36
 8001e14:	f000 fee3 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40007400 	.word	0x40007400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	200001ec 	.word	0x200001ec
 8001e2c:	40020030 	.word	0x40020030

08001e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0ae      	sub	sp, #184	; 0xb8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2288      	movs	r2, #136	; 0x88
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f007 f921 	bl	8009098 <memset>
  if(hi2c->Instance==I2C1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_I2C_MspInit+0x134>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d13c      	bne.n	8001eda <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e60:	2340      	movs	r3, #64	; 0x40
 8001e62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 f90f 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e78:	f7ff ff3a 	bl	8001cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	4a39      	ldr	r2, [pc, #228]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e88:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	482c      	ldr	r0, [pc, #176]	; (8001f6c <HAL_I2C_MspInit+0x13c>)
 8001ebc:	f001 fc4c 	bl	8003758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001ec6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ed8:	e040      	b.n	8001f5c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <HAL_I2C_MspInit+0x140>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d13b      	bne.n	8001f5c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 f8cc 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8001efe:	f7ff fef7 	bl	8001cf0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f20:	2312      	movs	r3, #18
 8001f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f32:	2304      	movs	r3, #4
 8001f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480d      	ldr	r0, [pc, #52]	; (8001f74 <HAL_I2C_MspInit+0x144>)
 8001f40:	f001 fc0a 	bl	8003758 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001f4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	37b8      	adds	r7, #184	; 0xb8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40005400 	.word	0x40005400
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	40005c00 	.word	0x40005c00
 8001f74:	48000800 	.word	0x48000800

08001f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_SPI_MspInit+0x7c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d127      	bne.n	8001fea <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001fca:	2338      	movs	r3, #56	; 0x38
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fda:	2305      	movs	r3, #5
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_SPI_MspInit+0x84>)
 8001fe6:	f001 fbb7 	bl	8003758 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40013000 	.word	0x40013000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	48000400 	.word	0x48000400

08002000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d114      	bne.n	800203c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	201c      	movs	r0, #28
 8002030:	f000 fdb9 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002034:	201c      	movs	r0, #28
 8002036:	f000 fdd2 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800203a:	e02a      	b.n	8002092 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_TIM_Base_MspInit+0xa0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10c      	bne.n	8002060 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	e018      	b.n	8002092 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <HAL_TIM_Base_MspInit+0xa4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d113      	bne.n	8002092 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	6593      	str	r3, [r2, #88]	; 0x58
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_TIM_Base_MspInit+0x9c>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2036      	movs	r0, #54	; 0x36
 8002088:	f000 fd8d 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800208c:	2036      	movs	r0, #54	; 0x36
 800208e:	f000 fda6 	bl	8002bde <HAL_NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40001000 	.word	0x40001000

080020a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_TIM_MspPostInit+0x64>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d11c      	bne.n	8002104 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020e2:	2340      	movs	r3, #64	; 0x40
 80020e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002100:	f001 fb2a 	bl	8003758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40000400 	.word	0x40000400
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0ae      	sub	sp, #184	; 0xb8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	2288      	movs	r2, #136	; 0x88
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f006 ffaf 	bl	8009098 <memset>
  if(huart->Instance==USART1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_UART_MspInit+0x158>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d145      	bne.n	80021d0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002144:	2301      	movs	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002148:	2300      	movs	r3, #0
 800214a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4618      	mov	r0, r3
 8002152:	f002 ff9d 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800215c:	f7ff fdc8 	bl	8001cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002160:	4b43      	ldr	r3, [pc, #268]	; (8002270 <HAL_UART_MspInit+0x15c>)
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	4a42      	ldr	r2, [pc, #264]	; (8002270 <HAL_UART_MspInit+0x15c>)
 8002166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216a:	6613      	str	r3, [r2, #96]	; 0x60
 800216c:	4b40      	ldr	r3, [pc, #256]	; (8002270 <HAL_UART_MspInit+0x15c>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <HAL_UART_MspInit+0x15c>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	4a3c      	ldr	r2, [pc, #240]	; (8002270 <HAL_UART_MspInit+0x15c>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_UART_MspInit+0x15c>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002190:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021aa:	2307      	movs	r3, #7
 80021ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021b4:	4619      	mov	r1, r3
 80021b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ba:	f001 facd 	bl	8003758 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2025      	movs	r0, #37	; 0x25
 80021c4:	f000 fcef 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021c8:	2025      	movs	r0, #37	; 0x25
 80021ca:	f000 fd08 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021ce:	e048      	b.n	8002262 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <HAL_UART_MspInit+0x160>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d143      	bne.n	8002262 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021da:	2302      	movs	r3, #2
 80021dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021de:	2300      	movs	r3, #0
 80021e0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 ff52 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80021f2:	f7ff fd7d 	bl	8001cf0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_UART_MspInit+0x15c>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_UART_MspInit+0x15c>)
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_UART_MspInit+0x15c>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_UART_MspInit+0x15c>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_UART_MspInit+0x15c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_UART_MspInit+0x15c>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002226:	230c      	movs	r3, #12
 8002228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223e:	2307      	movs	r3, #7
 8002240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f001 fa83 	bl	8003758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	2026      	movs	r0, #38	; 0x26
 8002258:	f000 fca5 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800225c:	2026      	movs	r0, #38	; 0x26
 800225e:	f000 fcbe 	bl	8002bde <HAL_NVIC_EnableIRQ>
}
 8002262:	bf00      	nop
 8002264:	37b8      	adds	r7, #184	; 0xb8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40013800 	.word	0x40013800
 8002270:	40021000 	.word	0x40021000
 8002274:	40004400 	.word	0x40004400

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800227c:	e7fe      	b.n	800227c <NMI_Handler+0x4>

0800227e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <HardFault_Handler+0x4>

08002284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <MemManage_Handler+0x4>

0800228a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <BusFault_Handler+0x4>

08002290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <UsageFault_Handler+0x4>

08002296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c4:	f000 fb50 	bl	8002968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80022d0:	485a      	ldr	r0, [pc, #360]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 80022d2:	f001 f962 	bl	800359a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  //toggleBurst is controlled by sending "ENTER" through USB
  if (toggleBurst == 0)
 80022d6:	4b5a      	ldr	r3, [pc, #360]	; (8002440 <DMA1_Channel3_IRQHandler+0x174>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80a9 	beq.w	8002432 <DMA1_Channel3_IRQHandler+0x166>
	  return;
  }

  //enableBurst counts the number of bursts remaining after the toggleBurst flag is set to true
  //if it is 0, we skip timeBetweenBursts * D_ARR / 1.25 microseconds of stimulation
  if (enableBurst == 0)
 80022e0:	4b58      	ldr	r3, [pc, #352]	; (8002444 <DMA1_Channel3_IRQHandler+0x178>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13d      	bne.n	8002364 <DMA1_Channel3_IRQHandler+0x98>
  {
	  if (burstPauseIndex < timeBetweenBursts) // == it's pausing time
 80022e8:	4b57      	ldr	r3, [pc, #348]	; (8002448 <DMA1_Channel3_IRQHandler+0x17c>)
 80022ea:	881a      	ldrh	r2, [r3, #0]
 80022ec:	4b57      	ldr	r3, [pc, #348]	; (800244c <DMA1_Channel3_IRQHandler+0x180>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d206      	bcs.n	8002302 <DMA1_Channel3_IRQHandler+0x36>
	  {
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);

		  burstPauseIndex++;
 80022f4:	4b54      	ldr	r3, [pc, #336]	; (8002448 <DMA1_Channel3_IRQHandler+0x17c>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	4b52      	ldr	r3, [pc, #328]	; (8002448 <DMA1_Channel3_IRQHandler+0x17c>)
 80022fe:	801a      	strh	r2, [r3, #0]
 				  stimChannelIndex = 0;
 				  toggleBurst = 0;
			  }
		  }
	  }
	  return;
 8002300:	e099      	b.n	8002436 <DMA1_Channel3_IRQHandler+0x16a>
		  burstPauseIndex = 0;
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <DMA1_Channel3_IRQHandler+0x17c>)
 8002304:	2200      	movs	r2, #0
 8002306:	801a      	strh	r2, [r3, #0]
		  htim2.Instance->ARR = A_ARR;
 8002308:	4b51      	ldr	r3, [pc, #324]	; (8002450 <DMA1_Channel3_IRQHandler+0x184>)
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	4b51      	ldr	r3, [pc, #324]	; (8002454 <DMA1_Channel3_IRQHandler+0x188>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
		  enableBurst = maxWaveNumber;
 8002312:	4b51      	ldr	r3, [pc, #324]	; (8002458 <DMA1_Channel3_IRQHandler+0x18c>)
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <DMA1_Channel3_IRQHandler+0x178>)
 8002318:	801a      	strh	r2, [r3, #0]
		  currentChannelBurstNumber++;
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <DMA1_Channel3_IRQHandler+0x190>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b4e      	ldr	r3, [pc, #312]	; (800245c <DMA1_Channel3_IRQHandler+0x190>)
 8002324:	701a      	strb	r2, [r3, #0]
		  if (currentChannelBurstNumber >= stimChannelBurstNumber[stimChannelIndex])
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <DMA1_Channel3_IRQHandler+0x194>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <DMA1_Channel3_IRQHandler+0x198>)
 800232e:	5c9a      	ldrb	r2, [r3, r2]
 8002330:	4b4a      	ldr	r3, [pc, #296]	; (800245c <DMA1_Channel3_IRQHandler+0x190>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d87e      	bhi.n	8002436 <DMA1_Channel3_IRQHandler+0x16a>
			  currentChannelBurstNumber = 0;
 8002338:	4b48      	ldr	r3, [pc, #288]	; (800245c <DMA1_Channel3_IRQHandler+0x190>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
			  stimChannelIndex++;
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <DMA1_Channel3_IRQHandler+0x194>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <DMA1_Channel3_IRQHandler+0x194>)
 8002348:	701a      	strb	r2, [r3, #0]
 			  if (stimChannelIndex >= validStimChannelOrderValues)
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <DMA1_Channel3_IRQHandler+0x194>)
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <DMA1_Channel3_IRQHandler+0x19c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d36f      	bcc.n	8002436 <DMA1_Channel3_IRQHandler+0x16a>
 				  stimChannelIndex = 0;
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <DMA1_Channel3_IRQHandler+0x194>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
 				  toggleBurst = 0;
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <DMA1_Channel3_IRQHandler+0x174>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
	  return;
 8002362:	e068      	b.n	8002436 <DMA1_Channel3_IRQHandler+0x16a>
  }


  switch (currentWaveState)
 8002364:	4b41      	ldr	r3, [pc, #260]	; (800246c <DMA1_Channel3_IRQHandler+0x1a0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d84e      	bhi.n	800240a <DMA1_Channel3_IRQHandler+0x13e>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <DMA1_Channel3_IRQHandler+0xa8>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002385 	.word	0x08002385
 8002378:	080023ab 	.word	0x080023ab
 800237c:	080023c7 	.word	0x080023c7
 8002380:	080023ef 	.word	0x080023ef
  {
  	  case upBump:
  		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
  		  htim2.Instance->ARR = A_ARR;
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <DMA1_Channel3_IRQHandler+0x184>)
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	4b32      	ldr	r3, [pc, #200]	; (8002454 <DMA1_Channel3_IRQHandler+0x188>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
  		  hdma_dac_ch1.Instance->CMAR = (uint32_t) &(*intensityValues[2 * currentIntensity]); //horrible, have to redo this properly
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <DMA1_Channel3_IRQHandler+0x1a4>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4a37      	ldr	r2, [pc, #220]	; (8002474 <DMA1_Channel3_IRQHandler+0x1a8>)
 8002398:	441a      	add	r2, r3
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60da      	str	r2, [r3, #12]
  		  hdma_dac_ch1.Instance->CNDTR = 64;
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2240      	movs	r2, #64	; 0x40
 80023a6:	605a      	str	r2, [r3, #4]
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
  		  break;
 80023a8:	e02f      	b.n	800240a <DMA1_Channel3_IRQHandler+0x13e>

  	  case shortFlat:
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);

  		  htim2.Instance->ARR = B_ARR;
 80023aa:	4b33      	ldr	r3, [pc, #204]	; (8002478 <DMA1_Channel3_IRQHandler+0x1ac>)
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <DMA1_Channel3_IRQHandler+0x188>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  		  hdma_dac_ch1.Instance->CMAR = (uint32_t) &Line_LUT;
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a30      	ldr	r2, [pc, #192]	; (800247c <DMA1_Channel3_IRQHandler+0x1b0>)
 80023ba:	60da      	str	r2, [r3, #12]
  		  hdma_dac_ch1.Instance->CNDTR = 64;
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	605a      	str	r2, [r3, #4]
  		  break;
 80023c4:	e021      	b.n	800240a <DMA1_Channel3_IRQHandler+0x13e>

  	  case downBump:
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);

  		  htim2.Instance->ARR = C_ARR;
 80023c6:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <DMA1_Channel3_IRQHandler+0x1b4>)
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <DMA1_Channel3_IRQHandler+0x188>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
  		  hdma_dac_ch1.Instance->CMAR = (uint32_t) &(*intensityValues[2 * currentIntensity + 1]);
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <DMA1_Channel3_IRQHandler+0x1a4>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	3301      	adds	r3, #1
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	4a26      	ldr	r2, [pc, #152]	; (8002474 <DMA1_Channel3_IRQHandler+0x1a8>)
 80023dc:	441a      	add	r2, r3
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60da      	str	r2, [r3, #12]
  		  hdma_dac_ch1.Instance->CNDTR = 64;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2240      	movs	r2, #64	; 0x40
 80023ea:	605a      	str	r2, [r3, #4]
  		  break;
 80023ec:	e00d      	b.n	800240a <DMA1_Channel3_IRQHandler+0x13e>

  	  case longFlat:
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);

  		  htim2.Instance->ARR = D_ARR;
 80023ee:	4b25      	ldr	r3, [pc, #148]	; (8002484 <DMA1_Channel3_IRQHandler+0x1b8>)
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <DMA1_Channel3_IRQHandler+0x188>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
  		  hdma_dac_ch1.Instance->CMAR = (uint32_t) &Line_LUT;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1f      	ldr	r2, [pc, #124]	; (800247c <DMA1_Channel3_IRQHandler+0x1b0>)
 80023fe:	60da      	str	r2, [r3, #12]
  		  hdma_dac_ch1.Instance->CNDTR = 64;
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <DMA1_Channel3_IRQHandler+0x170>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	605a      	str	r2, [r3, #4]
  		  break;
 8002408:	bf00      	nop
  }


  currentWaveState++;
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <DMA1_Channel3_IRQHandler+0x1a0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <DMA1_Channel3_IRQHandler+0x1a0>)
 8002414:	701a      	strb	r2, [r3, #0]
  if (currentWaveState > longFlat)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <DMA1_Channel3_IRQHandler+0x1a0>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d90c      	bls.n	8002438 <DMA1_Channel3_IRQHandler+0x16c>
  {
	  enableBurst--;
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <DMA1_Channel3_IRQHandler+0x178>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <DMA1_Channel3_IRQHandler+0x178>)
 8002428:	801a      	strh	r2, [r3, #0]
	  currentWaveState = upBump;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <DMA1_Channel3_IRQHandler+0x1a0>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e002      	b.n	8002438 <DMA1_Channel3_IRQHandler+0x16c>
	  return;
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA1_Channel3_IRQHandler+0x16c>
	  return;
 8002436:	bf00      	nop
  }

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200001ec 	.word	0x200001ec
 8002440:	20000d4b 	.word	0x20000d4b
 8002444:	20000d4c 	.word	0x20000d4c
 8002448:	20000dd4 	.word	0x20000dd4
 800244c:	20000144 	.word	0x20000144
 8002450:	2000002a 	.word	0x2000002a
 8002454:	20000340 	.word	0x20000340
 8002458:	20000140 	.word	0x20000140
 800245c:	20000dd6 	.word	0x20000dd6
 8002460:	20000dce 	.word	0x20000dce
 8002464:	20000db0 	.word	0x20000db0
 8002468:	20000dae 	.word	0x20000dae
 800246c:	20000028 	.word	0x20000028
 8002470:	2000003d 	.word	0x2000003d
 8002474:	20000534 	.word	0x20000534
 8002478:	2000002c 	.word	0x2000002c
 800247c:	20000040 	.word	0x20000040
 8002480:	2000002e 	.word	0x2000002e
 8002484:	20000030 	.word	0x20000030

08002488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM2_IRQHandler+0x10>)
 800248e:	f004 f867 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000340 	.word	0x20000340

0800249c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <USART1_IRQHandler+0x10>)
 80024a2:	f005 f95f 	bl	8007764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000424 	.word	0x20000424

080024b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <USART2_IRQHandler+0x10>)
 80024b6:	f005 f955 	bl	8007764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200004ac 	.word	0x200004ac

080024c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024ca:	483a      	ldr	r0, [pc, #232]	; (80025b4 <TIM6_DAC_IRQHandler+0xf0>)
 80024cc:	f004 f848 	bl	8006560 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80024d0:	4839      	ldr	r0, [pc, #228]	; (80025b8 <TIM6_DAC_IRQHandler+0xf4>)
 80024d2:	f000 fc8d 	bl	8002df0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  	if (enableBurst != 0)
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <TIM6_DAC_IRQHandler+0xf8>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <TIM6_DAC_IRQHandler+0x22>
  	{
  		TIM6->ARR = 100;
 80024de:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <TIM6_DAC_IRQHandler+0xfc>)
 80024e0:	2264      	movs	r2, #100	; 0x64
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e4:	e062      	b.n	80025ac <TIM6_DAC_IRQHandler+0xe8>
//  			SPIdata[0] = 0;
//  			SPIdata[1] = 0;
//  			enableSPITransmit = true;
//  			return;
//  		}
		if (stimChannelBurstNumber[stimChannelIndex] == 0)
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <TIM6_DAC_IRQHandler+0x100>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <TIM6_DAC_IRQHandler+0x104>)
 80024ee:	5c9b      	ldrb	r3, [r3, r2]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d118      	bne.n	8002526 <TIM6_DAC_IRQHandler+0x62>
		{
			SPIdata[0] = 0;
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <TIM6_DAC_IRQHandler+0x108>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
			SPIdata[1] = 0;
 80024fa:	4b34      	ldr	r3, [pc, #208]	; (80025cc <TIM6_DAC_IRQHandler+0x108>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	705a      	strb	r2, [r3, #1]
			enableSPITransmit = true;
 8002500:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <TIM6_DAC_IRQHandler+0x10c>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
			stimChannelIndex++;
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <TIM6_DAC_IRQHandler+0x100>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <TIM6_DAC_IRQHandler+0x100>)
 8002510:	701a      	strb	r2, [r3, #0]
			if (stimChannelIndex >= validStimChannelOrderValues)
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <TIM6_DAC_IRQHandler+0x100>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <TIM6_DAC_IRQHandler+0x110>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d345      	bcc.n	80025aa <TIM6_DAC_IRQHandler+0xe6>
			{
				stimChannelIndex = 0;
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <TIM6_DAC_IRQHandler+0x100>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
			}
			return;
 8002524:	e041      	b.n	80025aa <TIM6_DAC_IRQHandler+0xe6>
		}
		uint16_t tmpValue = stimChannelOrder[stimChannelIndex];
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <TIM6_DAC_IRQHandler+0x100>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <TIM6_DAC_IRQHandler+0x114>)
 800252e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002532:	81fb      	strh	r3, [r7, #14]

		SPIdata[0] = (uint8_t) (tmpValue >> 8);
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	b29b      	uxth	r3, r3
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <TIM6_DAC_IRQHandler+0x108>)
 800253e:	701a      	strb	r2, [r3, #0]
		SPIdata[1] = tmpValue & 0xff;
 8002540:	89fb      	ldrh	r3, [r7, #14]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <TIM6_DAC_IRQHandler+0x108>)
 8002546:	705a      	strb	r2, [r3, #1]
		enableSPITransmit = true;
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <TIM6_DAC_IRQHandler+0x10c>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]


		uint8_t intensityLevel = stimChannelOrderIntensity[stimChannelIndex];
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <TIM6_DAC_IRQHandler+0x100>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <TIM6_DAC_IRQHandler+0x118>)
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	737b      	strb	r3, [r7, #13]
	    I2Cdata[0] = intensityLevel * baseIntensity;
 800255a:	7b7b      	ldrb	r3, [r7, #13]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <TIM6_DAC_IRQHandler+0x11c>)
 8002566:	edd3 7a00 	vldr	s15, [r3]
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002572:	edc7 7a01 	vstr	s15, [r7, #4]
 8002576:	793b      	ldrb	r3, [r7, #4]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <TIM6_DAC_IRQHandler+0x120>)
 800257c:	701a      	strb	r2, [r3, #0]
	    I2CdataTMP[0] = intensityLevel * baseIntensity;
 800257e:	7b7b      	ldrb	r3, [r7, #13]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <TIM6_DAC_IRQHandler+0x11c>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002596:	edc7 7a01 	vstr	s15, [r7, #4]
 800259a:	793b      	ldrb	r3, [r7, #4]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <TIM6_DAC_IRQHandler+0x124>)
 80025a0:	701a      	strb	r2, [r3, #0]
	    enableI2Ctransmit = 1;
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <TIM6_DAC_IRQHandler+0x128>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e000      	b.n	80025ac <TIM6_DAC_IRQHandler+0xe8>
			return;
 80025aa:	bf00      	nop
  	}


  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003d8 	.word	0x200003d8
 80025b8:	200001d8 	.word	0x200001d8
 80025bc:	20000d4c 	.word	0x20000d4c
 80025c0:	40001000 	.word	0x40001000
 80025c4:	20000dce 	.word	0x20000dce
 80025c8:	20000db0 	.word	0x20000db0
 80025cc:	20000dd0 	.word	0x20000dd0
 80025d0:	20000d4f 	.word	0x20000d4f
 80025d4:	20000dae 	.word	0x20000dae
 80025d8:	20000d54 	.word	0x20000d54
 80025dc:	20000d90 	.word	0x20000d90
 80025e0:	20000150 	.word	0x20000150
 80025e4:	20000148 	.word	0x20000148
 80025e8:	2000014c 	.word	0x2000014c
 80025ec:	20000dd2 	.word	0x20000dd2

080025f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00a      	b.n	8002618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	4601      	mov	r1, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	b2ca      	uxtb	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf0      	blt.n	8002602 <_read+0x12>
  }

  return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e009      	b.n	8002650 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60ba      	str	r2, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fbdb 	bl	8000e00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf1      	blt.n	800263c <_write+0x12>
  }
  return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_close>:

int _close(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268a:	605a      	str	r2, [r3, #4]
  return 0;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_isatty>:

int _isatty(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f006 fd1a 	bl	8009134 <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20018000 	.word	0x20018000
 800272c:	00000400 	.word	0x00000400
 8002730:	20000dd8 	.word	0x20000dd8
 8002734:	20000f30 	.word	0x20000f30

08002738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <SystemInit+0x20>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <SystemInit+0x20>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <fillWithBell>:
 */

#include "wavegen.h"

void fillWithBell(uint32_t* array, size_t size, double avg, double dev, double amp, double offset)
{
 800275c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002760:	b08c      	sub	sp, #48	; 0x30
 8002762:	af00      	add	r7, sp, #0
 8002764:	6278      	str	r0, [r7, #36]	; 0x24
 8002766:	6239      	str	r1, [r7, #32]
 8002768:	ed87 0b06 	vstr	d0, [r7, #24]
 800276c:	ed87 1b04 	vstr	d1, [r7, #16]
 8002770:	ed87 2b02 	vstr	d2, [r7, #8]
 8002774:	ed87 3b00 	vstr	d3, [r7]

    for (int i = 0; i < size; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277c:	e064      	b.n	8002848 <fillWithBell+0xec>
    {
        array[i] = amp*exp(-((i - avg)*(i - avg)/(2*dev*dev))) + offset;
 800277e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002780:	f7fd fe74 	bl	800046c <__aeabi_i2d>
 8002784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002788:	f7fd fd22 	bl	80001d0 <__aeabi_dsub>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4614      	mov	r4, r2
 8002792:	461d      	mov	r5, r3
 8002794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002796:	f7fd fe69 	bl	800046c <__aeabi_i2d>
 800279a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279e:	f7fd fd17 	bl	80001d0 <__aeabi_dsub>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4620      	mov	r0, r4
 80027a8:	4629      	mov	r1, r5
 80027aa:	f7fd fec9 	bl	8000540 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4614      	mov	r4, r2
 80027b4:	461d      	mov	r5, r3
 80027b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	f7fd fd09 	bl	80001d4 <__adddf3>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027ce:	f7fd feb7 	bl	8000540 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4620      	mov	r0, r4
 80027d8:	4629      	mov	r1, r5
 80027da:	f7fd ffdb 	bl	8000794 <__aeabi_ddiv>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4690      	mov	r8, r2
 80027e4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80027e8:	ec49 8b10 	vmov	d0, r8, r9
 80027ec:	f006 ff0c 	bl	8009608 <exp>
 80027f0:	ec51 0b10 	vmov	r0, r1, d0
 80027f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027f8:	f7fd fea2 	bl	8000540 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002808:	f7fd fce4 	bl	80001d4 <__adddf3>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	18d4      	adds	r4, r2, r3
 800281c:	f7fe f952 	bl	8000ac4 <__aeabi_d2uiz>
 8002820:	4603      	mov	r3, r0
 8002822:	6023      	str	r3, [r4, #0]
        if (array[i] > 4095)
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	4413      	add	r3, r2
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d306      	bcc.n	8002842 <fillWithBell+0xe6>
        {
        	array[i] = 4095;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	4413      	add	r3, r2
 800283c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002840:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	3301      	adds	r3, #1
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	429a      	cmp	r2, r3
 800284e:	d896      	bhi.n	800277e <fillWithBell+0x22>
        if (array[i] < 0)
        {
        	array[i] = 0;
        }
    }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3730      	adds	r7, #48	; 0x30
 8002856:	46bd      	mov	sp, r7
 8002858:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800285c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002860:	f7ff ff6a 	bl	8002738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <LoopForever+0x6>)
  ldr r1, =_edata
 8002866:	490d      	ldr	r1, [pc, #52]	; (800289c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <LoopForever+0xe>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800286c:	e002      	b.n	8002874 <LoopCopyDataInit>

0800286e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002872:	3304      	adds	r3, #4

08002874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002878:	d3f9      	bcc.n	800286e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800287c:	4c0a      	ldr	r4, [pc, #40]	; (80028a8 <LoopForever+0x16>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002880:	e001      	b.n	8002886 <LoopFillZerobss>

08002882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002884:	3204      	adds	r2, #4

08002886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002888:	d3fb      	bcc.n	8002882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288a:	f006 fc59 	bl	8009140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800288e:	f7fe facb 	bl	8000e28 <main>

08002892 <LoopForever>:

LoopForever:
    b LoopForever
 8002892:	e7fe      	b.n	8002892 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002894:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 80028a0:	08009ac8 	.word	0x08009ac8
  ldr r2, =_sbss
 80028a4:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 80028a8:	20000f2c 	.word	0x20000f2c

080028ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC1_2_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_Init+0x3c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_Init+0x3c>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c6:	2003      	movs	r0, #3
 80028c8:	f000 f962 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 f80f 	bl	80028f0 <HAL_InitTick>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	71fb      	strb	r3, [r7, #7]
 80028dc:	e001      	b.n	80028e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028de:	f7ff fa0d 	bl	8001cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40022000 	.word	0x40022000

080028f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_InitTick+0x6c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_InitTick+0x70>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_InitTick+0x6c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002912:	fbb3 f3f1 	udiv	r3, r3, r1
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f96d 	bl	8002bfa <HAL_SYSTICK_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d809      	bhi.n	8002940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 f937 	bl	8002ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_InitTick+0x74>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e007      	b.n	8002950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e004      	b.n	8002950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e001      	b.n	8002950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000015c 	.word	0x2000015c
 8002960:	20000154 	.word	0x20000154
 8002964:	20000158 	.word	0x20000158

08002968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_IncTick+0x20>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_IncTick+0x24>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4413      	add	r3, r2
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_IncTick+0x24>)
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2000015c 	.word	0x2000015c
 800298c:	20000ddc 	.word	0x20000ddc

08002990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return uwTick;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_GetTick+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000ddc 	.word	0x20000ddc

080029a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b0:	f7ff ffee 	bl	8002990 <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d005      	beq.n	80029ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_Delay+0x44>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ce:	bf00      	nop
 80029d0:	f7ff ffde 	bl	8002990 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d8f7      	bhi.n	80029d0 <HAL_Delay+0x28>
  {
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000015c 	.word	0x2000015c

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	; (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
         );
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f7ff ff8e 	bl	8002a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff29 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb8:	f7ff ff3e 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7ff ff8e 	bl	8002ae4 <NVIC_EncodePriority>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff5d 	bl	8002a90 <__NVIC_SetPriority>
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff31 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ffa2 	bl	8002b4c <SysTick_Config>
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e014      	b.n	8002c4e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	791b      	ldrb	r3, [r3, #4]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff f885 	bl	8001d44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	795b      	ldrb	r3, [r3, #5]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_DAC_Start_DMA+0x1e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0ab      	b.n	8002dce <HAL_DAC_Start_DMA+0x176>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d12f      	bne.n	8002ce8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	; (8002dd8 <HAL_DAC_Start_DMA+0x180>)
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a51      	ldr	r2, [pc, #324]	; (8002ddc <HAL_DAC_Start_DMA+0x184>)
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_DAC_Start_DMA+0x188>)
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cae:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d013      	beq.n	8002cde <HAL_DAC_Start_DMA+0x86>
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d845      	bhi.n	8002d48 <HAL_DAC_Start_DMA+0xf0>
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DAC_Start_DMA+0x72>
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d005      	beq.n	8002cd4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002cc8:	e03e      	b.n	8002d48 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	613b      	str	r3, [r7, #16]
        break;
 8002cd2:	e03c      	b.n	8002d4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	613b      	str	r3, [r7, #16]
        break;
 8002cdc:	e037      	b.n	8002d4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3310      	adds	r3, #16
 8002ce4:	613b      	str	r3, [r7, #16]
        break;
 8002ce6:	e032      	b.n	8002d4e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a3d      	ldr	r2, [pc, #244]	; (8002de4 <HAL_DAC_Start_DMA+0x18c>)
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <HAL_DAC_Start_DMA+0x190>)
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a3b      	ldr	r2, [pc, #236]	; (8002dec <HAL_DAC_Start_DMA+0x194>)
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d013      	beq.n	8002d3e <HAL_DAC_Start_DMA+0xe6>
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d817      	bhi.n	8002d4c <HAL_DAC_Start_DMA+0xf4>
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_DAC_Start_DMA+0xd2>
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d005      	beq.n	8002d34 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d28:	e010      	b.n	8002d4c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3314      	adds	r3, #20
 8002d30:	613b      	str	r3, [r7, #16]
        break;
 8002d32:	e00c      	b.n	8002d4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3318      	adds	r3, #24
 8002d3a:	613b      	str	r3, [r7, #16]
        break;
 8002d3c:	e007      	b.n	8002d4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	331c      	adds	r3, #28
 8002d44:	613b      	str	r3, [r7, #16]
        break;
 8002d46:	e002      	b.n	8002d4e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002d4c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6898      	ldr	r0, [r3, #8]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	f000 fb35 	bl	80033dc <HAL_DMA_Start_IT>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]
 8002d76:	e010      	b.n	8002d9a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68d8      	ldr	r0, [r3, #12]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	f000 fb23 	bl	80033dc <HAL_DMA_Start_IT>
 8002d96:	4603      	mov	r3, r0
 8002d98:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6819      	ldr	r1, [r3, #0]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2201      	movs	r2, #1
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e005      	b.n	8002dcc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08003143 	.word	0x08003143
 8002ddc:	08003165 	.word	0x08003165
 8002de0:	08003181 	.word	0x08003181
 8002de4:	080031ff 	.word	0x080031ff
 8002de8:	08003221 	.word	0x08003221
 8002dec:	0800323d 	.word	0x0800323d

08002df0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e06:	d120      	bne.n	8002e4a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d118      	bne.n	8002e4a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e42:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f84b 	bl	8002ee0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e58:	d120      	bne.n	8002e9c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e68:	d118      	bne.n	8002e9c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f043 0202 	orr.w	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002e94:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9a7 	bl	80031ea <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	795b      	ldrb	r3, [r3, #5]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_DAC_ConfigChannel+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e114      	b.n	800313a <HAL_DAC_ConfigChannel+0x246>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	f040 8081 	bne.w	8003028 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f26:	f7ff fd33 	bl	8002990 <HAL_GetTick>
 8002f2a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d140      	bne.n	8002fb4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f32:	e018      	b.n	8002f66 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f34:	f7ff fd2c 	bl	8002990 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d911      	bls.n	8002f66 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f043 0208 	orr.w	r2, r3, #8
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e0e9      	b.n	800313a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1df      	bne.n	8002f34 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7ff fd17 	bl	80029a8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	6992      	ldr	r2, [r2, #24]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
 8002f84:	e023      	b.n	8002fce <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f86:	f7ff fd03 	bl	8002990 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d90f      	bls.n	8002fb4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da0a      	bge.n	8002fb4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f043 0208 	orr.w	r2, r3, #8
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2203      	movs	r2, #3
 8002fae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0c2      	b.n	800313a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	dbe3      	blt.n	8002f86 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7ff fcf2 	bl	80029a8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	6992      	ldr	r2, [r2, #24]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	ea02 0103 	and.w	r1, r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	21ff      	movs	r1, #255	; 0xff
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	ea02 0103 	and.w	r1, r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d11d      	bne.n	800306c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2207      	movs	r2, #7
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	431a      	orrs	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43da      	mvns	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	400a      	ands	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	22c0      	movs	r2, #192	; 0xc0
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	400a      	ands	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff fea7 	bl	8002ea4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	711a      	strb	r2, [r3, #4]
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff fea0 	bl	8002eb8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f043 0204 	orr.w	r2, r3, #4
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff fe96 	bl	8002ecc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	711a      	strb	r2, [r3, #4]
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff ffce 	bl	80031ae <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	711a      	strb	r2, [r3, #4]
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff ffc7 	bl	80031c2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ffbd 	bl	80031d6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	711a      	strb	r2, [r3, #4]
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e098      	b.n	80033b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4b4d      	ldr	r3, [pc, #308]	; (80033bc <HAL_DMA_Init+0x150>)
 8003286:	429a      	cmp	r2, r3
 8003288:	d80f      	bhi.n	80032aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_DMA_Init+0x154>)
 8003292:	4413      	add	r3, r2
 8003294:	4a4b      	ldr	r2, [pc, #300]	; (80033c4 <HAL_DMA_Init+0x158>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	009a      	lsls	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a48      	ldr	r2, [pc, #288]	; (80033c8 <HAL_DMA_Init+0x15c>)
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
 80032a8:	e00e      	b.n	80032c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_DMA_Init+0x160>)
 80032b2:	4413      	add	r3, r2
 80032b4:	4a43      	ldr	r2, [pc, #268]	; (80033c4 <HAL_DMA_Init+0x158>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	009a      	lsls	r2, r3, #2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a42      	ldr	r2, [pc, #264]	; (80033d0 <HAL_DMA_Init+0x164>)
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003322:	d039      	beq.n	8003398 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <HAL_DMA_Init+0x15c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11a      	bne.n	8003364 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_DMA_Init+0x168>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f003 031c 	and.w	r3, r3, #28
 800333a:	210f      	movs	r1, #15
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	4924      	ldr	r1, [pc, #144]	; (80033d4 <HAL_DMA_Init+0x168>)
 8003344:	4013      	ands	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_DMA_Init+0x168>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f003 031c 	and.w	r3, r3, #28
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	491d      	ldr	r1, [pc, #116]	; (80033d4 <HAL_DMA_Init+0x168>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	e019      	b.n	8003398 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <HAL_DMA_Init+0x16c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f003 031c 	and.w	r3, r3, #28
 8003370:	210f      	movs	r1, #15
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	4917      	ldr	r1, [pc, #92]	; (80033d8 <HAL_DMA_Init+0x16c>)
 800337a:	4013      	ands	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800337e:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_DMA_Init+0x16c>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f003 031c 	and.w	r3, r3, #28
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	4911      	ldr	r1, [pc, #68]	; (80033d8 <HAL_DMA_Init+0x16c>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40020407 	.word	0x40020407
 80033c0:	bffdfff8 	.word	0xbffdfff8
 80033c4:	cccccccd 	.word	0xcccccccd
 80033c8:	40020000 	.word	0x40020000
 80033cc:	bffdfbf8 	.word	0xbffdfbf8
 80033d0:	40020400 	.word	0x40020400
 80033d4:	400200a8 	.word	0x400200a8
 80033d8:	400204a8 	.word	0x400204a8

080033dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_DMA_Start_IT+0x20>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e04b      	b.n	8003494 <HAL_DMA_Start_IT+0xb8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d13a      	bne.n	8003486 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f95f 	bl	80036f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 020e 	orr.w	r2, r2, #14
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e00f      	b.n	8003474 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 020a 	orr.w	r2, r2, #10
 8003472:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e005      	b.n	8003492 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800348e:	2302      	movs	r3, #2
 8003490:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d008      	beq.n	80034c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2204      	movs	r2, #4
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e022      	b.n	800350c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 020e 	bic.w	r2, r2, #14
 80034d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f003 021c 	and.w	r2, r3, #28
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f202 	lsl.w	r2, r1, r2
 80034f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d005      	beq.n	800353c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2204      	movs	r2, #4
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	e029      	b.n	8003590 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 020e 	bic.w	r2, r2, #14
 800354a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f003 021c 	and.w	r2, r3, #28
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
    }
  }
  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f003 031c 	and.w	r3, r3, #28
 80035ba:	2204      	movs	r2, #4
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d026      	beq.n	8003614 <HAL_DMA_IRQHandler+0x7a>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d021      	beq.n	8003614 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0204 	bic.w	r2, r2, #4
 80035ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f003 021c 	and.w	r2, r3, #28
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2104      	movs	r1, #4
 80035fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003600:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	2b00      	cmp	r3, #0
 8003608:	d071      	beq.n	80036ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003612:	e06c      	b.n	80036ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f003 031c 	and.w	r3, r3, #28
 800361c:	2202      	movs	r2, #2
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02e      	beq.n	8003686 <HAL_DMA_IRQHandler+0xec>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d029      	beq.n	8003686 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 020a 	bic.w	r2, r2, #10
 800364e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f003 021c 	and.w	r2, r3, #28
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2102      	movs	r1, #2
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d038      	beq.n	80036ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003684:	e033      	b.n	80036ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f003 031c 	and.w	r3, r3, #28
 800368e:	2208      	movs	r2, #8
 8003690:	409a      	lsls	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02a      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x156>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d025      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 020e 	bic.w	r2, r2, #14
 80036b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	f003 021c 	and.w	r2, r3, #28
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036ee:	bf00      	nop
 80036f0:	bf00      	nop
}
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f003 021c 	and.w	r2, r3, #28
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b10      	cmp	r3, #16
 8003728:	d108      	bne.n	800373c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800373a:	e007      	b.n	800374c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003766:	e17f      	b.n	8003a68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2101      	movs	r1, #1
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	4013      	ands	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8171 	beq.w	8003a62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d005      	beq.n	8003798 <HAL_GPIO_Init+0x40>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d130      	bne.n	80037fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ce:	2201      	movs	r2, #1
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	f003 0201 	and.w	r2, r3, #1
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b03      	cmp	r3, #3
 8003804:	d118      	bne.n	8003838 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800380c:	2201      	movs	r2, #1
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f003 0201 	and.w	r2, r3, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b03      	cmp	r3, #3
 8003842:	d017      	beq.n	8003874 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d123      	bne.n	80038c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	220f      	movs	r2, #15
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	6939      	ldr	r1, [r7, #16]
 80038c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0203 	and.w	r2, r3, #3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80ac 	beq.w	8003a62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <HAL_GPIO_Init+0x330>)
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	4a5e      	ldr	r2, [pc, #376]	; (8003a88 <HAL_GPIO_Init+0x330>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6613      	str	r3, [r2, #96]	; 0x60
 8003916:	4b5c      	ldr	r3, [pc, #368]	; (8003a88 <HAL_GPIO_Init+0x330>)
 8003918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003922:	4a5a      	ldr	r2, [pc, #360]	; (8003a8c <HAL_GPIO_Init+0x334>)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800394c:	d025      	beq.n	800399a <HAL_GPIO_Init+0x242>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4f      	ldr	r2, [pc, #316]	; (8003a90 <HAL_GPIO_Init+0x338>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01f      	beq.n	8003996 <HAL_GPIO_Init+0x23e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4e      	ldr	r2, [pc, #312]	; (8003a94 <HAL_GPIO_Init+0x33c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d019      	beq.n	8003992 <HAL_GPIO_Init+0x23a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4d      	ldr	r2, [pc, #308]	; (8003a98 <HAL_GPIO_Init+0x340>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_GPIO_Init+0x236>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4c      	ldr	r2, [pc, #304]	; (8003a9c <HAL_GPIO_Init+0x344>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00d      	beq.n	800398a <HAL_GPIO_Init+0x232>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4b      	ldr	r2, [pc, #300]	; (8003aa0 <HAL_GPIO_Init+0x348>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_Init+0x22e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4a      	ldr	r2, [pc, #296]	; (8003aa4 <HAL_GPIO_Init+0x34c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_GPIO_Init+0x22a>
 800397e:	2306      	movs	r3, #6
 8003980:	e00c      	b.n	800399c <HAL_GPIO_Init+0x244>
 8003982:	2307      	movs	r3, #7
 8003984:	e00a      	b.n	800399c <HAL_GPIO_Init+0x244>
 8003986:	2305      	movs	r3, #5
 8003988:	e008      	b.n	800399c <HAL_GPIO_Init+0x244>
 800398a:	2304      	movs	r3, #4
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x244>
 800398e:	2303      	movs	r3, #3
 8003990:	e004      	b.n	800399c <HAL_GPIO_Init+0x244>
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_GPIO_Init+0x244>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_GPIO_Init+0x244>
 800399a:	2300      	movs	r3, #0
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	f002 0203 	and.w	r2, r2, #3
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	4093      	lsls	r3, r2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039ac:	4937      	ldr	r1, [pc, #220]	; (8003a8c <HAL_GPIO_Init+0x334>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039de:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039e4:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a08:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a32:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a38:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a5c:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_GPIO_Init+0x350>)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	3301      	adds	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f47f ae78 	bne.w	8003768 <HAL_GPIO_Init+0x10>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	48000400 	.word	0x48000400
 8003a94:	48000800 	.word	0x48000800
 8003a98:	48000c00 	.word	0x48000c00
 8003a9c:	48001000 	.word	0x48001000
 8003aa0:	48001400 	.word	0x48001400
 8003aa4:	48001800 	.word	0x48001800
 8003aa8:	40010400 	.word	0x40010400

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ac8:	e002      	b.n	8003ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4013      	ands	r3, r2
 8003af4:	041a      	lsls	r2, r3, #16
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	43d9      	mvns	r1, r3
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	400b      	ands	r3, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e08d      	b.n	8003c3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe f97a 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e006      	b.n	8003b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d108      	bne.n	8003bb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	e007      	b.n	8003bc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69d9      	ldr	r1, [r3, #28]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	461a      	mov	r2, r3
 8003c54:	460b      	mov	r3, r1
 8003c56:	817b      	strh	r3, [r7, #10]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	f040 80fd 	bne.w	8003e64 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_I2C_Master_Transmit+0x30>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0f6      	b.n	8003e66 <HAL_I2C_Master_Transmit+0x21e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c80:	f7fe fe86 	bl	8002990 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2319      	movs	r3, #25
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f914 	bl	8003ec0 <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0e1      	b.n	8003e66 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2221      	movs	r2, #33	; 0x21
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2210      	movs	r2, #16
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2bff      	cmp	r3, #255	; 0xff
 8003cd2:	d906      	bls.n	8003ce2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003cda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e007      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d024      	beq.n	8003d44 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	8979      	ldrh	r1, [r7, #10]
 8003d36:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <HAL_I2C_Master_Transmit+0x228>)
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fa79 	bl	8004234 <I2C_TransferConfig>
 8003d42:	e066      	b.n	8003e12 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	8979      	ldrh	r1, [r7, #10]
 8003d4c:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <HAL_I2C_Master_Transmit+0x228>)
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fa6e 	bl	8004234 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d58:	e05b      	b.n	8003e12 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	6a39      	ldr	r1, [r7, #32]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f8fd 	bl	8003f5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e07b      	b.n	8003e66 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	781a      	ldrb	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d034      	beq.n	8003e12 <HAL_I2C_Master_Transmit+0x1ca>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d130      	bne.n	8003e12 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f880 	bl	8003ec0 <I2C_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e04d      	b.n	8003e66 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2bff      	cmp	r3, #255	; 0xff
 8003dd2:	d90e      	bls.n	8003df2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	22ff      	movs	r2, #255	; 0xff
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	8979      	ldrh	r1, [r7, #10]
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa22 	bl	8004234 <I2C_TransferConfig>
 8003df0:	e00f      	b.n	8003e12 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fa11 	bl	8004234 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d19e      	bne.n	8003d5a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	6a39      	ldr	r1, [r7, #32]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f8e3 	bl	8003fec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01a      	b.n	8003e66 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2220      	movs	r2, #32
 8003e36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_I2C_Master_Transmit+0x22c>)
 8003e44:	400b      	ands	r3, r1
 8003e46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	80002000 	.word	0x80002000
 8003e74:	fe00e800 	.word	0xfe00e800

08003e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d103      	bne.n	8003e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2200      	movs	r2, #0
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d007      	beq.n	8003eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	619a      	str	r2, [r3, #24]
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed0:	e031      	b.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d02d      	beq.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fe fd59 	bl	8002990 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d122      	bne.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d113      	bne.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e00f      	b.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d0be      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f6a:	e033      	b.n	8003fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f87f 	bl	8004074 <I2C_IsErrorOccurred>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e031      	b.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d025      	beq.n	8003fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f88:	f7fe fd02 	bl	8002990 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11a      	bne.n	8003fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d013      	beq.n	8003fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e007      	b.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d1c4      	bne.n	8003f6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff8:	e02f      	b.n	800405a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f838 	bl	8004074 <I2C_IsErrorOccurred>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e02d      	b.n	800406a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fe fcbf 	bl	8002990 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11a      	bne.n	800405a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b20      	cmp	r3, #32
 8004030:	d013      	beq.n	800405a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e007      	b.n	800406a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b20      	cmp	r3, #32
 8004066:	d1c8      	bne.n	8003ffa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d068      	beq.n	8004172 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2210      	movs	r2, #16
 80040a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040a8:	e049      	b.n	800413e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d045      	beq.n	800413e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fe fc6d 	bl	8002990 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <I2C_IsErrorOccurred+0x54>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d13a      	bne.n	800413e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d121      	bne.n	8004130 <I2C_IsErrorOccurred+0xbc>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f2:	d01d      	beq.n	8004130 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d01a      	beq.n	8004130 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004108:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800410a:	f7fe fc41 	bl	8002990 <HAL_GetTick>
 800410e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004110:	e00e      	b.n	8004130 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004112:	f7fe fc3d 	bl	8002990 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b19      	cmp	r3, #25
 800411e:	d907      	bls.n	8004130 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f043 0320 	orr.w	r3, r3, #32
 8004126:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800412e:	e006      	b.n	800413e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b20      	cmp	r3, #32
 800413c:	d1e9      	bne.n	8004112 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b20      	cmp	r3, #32
 800414a:	d003      	beq.n	8004154 <I2C_IsErrorOccurred+0xe0>
 800414c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0aa      	beq.n	80040aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004158:	2b00      	cmp	r3, #0
 800415a:	d103      	bne.n	8004164 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2220      	movs	r2, #32
 8004162:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004194:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f043 0308 	orr.w	r3, r3, #8
 80041ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80041e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01c      	beq.n	8004222 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fe45 	bl	8003e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <I2C_IsErrorOccurred+0x1bc>)
 80041fa:	400b      	ands	r3, r1
 80041fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004226:	4618      	mov	r0, r3
 8004228:	3728      	adds	r7, #40	; 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	fe00e800 	.word	0xfe00e800

08004234 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	817b      	strh	r3, [r7, #10]
 8004242:	4613      	mov	r3, r2
 8004244:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004246:	897b      	ldrh	r3, [r7, #10]
 8004248:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800424c:	7a7b      	ldrb	r3, [r7, #9]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004254:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	4313      	orrs	r3, r2
 800425e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004262:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	0d5b      	lsrs	r3, r3, #21
 800426e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <I2C_TransferConfig+0x60>)
 8004274:	430b      	orrs	r3, r1
 8004276:	43db      	mvns	r3, r3
 8004278:	ea02 0103 	and.w	r1, r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	03ff63ff 	.word	0x03ff63ff

08004298 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d138      	bne.n	8004320 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e032      	b.n	8004322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	; 0x24
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	d139      	bne.n	80043b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800434e:	2302      	movs	r3, #2
 8004350:	e033      	b.n	80043ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2224      	movs	r2, #36	; 0x24
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004380:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e000      	b.n	80043ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40007000 	.word	0x40007000

080043e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d130      	bne.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f4:	4b23      	ldr	r3, [pc, #140]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004400:	d038      	beq.n	8004474 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800440a:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800440c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004410:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2232      	movs	r2, #50	; 0x32
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	4a1b      	ldr	r2, [pc, #108]	; (800448c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0c9b      	lsrs	r3, r3, #18
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004428:	e002      	b.n	8004430 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3b01      	subs	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d102      	bne.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x60>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f2      	bne.n	800442a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d110      	bne.n	8004474 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800445e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004462:	d007      	beq.n	8004474 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800446c:	4a05      	ldr	r2, [pc, #20]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004472:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40007000 	.word	0x40007000
 8004488:	20000154 	.word	0x20000154
 800448c:	431bde83 	.word	0x431bde83

08004490 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e3ca      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	4b97      	ldr	r3, [pc, #604]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ac:	4b94      	ldr	r3, [pc, #592]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80e4 	beq.w	800468c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_RCC_OscConfig+0x4a>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	f040 808b 	bne.w	80045e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f040 8087 	bne.w	80045e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044da:	4b89      	ldr	r3, [pc, #548]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e3a2      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	4b82      	ldr	r3, [pc, #520]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_RCC_OscConfig+0x7c>
 8004502:	4b7f      	ldr	r3, [pc, #508]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450a:	e005      	b.n	8004518 <HAL_RCC_OscConfig+0x88>
 800450c:	4b7c      	ldr	r3, [pc, #496]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004518:	4293      	cmp	r3, r2
 800451a:	d223      	bcs.n	8004564 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fd55 	bl	8004fd0 <RCC_SetFlashLatencyFromMSIRange>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e383      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004530:	4b73      	ldr	r3, [pc, #460]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a72      	ldr	r2, [pc, #456]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004536:	f043 0308 	orr.w	r3, r3, #8
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b70      	ldr	r3, [pc, #448]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	496d      	ldr	r1, [pc, #436]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800454e:	4b6c      	ldr	r3, [pc, #432]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	4968      	ldr	r1, [pc, #416]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
 8004562:	e025      	b.n	80045b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a65      	ldr	r2, [pc, #404]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800456a:	f043 0308 	orr.w	r3, r3, #8
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4960      	ldr	r1, [pc, #384]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004582:	4b5f      	ldr	r3, [pc, #380]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	495b      	ldr	r1, [pc, #364]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d109      	bne.n	80045b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fd15 	bl	8004fd0 <RCC_SetFlashLatencyFromMSIRange>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e343      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b0:	f000 fc4a 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b52      	ldr	r3, [pc, #328]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	4950      	ldr	r1, [pc, #320]	; (8004704 <HAL_RCC_OscConfig+0x274>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	4a4e      	ldr	r2, [pc, #312]	; (8004708 <HAL_RCC_OscConfig+0x278>)
 80045ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045d0:	4b4e      	ldr	r3, [pc, #312]	; (800470c <HAL_RCC_OscConfig+0x27c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe f98b 	bl	80028f0 <HAL_InitTick>
 80045da:	4603      	mov	r3, r0
 80045dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d052      	beq.n	800468a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	e327      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d032      	beq.n	8004656 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045f0:	4b43      	ldr	r3, [pc, #268]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a42      	ldr	r2, [pc, #264]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045fc:	f7fe f9c8 	bl	8002990 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004604:	f7fe f9c4 	bl	8002990 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e310      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004616:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004622:	4b37      	ldr	r3, [pc, #220]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a36      	ldr	r2, [pc, #216]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004628:	f043 0308 	orr.w	r3, r3, #8
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b34      	ldr	r3, [pc, #208]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	4931      	ldr	r1, [pc, #196]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004640:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	492c      	ldr	r1, [pc, #176]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004650:	4313      	orrs	r3, r2
 8004652:	604b      	str	r3, [r1, #4]
 8004654:	e01a      	b.n	800468c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004662:	f7fe f995 	bl	8002990 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800466a:	f7fe f991 	bl	8002990 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e2dd      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f0      	bne.n	800466a <HAL_RCC_OscConfig+0x1da>
 8004688:	e000      	b.n	800468c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800468a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d074      	beq.n	8004782 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b08      	cmp	r3, #8
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x21a>
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d10e      	bne.n	80046c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d10b      	bne.n	80046c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d064      	beq.n	8004780 <HAL_RCC_OscConfig+0x2f0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d160      	bne.n	8004780 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e2ba      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x24a>
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80046d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	e026      	b.n	8004728 <HAL_RCC_OscConfig+0x298>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e2:	d115      	bne.n	8004710 <HAL_RCC_OscConfig+0x280>
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a05      	ldr	r2, [pc, #20]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80046ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a02      	ldr	r2, [pc, #8]	; (8004700 <HAL_RCC_OscConfig+0x270>)
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e014      	b.n	8004728 <HAL_RCC_OscConfig+0x298>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	08009a40 	.word	0x08009a40
 8004708:	20000154 	.word	0x20000154
 800470c:	20000158 	.word	0x20000158
 8004710:	4ba0      	ldr	r3, [pc, #640]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a9f      	ldr	r2, [pc, #636]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b9d      	ldr	r3, [pc, #628]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a9c      	ldr	r2, [pc, #624]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fe f92e 	bl	8002990 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fe f92a 	bl	8002990 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e276      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800474a:	4b92      	ldr	r3, [pc, #584]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x2a8>
 8004756:	e014      	b.n	8004782 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fe f91a 	bl	8002990 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7fe f916 	bl	8002990 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e262      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004772:	4b88      	ldr	r3, [pc, #544]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x2d0>
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d060      	beq.n	8004850 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_OscConfig+0x310>
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d119      	bne.n	80047ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d116      	bne.n	80047ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a0:	4b7c      	ldr	r3, [pc, #496]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_OscConfig+0x328>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e23f      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b76      	ldr	r3, [pc, #472]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4973      	ldr	r1, [pc, #460]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047cc:	e040      	b.n	8004850 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d023      	beq.n	800481e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d6:	4b6f      	ldr	r3, [pc, #444]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6e      	ldr	r2, [pc, #440]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fe f8d5 	bl	8002990 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fe f8d1 	bl	8002990 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e21d      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047fc:	4b65      	ldr	r3, [pc, #404]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b62      	ldr	r3, [pc, #392]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	495f      	ldr	r1, [pc, #380]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
 800481c:	e018      	b.n	8004850 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b5d      	ldr	r3, [pc, #372]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a5c      	ldr	r2, [pc, #368]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fe f8b1 	bl	8002990 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004832:	f7fe f8ad 	bl	8002990 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e1f9      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004844:	4b53      	ldr	r3, [pc, #332]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d03c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01c      	beq.n	800489e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004864:	4b4b      	ldr	r3, [pc, #300]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800486a:	4a4a      	ldr	r2, [pc, #296]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fe f88c 	bl	8002990 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487c:	f7fe f888 	bl	8002990 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1d4      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800488e:	4b41      	ldr	r3, [pc, #260]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ef      	beq.n	800487c <HAL_RCC_OscConfig+0x3ec>
 800489c:	e01b      	b.n	80048d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80048a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a4:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fe f86f 	bl	8002990 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b6:	f7fe f86b 	bl	8002990 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e1b7      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048c8:	4b32      	ldr	r3, [pc, #200]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80048ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ef      	bne.n	80048b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80a6 	beq.w	8004a30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e4:	2300      	movs	r3, #0
 80048e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10d      	bne.n	8004910 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f4:	4b27      	ldr	r3, [pc, #156]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	4a26      	ldr	r2, [pc, #152]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 80048fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004900:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490c:	2301      	movs	r3, #1
 800490e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d118      	bne.n	800494e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800491c:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004926:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004928:	f7fe f832 	bl	8002990 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004930:	f7fe f82e 	bl	8002990 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e17a      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d108      	bne.n	8004968 <HAL_RCC_OscConfig+0x4d8>
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495c:	4a0d      	ldr	r2, [pc, #52]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004966:	e029      	b.n	80049bc <HAL_RCC_OscConfig+0x52c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b05      	cmp	r3, #5
 800496e:	d115      	bne.n	800499c <HAL_RCC_OscConfig+0x50c>
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	4a03      	ldr	r2, [pc, #12]	; (8004994 <HAL_RCC_OscConfig+0x504>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004990:	e014      	b.n	80049bc <HAL_RCC_OscConfig+0x52c>
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
 800499c:	4b9c      	ldr	r3, [pc, #624]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	4a9b      	ldr	r2, [pc, #620]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ac:	4b98      	ldr	r3, [pc, #608]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a97      	ldr	r2, [pc, #604]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d016      	beq.n	80049f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fd ffe4 	bl	8002990 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fd ffe0 	bl	8002990 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e12a      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e2:	4b8b      	ldr	r3, [pc, #556]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0ed      	beq.n	80049cc <HAL_RCC_OscConfig+0x53c>
 80049f0:	e015      	b.n	8004a1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f2:	f7fd ffcd 	bl	8002990 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fd ffc9 	bl	8002990 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e113      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a10:	4b7f      	ldr	r3, [pc, #508]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ed      	bne.n	80049fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1e:	7ffb      	ldrb	r3, [r7, #31]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a24:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	4a79      	ldr	r2, [pc, #484]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80fe 	beq.w	8004c36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	f040 80d0 	bne.w	8004be4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a44:	4b72      	ldr	r3, [pc, #456]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0203 	and.w	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d130      	bne.n	8004aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	3b01      	subs	r3, #1
 8004a64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d127      	bne.n	8004aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d11f      	bne.n	8004aba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a84:	2a07      	cmp	r2, #7
 8004a86:	bf14      	ite	ne
 8004a88:	2201      	movne	r2, #1
 8004a8a:	2200      	moveq	r2, #0
 8004a8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d113      	bne.n	8004aba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d109      	bne.n	8004aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d06e      	beq.n	8004b98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d069      	beq.n	8004b94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ac0:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004acc:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0ad      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004adc:	4b4c      	ldr	r3, [pc, #304]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a4b      	ldr	r2, [pc, #300]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ae8:	f7fd ff52 	bl	8002990 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd ff4e 	bl	8002990 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e09a      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b02:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b0e:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	4b40      	ldr	r3, [pc, #256]	; (8004c14 <HAL_RCC_OscConfig+0x784>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b28:	0212      	lsls	r2, r2, #8
 8004b2a:	4311      	orrs	r1, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b30:	0852      	lsrs	r2, r2, #1
 8004b32:	3a01      	subs	r2, #1
 8004b34:	0552      	lsls	r2, r2, #21
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b3c:	0852      	lsrs	r2, r2, #1
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	0652      	lsls	r2, r2, #25
 8004b42:	4311      	orrs	r1, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b48:	0912      	lsrs	r2, r2, #4
 8004b4a:	0452      	lsls	r2, r2, #17
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	4930      	ldr	r1, [pc, #192]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b54:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b60:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a2a      	ldr	r2, [pc, #168]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b6c:	f7fd ff10 	bl	8002990 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd ff0c 	bl	8002990 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e058      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b86:	4b22      	ldr	r3, [pc, #136]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b92:	e050      	b.n	8004c36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e04f      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b98:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d148      	bne.n	8004c36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb0:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bbc:	f7fd fee8 	bl	8002990 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fd fee4 	bl	8002990 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e030      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x734>
 8004be2:	e028      	b.n	8004c36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d023      	beq.n	8004c32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <HAL_RCC_OscConfig+0x780>)
 8004bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fd fecb 	bl	8002990 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfc:	e00c      	b.n	8004c18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfe:	f7fd fec7 	bl	8002990 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d905      	bls.n	8004c18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e013      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
 8004c10:	40021000 	.word	0x40021000
 8004c14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_OscConfig+0x7b0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1ec      	bne.n	8004bfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_OscConfig+0x7b0>)
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	4905      	ldr	r1, [pc, #20]	; (8004c40 <HAL_RCC_OscConfig+0x7b0>)
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCC_OscConfig+0x7b4>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60cb      	str	r3, [r1, #12]
 8004c30:	e001      	b.n	8004c36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	feeefffc 	.word	0xfeeefffc

08004c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0e7      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b75      	ldr	r3, [pc, #468]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d910      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b72      	ldr	r3, [pc, #456]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 0207 	bic.w	r2, r3, #7
 8004c72:	4970      	ldr	r1, [pc, #448]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b6e      	ldr	r3, [pc, #440]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0cf      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	4b66      	ldr	r3, [pc, #408]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d908      	bls.n	8004cba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4960      	ldr	r1, [pc, #384]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d04c      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cce:	4b5a      	ldr	r3, [pc, #360]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d121      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0a6      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce6:	4b54      	ldr	r3, [pc, #336]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d115      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e09a      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cfe:	4b4e      	ldr	r3, [pc, #312]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e08e      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0e:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e086      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d1e:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4943      	ldr	r1, [pc, #268]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fd fe2e 	bl	8002990 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d38:	f7fd fe2a 	bl	8002990 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e06e      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	4b3a      	ldr	r3, [pc, #232]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 020c 	and.w	r2, r3, #12
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d1eb      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d208      	bcs.n	8004d8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d7c:	4b2e      	ldr	r3, [pc, #184]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	492b      	ldr	r1, [pc, #172]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8e:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d210      	bcs.n	8004dbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 0207 	bic.w	r2, r3, #7
 8004da4:	4923      	ldr	r1, [pc, #140]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <HAL_RCC_ClockConfig+0x1ec>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e036      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4918      	ldr	r1, [pc, #96]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4910      	ldr	r1, [pc, #64]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dfc:	f000 f824 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <HAL_RCC_ClockConfig+0x1f0>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	490b      	ldr	r1, [pc, #44]	; (8004e3c <HAL_RCC_ClockConfig+0x1f4>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <HAL_RCC_ClockConfig+0x1f8>)
 8004e1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x1fc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd fd65 	bl	80028f0 <HAL_InitTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40022000 	.word	0x40022000
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	08009a40 	.word	0x08009a40
 8004e40:	20000154 	.word	0x20000154
 8004e44:	20000158 	.word	0x20000158

08004e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b089      	sub	sp, #36	; 0x24
 8004e4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e56:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e60:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_GetSysClockFreq+0x34>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b0c      	cmp	r3, #12
 8004e74:	d121      	bne.n	8004eba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d11e      	bne.n	8004eba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e7c:	4b34      	ldr	r3, [pc, #208]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d107      	bne.n	8004e98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e88:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e005      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e98:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ea4:	4a2b      	ldr	r2, [pc, #172]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d102      	bne.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	e004      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ecc:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ece:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d134      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_GetSysClockFreq+0xa6>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0xac>
 8004eec:	e005      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004eee:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ef0:	617b      	str	r3, [r7, #20]
      break;
 8004ef2:	e005      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ef6:	617b      	str	r3, [r7, #20]
      break;
 8004ef8:	e002      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	617b      	str	r3, [r7, #20]
      break;
 8004efe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f00:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	fb03 f202 	mul.w	r2, r3, r2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	0e5b      	lsrs	r3, r3, #25
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	3301      	adds	r3, #1
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f40:	69bb      	ldr	r3, [r7, #24]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3724      	adds	r7, #36	; 0x24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	08009a58 	.word	0x08009a58
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	007a1200 	.word	0x007a1200

08004f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f66:	681b      	ldr	r3, [r3, #0]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000154 	.word	0x20000154

08004f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f7c:	f7ff fff0 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4904      	ldr	r1, [pc, #16]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	08009a50 	.word	0x08009a50

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fa8:	f7ff ffda 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0adb      	lsrs	r3, r3, #11
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4904      	ldr	r1, [pc, #16]	; (8004fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	08009a50 	.word	0x08009a50

08004fd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fe8:	f7ff f9ee 	bl	80043c8 <HAL_PWREx_GetVoltageRange>
 8004fec:	6178      	str	r0, [r7, #20]
 8004fee:	e014      	b.n	800501a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	4b25      	ldr	r3, [pc, #148]	; (8005088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	4a24      	ldr	r2, [pc, #144]	; (8005088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffc:	4b22      	ldr	r3, [pc, #136]	; (8005088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005008:	f7ff f9de 	bl	80043c8 <HAL_PWREx_GetVoltageRange>
 800500c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800500e:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005018:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005020:	d10b      	bne.n	800503a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b80      	cmp	r3, #128	; 0x80
 8005026:	d919      	bls.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2ba0      	cmp	r3, #160	; 0xa0
 800502c:	d902      	bls.n	8005034 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800502e:	2302      	movs	r3, #2
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	e013      	b.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005034:	2301      	movs	r3, #1
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e010      	b.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b80      	cmp	r3, #128	; 0x80
 800503e:	d902      	bls.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005040:	2303      	movs	r3, #3
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	e00a      	b.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b80      	cmp	r3, #128	; 0x80
 800504a:	d102      	bne.n	8005052 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800504c:	2302      	movs	r3, #2
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	e004      	b.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b70      	cmp	r3, #112	; 0x70
 8005056:	d101      	bne.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005058:	2301      	movs	r3, #1
 800505a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 0207 	bic.w	r2, r3, #7
 8005064:	4909      	ldr	r1, [pc, #36]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	d001      	beq.n	800507e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	40022000 	.word	0x40022000

08005090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005098:	2300      	movs	r3, #0
 800509a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800509c:	2300      	movs	r3, #0
 800509e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d041      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b4:	d02a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050ba:	d824      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050c0:	d008      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050c6:	d81e      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d0:	d010      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050d2:	e018      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050d4:	4b86      	ldr	r3, [pc, #536]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a85      	ldr	r2, [pc, #532]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050e0:	e015      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3304      	adds	r3, #4
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fabb 	bl	8005664 <RCCEx_PLLSAI1_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050f2:	e00c      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3320      	adds	r3, #32
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fba6 	bl	800584c <RCCEx_PLLSAI2_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005104:	e003      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	74fb      	strb	r3, [r7, #19]
      break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800510c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005114:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005122:	4973      	ldr	r1, [pc, #460]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800512a:	e001      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d041      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005144:	d02a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800514a:	d824      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800514c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005150:	d008      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005156:	d81e      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800515c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005160:	d010      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005162:	e018      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005164:	4b62      	ldr	r3, [pc, #392]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a61      	ldr	r2, [pc, #388]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005170:	e015      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3304      	adds	r3, #4
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fa73 	bl	8005664 <RCCEx_PLLSAI1_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005182:	e00c      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3320      	adds	r3, #32
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fb5e 	bl	800584c <RCCEx_PLLSAI2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005194:	e003      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	74fb      	strb	r3, [r7, #19]
      break;
 800519a:	e000      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800519c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519e:	7cfb      	ldrb	r3, [r7, #19]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051a4:	4b52      	ldr	r3, [pc, #328]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b2:	494f      	ldr	r1, [pc, #316]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051ba:	e001      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a0 	beq.w	800530e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051d2:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00d      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e8:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	4a40      	ldr	r2, [pc, #256]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f2:	6593      	str	r3, [r2, #88]	; 0x58
 80051f4:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005200:	2301      	movs	r3, #1
 8005202:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005204:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a3a      	ldr	r2, [pc, #232]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800520a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005210:	f7fd fbbe 	bl	8002990 <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005216:	e009      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005218:	f7fd fbba 	bl	8002990 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d902      	bls.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	74fb      	strb	r3, [r7, #19]
        break;
 800522a:	e005      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800522c:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ef      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d15c      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800523e:	4b2c      	ldr	r3, [pc, #176]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005248:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01f      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	429a      	cmp	r2, r3
 800525a:	d019      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800525c:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005266:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005268:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	4a1c      	ldr	r2, [pc, #112]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529a:	f7fd fb79 	bl	8002990 <HAL_GetTick>
 800529e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a0:	e00b      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fd fb75 	bl	8002990 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d902      	bls.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	74fb      	strb	r3, [r7, #19]
            break;
 80052b8:	e006      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ec      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052de:	4904      	ldr	r1, [pc, #16]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052e6:	e009      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	74bb      	strb	r3, [r7, #18]
 80052ec:	e006      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052fc:	7c7b      	ldrb	r3, [r7, #17]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005302:	4b9e      	ldr	r3, [pc, #632]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	4a9d      	ldr	r2, [pc, #628]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800530c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800531a:	4b98      	ldr	r3, [pc, #608]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f023 0203 	bic.w	r2, r3, #3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	4994      	ldr	r1, [pc, #592]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800533c:	4b8f      	ldr	r3, [pc, #572]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f023 020c 	bic.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	498c      	ldr	r1, [pc, #560]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800535e:	4b87      	ldr	r3, [pc, #540]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	4983      	ldr	r1, [pc, #524]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005380:	4b7e      	ldr	r3, [pc, #504]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	497b      	ldr	r1, [pc, #492]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053a2:	4b76      	ldr	r3, [pc, #472]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	4972      	ldr	r1, [pc, #456]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c4:	4b6d      	ldr	r3, [pc, #436]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	496a      	ldr	r1, [pc, #424]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053e6:	4b65      	ldr	r3, [pc, #404]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	4961      	ldr	r1, [pc, #388]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005408:	4b5c      	ldr	r3, [pc, #368]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005416:	4959      	ldr	r1, [pc, #356]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800542a:	4b54      	ldr	r3, [pc, #336]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	4950      	ldr	r1, [pc, #320]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800544c:	4b4b      	ldr	r3, [pc, #300]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	4948      	ldr	r1, [pc, #288]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800546e:	4b43      	ldr	r3, [pc, #268]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	493f      	ldr	r1, [pc, #252]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d028      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005490:	4b3a      	ldr	r3, [pc, #232]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	4937      	ldr	r1, [pc, #220]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ae:	d106      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b0:	4b32      	ldr	r3, [pc, #200]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4a31      	ldr	r2, [pc, #196]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ba:	60d3      	str	r3, [r2, #12]
 80054bc:	e011      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054c6:	d10c      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2101      	movs	r1, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f8c8 	bl	8005664 <RCCEx_PLLSAI1_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d028      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054ee:	4b23      	ldr	r3, [pc, #140]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	491f      	ldr	r1, [pc, #124]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800550c:	d106      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800550e:	4b1b      	ldr	r3, [pc, #108]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	4a1a      	ldr	r2, [pc, #104]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005518:	60d3      	str	r3, [r2, #12]
 800551a:	e011      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005524:	d10c      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	2101      	movs	r1, #1
 800552c:	4618      	mov	r0, r3
 800552e:	f000 f899 	bl	8005664 <RCCEx_PLLSAI1_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005536:	7cfb      	ldrb	r3, [r7, #19]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800553c:	7cfb      	ldrb	r3, [r7, #19]
 800553e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d02b      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	4908      	ldr	r1, [pc, #32]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556a:	d109      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4a02      	ldr	r2, [pc, #8]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005576:	60d3      	str	r3, [r2, #12]
 8005578:	e014      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005588:	d10c      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	2101      	movs	r1, #1
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f867 	bl	8005664 <RCCEx_PLLSAI1_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800559a:	7cfb      	ldrb	r3, [r7, #19]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d02f      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b0:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055be:	4928      	ldr	r1, [pc, #160]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ce:	d10d      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	2102      	movs	r1, #2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f844 	bl	8005664 <RCCEx_PLLSAI1_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e0:	7cfb      	ldrb	r3, [r7, #19]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d014      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055e6:	7cfb      	ldrb	r3, [r7, #19]
 80055e8:	74bb      	strb	r3, [r7, #18]
 80055ea:	e011      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f4:	d10c      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3320      	adds	r3, #32
 80055fa:	2102      	movs	r1, #2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f925 	bl	800584c <RCCEx_PLLSAI2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800561c:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562a:	490d      	ldr	r1, [pc, #52]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564e:	4904      	ldr	r1, [pc, #16]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005656:	7cbb      	ldrb	r3, [r7, #18]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000

08005664 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005672:	4b75      	ldr	r3, [pc, #468]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d018      	beq.n	80056b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800567e:	4b72      	ldr	r3, [pc, #456]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0203 	and.w	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d10d      	bne.n	80056aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
       ||
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005696:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	091b      	lsrs	r3, r3, #4
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
       ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d047      	beq.n	800573a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
 80056ae:	e044      	b.n	800573a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d018      	beq.n	80056ea <RCCEx_PLLSAI1_Config+0x86>
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d825      	bhi.n	8005708 <RCCEx_PLLSAI1_Config+0xa4>
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d002      	beq.n	80056c6 <RCCEx_PLLSAI1_Config+0x62>
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d009      	beq.n	80056d8 <RCCEx_PLLSAI1_Config+0x74>
 80056c4:	e020      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056c6:	4b60      	ldr	r3, [pc, #384]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11d      	bne.n	800570e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d6:	e01a      	b.n	800570e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056d8:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d116      	bne.n	8005712 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e8:	e013      	b.n	8005712 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ea:	4b57      	ldr	r3, [pc, #348]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10f      	bne.n	8005716 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056f6:	4b54      	ldr	r3, [pc, #336]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005706:	e006      	b.n	8005716 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      break;
 800570c:	e004      	b.n	8005718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005716:	bf00      	nop
    }

    if(status == HAL_OK)
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10d      	bne.n	800573a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6819      	ldr	r1, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	3b01      	subs	r3, #1
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	430b      	orrs	r3, r1
 8005734:	4944      	ldr	r1, [pc, #272]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005736:	4313      	orrs	r3, r2
 8005738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d17d      	bne.n	800583c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005740:	4b41      	ldr	r3, [pc, #260]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a40      	ldr	r2, [pc, #256]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005746:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800574a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800574c:	f7fd f920 	bl	8002990 <HAL_GetTick>
 8005750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005752:	e009      	b.n	8005768 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005754:	f7fd f91c 	bl	8002990 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d902      	bls.n	8005768 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	73fb      	strb	r3, [r7, #15]
        break;
 8005766:	e005      	b.n	8005774 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005768:	4b37      	ldr	r3, [pc, #220]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1ef      	bne.n	8005754 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d160      	bne.n	800583c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d111      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005780:	4b31      	ldr	r3, [pc, #196]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6892      	ldr	r2, [r2, #8]
 8005790:	0211      	lsls	r1, r2, #8
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68d2      	ldr	r2, [r2, #12]
 8005796:	0912      	lsrs	r2, r2, #4
 8005798:	0452      	lsls	r2, r2, #17
 800579a:	430a      	orrs	r2, r1
 800579c:	492a      	ldr	r1, [pc, #168]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	610b      	str	r3, [r1, #16]
 80057a2:	e027      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d112      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057aa:	4b27      	ldr	r3, [pc, #156]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6892      	ldr	r2, [r2, #8]
 80057ba:	0211      	lsls	r1, r2, #8
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6912      	ldr	r2, [r2, #16]
 80057c0:	0852      	lsrs	r2, r2, #1
 80057c2:	3a01      	subs	r2, #1
 80057c4:	0552      	lsls	r2, r2, #21
 80057c6:	430a      	orrs	r2, r1
 80057c8:	491f      	ldr	r1, [pc, #124]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]
 80057ce:	e011      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057d0:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6892      	ldr	r2, [r2, #8]
 80057e0:	0211      	lsls	r1, r2, #8
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6952      	ldr	r2, [r2, #20]
 80057e6:	0852      	lsrs	r2, r2, #1
 80057e8:	3a01      	subs	r2, #1
 80057ea:	0652      	lsls	r2, r2, #25
 80057ec:	430a      	orrs	r2, r1
 80057ee:	4916      	ldr	r1, [pc, #88]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057f4:	4b14      	ldr	r3, [pc, #80]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a13      	ldr	r2, [pc, #76]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fd f8c6 	bl	8002990 <HAL_GetTick>
 8005804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005806:	e009      	b.n	800581c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005808:	f7fd f8c2 	bl	8002990 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d902      	bls.n	800581c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	73fb      	strb	r3, [r7, #15]
          break;
 800581a:	e005      	b.n	8005828 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0ef      	beq.n	8005808 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	4904      	ldr	r1, [pc, #16]	; (8005848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005838:	4313      	orrs	r3, r2
 800583a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000

0800584c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800585a:	4b6a      	ldr	r3, [pc, #424]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d018      	beq.n	8005898 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005866:	4b67      	ldr	r3, [pc, #412]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0203 	and.w	r2, r3, #3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d10d      	bne.n	8005892 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
       ||
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800587e:	4b61      	ldr	r3, [pc, #388]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
       ||
 800588e:	429a      	cmp	r2, r3
 8005890:	d047      	beq.n	8005922 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	73fb      	strb	r3, [r7, #15]
 8005896:	e044      	b.n	8005922 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d018      	beq.n	80058d2 <RCCEx_PLLSAI2_Config+0x86>
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d825      	bhi.n	80058f0 <RCCEx_PLLSAI2_Config+0xa4>
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d002      	beq.n	80058ae <RCCEx_PLLSAI2_Config+0x62>
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d009      	beq.n	80058c0 <RCCEx_PLLSAI2_Config+0x74>
 80058ac:	e020      	b.n	80058f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ae:	4b55      	ldr	r3, [pc, #340]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d11d      	bne.n	80058f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058be:	e01a      	b.n	80058f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058c0:	4b50      	ldr	r3, [pc, #320]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d116      	bne.n	80058fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d0:	e013      	b.n	80058fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058d2:	4b4c      	ldr	r3, [pc, #304]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10f      	bne.n	80058fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058de:	4b49      	ldr	r3, [pc, #292]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ee:	e006      	b.n	80058fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      break;
 80058f4:	e004      	b.n	8005900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058f6:	bf00      	nop
 80058f8:	e002      	b.n	8005900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10d      	bne.n	8005922 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005906:	4b3f      	ldr	r3, [pc, #252]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	3b01      	subs	r3, #1
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	430b      	orrs	r3, r1
 800591c:	4939      	ldr	r1, [pc, #228]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591e:	4313      	orrs	r3, r2
 8005920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d167      	bne.n	80059f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005928:	4b36      	ldr	r3, [pc, #216]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a35      	ldr	r2, [pc, #212]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800592e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005934:	f7fd f82c 	bl	8002990 <HAL_GetTick>
 8005938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800593a:	e009      	b.n	8005950 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800593c:	f7fd f828 	bl	8002990 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d902      	bls.n	8005950 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	73fb      	strb	r3, [r7, #15]
        break;
 800594e:	e005      	b.n	800595c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005950:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1ef      	bne.n	800593c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d14a      	bne.n	80059f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d111      	bne.n	800598c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005968:	4b26      	ldr	r3, [pc, #152]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6892      	ldr	r2, [r2, #8]
 8005978:	0211      	lsls	r1, r2, #8
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68d2      	ldr	r2, [r2, #12]
 800597e:	0912      	lsrs	r2, r2, #4
 8005980:	0452      	lsls	r2, r2, #17
 8005982:	430a      	orrs	r2, r1
 8005984:	491f      	ldr	r1, [pc, #124]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	4313      	orrs	r3, r2
 8005988:	614b      	str	r3, [r1, #20]
 800598a:	e011      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800598c:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005994:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6892      	ldr	r2, [r2, #8]
 800599c:	0211      	lsls	r1, r2, #8
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6912      	ldr	r2, [r2, #16]
 80059a2:	0852      	lsrs	r2, r2, #1
 80059a4:	3a01      	subs	r2, #1
 80059a6:	0652      	lsls	r2, r2, #25
 80059a8:	430a      	orrs	r2, r1
 80059aa:	4916      	ldr	r1, [pc, #88]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059b0:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059bc:	f7fc ffe8 	bl	8002990 <HAL_GetTick>
 80059c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059c2:	e009      	b.n	80059d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059c4:	f7fc ffe4 	bl	8002990 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d902      	bls.n	80059d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	73fb      	strb	r3, [r7, #15]
          break;
 80059d6:	e005      	b.n	80059e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0ef      	beq.n	80059c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4904      	ldr	r1, [pc, #16]	; (8005a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40021000 	.word	0x40021000

08005a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e095      	b.n	8005b46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d108      	bne.n	8005a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a2a:	d009      	beq.n	8005a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	61da      	str	r2, [r3, #28]
 8005a32:	e005      	b.n	8005a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fc fa8c 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a80:	d902      	bls.n	8005a88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	e002      	b.n	8005a8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a96:	d007      	beq.n	8005aa8 <HAL_SPI_Init+0xa0>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aa0:	d002      	beq.n	8005aa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	ea42 0103 	orr.w	r1, r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	0c1b      	lsrs	r3, r3, #16
 8005b04:	f003 0204 	and.w	r2, r3, #4
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b24:	ea42 0103 	orr.w	r1, r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b088      	sub	sp, #32
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_SPI_Transmit+0x22>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e15f      	b.n	8005e30 <HAL_SPI_Transmit+0x2e2>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b78:	f7fc ff0a 	bl	8002990 <HAL_GetTick>
 8005b7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d002      	beq.n	8005b94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b92:	e148      	b.n	8005e26 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Transmit+0x52>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ba4:	e13f      	b.n	8005e26 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf0:	d10f      	bne.n	8005c12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d007      	beq.n	8005c30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c38:	d94f      	bls.n	8005cda <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_SPI_Transmit+0xfa>
 8005c42:	8afb      	ldrh	r3, [r7, #22]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d142      	bne.n	8005cce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	881a      	ldrh	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c6c:	e02f      	b.n	8005cce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d112      	bne.n	8005ca2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	1c9a      	adds	r2, r3, #2
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca0:	e015      	b.n	8005cce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca2:	f7fc fe75 	bl	8002990 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d803      	bhi.n	8005cba <HAL_SPI_Transmit+0x16c>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d102      	bne.n	8005cc0 <HAL_SPI_Transmit+0x172>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005ccc:	e0ab      	b.n	8005e26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ca      	bne.n	8005c6e <HAL_SPI_Transmit+0x120>
 8005cd8:	e080      	b.n	8005ddc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Transmit+0x19a>
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d174      	bne.n	8005dd2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d912      	bls.n	8005d18 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	881a      	ldrh	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	1c9a      	adds	r2, r3, #2
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b02      	subs	r3, #2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d16:	e05c      	b.n	8005dd2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d3e:	e048      	b.n	8005dd2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d12b      	bne.n	8005da6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d912      	bls.n	8005d7e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	881a      	ldrh	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b02      	subs	r3, #2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d7c:	e029      	b.n	8005dd2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005da4:	e015      	b.n	8005dd2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da6:	f7fc fdf3 	bl	8002990 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d803      	bhi.n	8005dbe <HAL_SPI_Transmit+0x270>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbc:	d102      	bne.n	8005dc4 <HAL_SPI_Transmit+0x276>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005dd0:	e029      	b.n	8005e26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1b1      	bne.n	8005d40 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f947 	bl	8006074 <SPI_EndRxTxTransaction>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e003      	b.n	8005e26 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e48:	f7fc fda2 	bl	8002990 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e58:	f7fc fd9a 	bl	8002990 <HAL_GetTick>
 8005e5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e5e:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	015b      	lsls	r3, r3, #5
 8005e64:	0d1b      	lsrs	r3, r3, #20
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	fb02 f303 	mul.w	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e6e:	e054      	b.n	8005f1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d050      	beq.n	8005f1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e78:	f7fc fd8a 	bl	8002990 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d902      	bls.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d13d      	bne.n	8005f0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea6:	d111      	bne.n	8005ecc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb0:	d004      	beq.n	8005ebc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eba:	d107      	bne.n	8005ecc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed4:	d10f      	bne.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e017      	b.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d19b      	bne.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000154 	.word	0x20000154

08005f48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f5a:	f7fc fd19 	bl	8002990 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	4413      	add	r3, r2
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f6a:	f7fc fd11 	bl	8002990 <HAL_GetTick>
 8005f6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f78:	4b3d      	ldr	r3, [pc, #244]	; (8006070 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	00da      	lsls	r2, r3, #3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	0d1b      	lsrs	r3, r3, #20
 8005f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f90:	e060      	b.n	8006054 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f98:	d107      	bne.n	8005faa <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d050      	beq.n	8006054 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fb2:	f7fc fced 	bl	8002990 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d902      	bls.n	8005fc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d13d      	bne.n	8006044 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe0:	d111      	bne.n	8006006 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fea:	d004      	beq.n	8005ff6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d107      	bne.n	8006006 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600e:	d10f      	bne.n	8006030 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800602e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e010      	b.n	8006066 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	3b01      	subs	r3, #1
 8006052:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4013      	ands	r3, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d196      	bne.n	8005f92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000154 	.word	0x20000154

08006074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af02      	add	r7, sp, #8
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2200      	movs	r2, #0
 8006088:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff ff5b 	bl	8005f48 <SPI_WaitFifoStateUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800609c:	f043 0220 	orr.w	r2, r3, #32
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e027      	b.n	80060f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff fec0 	bl	8005e38 <SPI_WaitFlagStateUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e014      	b.n	80060f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff ff34 	bl	8005f48 <SPI_WaitFifoStateUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e000      	b.n	80060f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e049      	b.n	80061a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fb ff6a 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f000 fd16 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d001      	beq.n	80061c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04f      	b.n	8006268 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a23      	ldr	r2, [pc, #140]	; (8006274 <HAL_TIM_Base_Start_IT+0xc4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01d      	beq.n	8006226 <HAL_TIM_Base_Start_IT+0x76>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f2:	d018      	beq.n	8006226 <HAL_TIM_Base_Start_IT+0x76>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_TIM_Base_Start_IT+0xc8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_TIM_Base_Start_IT+0x76>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1e      	ldr	r2, [pc, #120]	; (800627c <HAL_TIM_Base_Start_IT+0xcc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <HAL_TIM_Base_Start_IT+0x76>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_TIM_Base_Start_IT+0xd0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_TIM_Base_Start_IT+0x76>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1b      	ldr	r2, [pc, #108]	; (8006284 <HAL_TIM_Base_Start_IT+0xd4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_TIM_Base_Start_IT+0x76>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a19      	ldr	r2, [pc, #100]	; (8006288 <HAL_TIM_Base_Start_IT+0xd8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d115      	bne.n	8006252 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	4b17      	ldr	r3, [pc, #92]	; (800628c <HAL_TIM_Base_Start_IT+0xdc>)
 800622e:	4013      	ands	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b06      	cmp	r3, #6
 8006236:	d015      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0xb4>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623e:	d011      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006250:	e008      	b.n	8006264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e000      	b.n	8006266 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	00010007 	.word	0x00010007

08006290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e049      	b.n	8006336 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f841 	bl	800633e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f000 fc4e 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <HAL_TIM_PWM_Start+0x24>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e03c      	b.n	80063f2 <HAL_TIM_PWM_Start+0x9e>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b04      	cmp	r3, #4
 800637c:	d109      	bne.n	8006392 <HAL_TIM_PWM_Start+0x3e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	bf14      	ite	ne
 800638a:	2301      	movne	r3, #1
 800638c:	2300      	moveq	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e02f      	b.n	80063f2 <HAL_TIM_PWM_Start+0x9e>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d109      	bne.n	80063ac <HAL_TIM_PWM_Start+0x58>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	bf14      	ite	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	2300      	moveq	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	e022      	b.n	80063f2 <HAL_TIM_PWM_Start+0x9e>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b0c      	cmp	r3, #12
 80063b0:	d109      	bne.n	80063c6 <HAL_TIM_PWM_Start+0x72>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	bf14      	ite	ne
 80063be:	2301      	movne	r3, #1
 80063c0:	2300      	moveq	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	e015      	b.n	80063f2 <HAL_TIM_PWM_Start+0x9e>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d109      	bne.n	80063e0 <HAL_TIM_PWM_Start+0x8c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	e008      	b.n	80063f2 <HAL_TIM_PWM_Start+0x9e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e09c      	b.n	8006534 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d104      	bne.n	800640a <HAL_TIM_PWM_Start+0xb6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006408:	e023      	b.n	8006452 <HAL_TIM_PWM_Start+0xfe>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b04      	cmp	r3, #4
 800640e:	d104      	bne.n	800641a <HAL_TIM_PWM_Start+0xc6>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006418:	e01b      	b.n	8006452 <HAL_TIM_PWM_Start+0xfe>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d104      	bne.n	800642a <HAL_TIM_PWM_Start+0xd6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006428:	e013      	b.n	8006452 <HAL_TIM_PWM_Start+0xfe>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b0c      	cmp	r3, #12
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0xe6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006438:	e00b      	b.n	8006452 <HAL_TIM_PWM_Start+0xfe>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b10      	cmp	r3, #16
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0xf6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006448:	e003      	b.n	8006452 <HAL_TIM_PWM_Start+0xfe>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2201      	movs	r2, #1
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 ff92 	bl	8007384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a35      	ldr	r2, [pc, #212]	; (800653c <HAL_TIM_PWM_Start+0x1e8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_TIM_PWM_Start+0x13e>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a34      	ldr	r2, [pc, #208]	; (8006540 <HAL_TIM_PWM_Start+0x1ec>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_TIM_PWM_Start+0x13e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a32      	ldr	r2, [pc, #200]	; (8006544 <HAL_TIM_PWM_Start+0x1f0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_TIM_PWM_Start+0x13e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a31      	ldr	r2, [pc, #196]	; (8006548 <HAL_TIM_PWM_Start+0x1f4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_TIM_PWM_Start+0x13e>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2f      	ldr	r2, [pc, #188]	; (800654c <HAL_TIM_PWM_Start+0x1f8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_TIM_PWM_Start+0x142>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_TIM_PWM_Start+0x144>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a22      	ldr	r2, [pc, #136]	; (800653c <HAL_TIM_PWM_Start+0x1e8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01d      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064be:	d018      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <HAL_TIM_PWM_Start+0x1fc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a21      	ldr	r2, [pc, #132]	; (8006554 <HAL_TIM_PWM_Start+0x200>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_TIM_PWM_Start+0x204>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a17      	ldr	r2, [pc, #92]	; (8006540 <HAL_TIM_PWM_Start+0x1ec>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <HAL_TIM_PWM_Start+0x1f0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d115      	bne.n	800651e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	4b18      	ldr	r3, [pc, #96]	; (800655c <HAL_TIM_PWM_Start+0x208>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b06      	cmp	r3, #6
 8006502:	d015      	beq.n	8006530 <HAL_TIM_PWM_Start+0x1dc>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800650a:	d011      	beq.n	8006530 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651c:	e008      	b.n	8006530 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e000      	b.n	8006532 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	00010007 	.word	0x00010007

08006560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d020      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01b      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0202 	mvn.w	r2, #2
 8006594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fac1 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fab3 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fac4 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d020      	beq.n	8006610 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01b      	beq.n	8006610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0204 	mvn.w	r2, #4
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa9b 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa8d 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa9e 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d020      	beq.n	800665c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01b      	beq.n	800665c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0208 	mvn.w	r2, #8
 800662c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2204      	movs	r2, #4
 8006632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fa75 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa67 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fa78 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b00      	cmp	r3, #0
 8006664:	d020      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0210 	mvn.w	r2, #16
 8006678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2208      	movs	r2, #8
 800667e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa4f 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa41 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa52 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0201 	mvn.w	r2, #1
 80066c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fb fb08 	bl	8001cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00c      	beq.n	80066f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 ff02 	bl	80074f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00c      	beq.n	8006714 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800670c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fefa 	bl	8007508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00c      	beq.n	8006738 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa11 	bl	8006b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0220 	mvn.w	r2, #32
 8006754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fec2 	bl	80074e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800677e:	2302      	movs	r3, #2
 8006780:	e0ff      	b.n	8006982 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b14      	cmp	r3, #20
 800678e:	f200 80f0 	bhi.w	8006972 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006792:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067ed 	.word	0x080067ed
 800679c:	08006973 	.word	0x08006973
 80067a0:	08006973 	.word	0x08006973
 80067a4:	08006973 	.word	0x08006973
 80067a8:	0800682d 	.word	0x0800682d
 80067ac:	08006973 	.word	0x08006973
 80067b0:	08006973 	.word	0x08006973
 80067b4:	08006973 	.word	0x08006973
 80067b8:	0800686f 	.word	0x0800686f
 80067bc:	08006973 	.word	0x08006973
 80067c0:	08006973 	.word	0x08006973
 80067c4:	08006973 	.word	0x08006973
 80067c8:	080068af 	.word	0x080068af
 80067cc:	08006973 	.word	0x08006973
 80067d0:	08006973 	.word	0x08006973
 80067d4:	08006973 	.word	0x08006973
 80067d8:	080068f1 	.word	0x080068f1
 80067dc:	08006973 	.word	0x08006973
 80067e0:	08006973 	.word	0x08006973
 80067e4:	08006973 	.word	0x08006973
 80067e8:	08006931 	.word	0x08006931
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fa56 	bl	8006ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0208 	orr.w	r2, r2, #8
 8006806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0204 	bic.w	r2, r2, #4
 8006816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6999      	ldr	r1, [r3, #24]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	619a      	str	r2, [r3, #24]
      break;
 800682a:	e0a5      	b.n	8006978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fac6 	bl	8006dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6999      	ldr	r1, [r3, #24]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	021a      	lsls	r2, r3, #8
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	619a      	str	r2, [r3, #24]
      break;
 800686c:	e084      	b.n	8006978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fb2f 	bl	8006ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0208 	orr.w	r2, r2, #8
 8006888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0204 	bic.w	r2, r2, #4
 8006898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69d9      	ldr	r1, [r3, #28]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	61da      	str	r2, [r3, #28]
      break;
 80068ac:	e064      	b.n	8006978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fb97 	bl	8006fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69d9      	ldr	r1, [r3, #28]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	021a      	lsls	r2, r3, #8
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	61da      	str	r2, [r3, #28]
      break;
 80068ee:	e043      	b.n	8006978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fbe0 	bl	80070bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0208 	orr.w	r2, r2, #8
 800690a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0204 	bic.w	r2, r2, #4
 800691a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800692e:	e023      	b.n	8006978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fc24 	bl	8007184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800694a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	021a      	lsls	r2, r3, #8
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006970:	e002      	b.n	8006978 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
      break;
 8006976:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop

0800698c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e0b6      	b.n	8006b16 <HAL_TIM_ConfigClockSource+0x18a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e4:	d03e      	beq.n	8006a64 <HAL_TIM_ConfigClockSource+0xd8>
 80069e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ea:	f200 8087 	bhi.w	8006afc <HAL_TIM_ConfigClockSource+0x170>
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f2:	f000 8086 	beq.w	8006b02 <HAL_TIM_ConfigClockSource+0x176>
 80069f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fa:	d87f      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
 80069fc:	2b70      	cmp	r3, #112	; 0x70
 80069fe:	d01a      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0xaa>
 8006a00:	2b70      	cmp	r3, #112	; 0x70
 8006a02:	d87b      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
 8006a04:	2b60      	cmp	r3, #96	; 0x60
 8006a06:	d050      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x11e>
 8006a08:	2b60      	cmp	r3, #96	; 0x60
 8006a0a:	d877      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
 8006a0c:	2b50      	cmp	r3, #80	; 0x50
 8006a0e:	d03c      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0xfe>
 8006a10:	2b50      	cmp	r3, #80	; 0x50
 8006a12:	d873      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
 8006a14:	2b40      	cmp	r3, #64	; 0x40
 8006a16:	d058      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x13e>
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d86f      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
 8006a1c:	2b30      	cmp	r3, #48	; 0x30
 8006a1e:	d064      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15e>
 8006a20:	2b30      	cmp	r3, #48	; 0x30
 8006a22:	d86b      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d060      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15e>
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d867      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d05c      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15e>
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d05a      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15e>
 8006a34:	e062      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a46:	f000 fc7d 	bl	8007344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	609a      	str	r2, [r3, #8]
      break;
 8006a62:	e04f      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	f000 fc66 	bl	8007344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a86:	609a      	str	r2, [r3, #8]
      break;
 8006a88:	e03c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a96:	461a      	mov	r2, r3
 8006a98:	f000 fbda 	bl	8007250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2150      	movs	r1, #80	; 0x50
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fc33 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e02c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f000 fbf9 	bl	80072ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2160      	movs	r1, #96	; 0x60
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fc23 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006ac8:	e01c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f000 fbba 	bl	8007250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2140      	movs	r1, #64	; 0x40
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fc13 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006ae8:	e00c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f000 fc0a 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006afa:	e003      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	73fb      	strb	r3, [r7, #15]
      break;
 8006b00:	e000      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a40      	ldr	r2, [pc, #256]	; (8006c84 <TIM_Base_SetConfig+0x114>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8e:	d00f      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3d      	ldr	r2, [pc, #244]	; (8006c88 <TIM_Base_SetConfig+0x118>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3c      	ldr	r2, [pc, #240]	; (8006c8c <TIM_Base_SetConfig+0x11c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3b      	ldr	r2, [pc, #236]	; (8006c90 <TIM_Base_SetConfig+0x120>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3a      	ldr	r2, [pc, #232]	; (8006c94 <TIM_Base_SetConfig+0x124>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d108      	bne.n	8006bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2f      	ldr	r2, [pc, #188]	; (8006c84 <TIM_Base_SetConfig+0x114>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01f      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd0:	d01b      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a2c      	ldr	r2, [pc, #176]	; (8006c88 <TIM_Base_SetConfig+0x118>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d017      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2b      	ldr	r2, [pc, #172]	; (8006c8c <TIM_Base_SetConfig+0x11c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2a      	ldr	r2, [pc, #168]	; (8006c90 <TIM_Base_SetConfig+0x120>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00f      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a29      	ldr	r2, [pc, #164]	; (8006c94 <TIM_Base_SetConfig+0x124>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a28      	ldr	r2, [pc, #160]	; (8006c98 <TIM_Base_SetConfig+0x128>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a27      	ldr	r2, [pc, #156]	; (8006c9c <TIM_Base_SetConfig+0x12c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_Base_SetConfig+0x9a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a26      	ldr	r2, [pc, #152]	; (8006ca0 <TIM_Base_SetConfig+0x130>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d108      	bne.n	8006c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <TIM_Base_SetConfig+0x114>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00f      	beq.n	8006c68 <TIM_Base_SetConfig+0xf8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a12      	ldr	r2, [pc, #72]	; (8006c94 <TIM_Base_SetConfig+0x124>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_Base_SetConfig+0xf8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a11      	ldr	r2, [pc, #68]	; (8006c98 <TIM_Base_SetConfig+0x128>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0xf8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a10      	ldr	r2, [pc, #64]	; (8006c9c <TIM_Base_SetConfig+0x12c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0xf8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0f      	ldr	r2, [pc, #60]	; (8006ca0 <TIM_Base_SetConfig+0x130>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d103      	bne.n	8006c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	615a      	str	r2, [r3, #20]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40012c00 	.word	0x40012c00
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40013400 	.word	0x40013400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800

08006ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f023 0201 	bic.w	r2, r3, #1
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f023 0302 	bic.w	r3, r3, #2
 8006cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a2c      	ldr	r2, [pc, #176]	; (8006db0 <TIM_OC1_SetConfig+0x10c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00f      	beq.n	8006d24 <TIM_OC1_SetConfig+0x80>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a2b      	ldr	r2, [pc, #172]	; (8006db4 <TIM_OC1_SetConfig+0x110>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_OC1_SetConfig+0x80>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <TIM_OC1_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC1_SetConfig+0x80>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <TIM_OC1_SetConfig+0x118>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC1_SetConfig+0x80>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a28      	ldr	r2, [pc, #160]	; (8006dc0 <TIM_OC1_SetConfig+0x11c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10c      	bne.n	8006d3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0308 	bic.w	r3, r3, #8
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <TIM_OC1_SetConfig+0x10c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00f      	beq.n	8006d66 <TIM_OC1_SetConfig+0xc2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <TIM_OC1_SetConfig+0x110>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_OC1_SetConfig+0xc2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <TIM_OC1_SetConfig+0x114>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d007      	beq.n	8006d66 <TIM_OC1_SetConfig+0xc2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <TIM_OC1_SetConfig+0x118>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_OC1_SetConfig+0xc2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <TIM_OC1_SetConfig+0x11c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d111      	bne.n	8006d8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40012c00 	.word	0x40012c00
 8006db4:	40013400 	.word	0x40013400
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f023 0210 	bic.w	r2, r3, #16
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0320 	bic.w	r3, r3, #32
 8006e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a28      	ldr	r2, [pc, #160]	; (8006ec4 <TIM_OC2_SetConfig+0x100>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0x6c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a27      	ldr	r2, [pc, #156]	; (8006ec8 <TIM_OC2_SetConfig+0x104>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10d      	bne.n	8006e4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <TIM_OC2_SetConfig+0x100>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00f      	beq.n	8006e74 <TIM_OC2_SetConfig+0xb0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1c      	ldr	r2, [pc, #112]	; (8006ec8 <TIM_OC2_SetConfig+0x104>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <TIM_OC2_SetConfig+0xb0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1b      	ldr	r2, [pc, #108]	; (8006ecc <TIM_OC2_SetConfig+0x108>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_OC2_SetConfig+0xb0>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <TIM_OC2_SetConfig+0x10c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_OC2_SetConfig+0xb0>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <TIM_OC2_SetConfig+0x110>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d113      	bne.n	8006e9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800

08006ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0303 	bic.w	r3, r3, #3
 8006f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a27      	ldr	r2, [pc, #156]	; (8006fd4 <TIM_OC3_SetConfig+0xfc>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d003      	beq.n	8006f42 <TIM_OC3_SetConfig+0x6a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a26      	ldr	r2, [pc, #152]	; (8006fd8 <TIM_OC3_SetConfig+0x100>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d10d      	bne.n	8006f5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <TIM_OC3_SetConfig+0xfc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00f      	beq.n	8006f86 <TIM_OC3_SetConfig+0xae>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <TIM_OC3_SetConfig+0x100>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00b      	beq.n	8006f86 <TIM_OC3_SetConfig+0xae>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1a      	ldr	r2, [pc, #104]	; (8006fdc <TIM_OC3_SetConfig+0x104>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <TIM_OC3_SetConfig+0xae>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <TIM_OC3_SetConfig+0x108>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_OC3_SetConfig+0xae>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <TIM_OC3_SetConfig+0x10c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d113      	bne.n	8006fae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40013400 	.word	0x40013400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800

08006fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	031b      	lsls	r3, r3, #12
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <TIM_OC4_SetConfig+0xc0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00f      	beq.n	800706c <TIM_OC4_SetConfig+0x84>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a17      	ldr	r2, [pc, #92]	; (80070ac <TIM_OC4_SetConfig+0xc4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_OC4_SetConfig+0x84>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <TIM_OC4_SetConfig+0xc8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <TIM_OC4_SetConfig+0x84>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <TIM_OC4_SetConfig+0xcc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_OC4_SetConfig+0x84>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a14      	ldr	r2, [pc, #80]	; (80070b8 <TIM_OC4_SetConfig+0xd0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d109      	bne.n	8007080 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	019b      	lsls	r3, r3, #6
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	621a      	str	r2, [r3, #32]
}
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40013400 	.word	0x40013400
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40014400 	.word	0x40014400
 80070b8:	40014800 	.word	0x40014800

080070bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a17      	ldr	r2, [pc, #92]	; (8007170 <TIM_OC5_SetConfig+0xb4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00f      	beq.n	8007136 <TIM_OC5_SetConfig+0x7a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <TIM_OC5_SetConfig+0xb8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00b      	beq.n	8007136 <TIM_OC5_SetConfig+0x7a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <TIM_OC5_SetConfig+0xbc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d007      	beq.n	8007136 <TIM_OC5_SetConfig+0x7a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a14      	ldr	r2, [pc, #80]	; (800717c <TIM_OC5_SetConfig+0xc0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_OC5_SetConfig+0x7a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a13      	ldr	r2, [pc, #76]	; (8007180 <TIM_OC5_SetConfig+0xc4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d109      	bne.n	800714a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	621a      	str	r2, [r3, #32]
}
 8007164:	bf00      	nop
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	40012c00 	.word	0x40012c00
 8007174:	40013400 	.word	0x40013400
 8007178:	40014000 	.word	0x40014000
 800717c:	40014400 	.word	0x40014400
 8007180:	40014800 	.word	0x40014800

08007184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	051b      	lsls	r3, r3, #20
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a18      	ldr	r2, [pc, #96]	; (800723c <TIM_OC6_SetConfig+0xb8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00f      	beq.n	8007200 <TIM_OC6_SetConfig+0x7c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a17      	ldr	r2, [pc, #92]	; (8007240 <TIM_OC6_SetConfig+0xbc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00b      	beq.n	8007200 <TIM_OC6_SetConfig+0x7c>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a16      	ldr	r2, [pc, #88]	; (8007244 <TIM_OC6_SetConfig+0xc0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <TIM_OC6_SetConfig+0x7c>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a15      	ldr	r2, [pc, #84]	; (8007248 <TIM_OC6_SetConfig+0xc4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_OC6_SetConfig+0x7c>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a14      	ldr	r2, [pc, #80]	; (800724c <TIM_OC6_SetConfig+0xc8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d109      	bne.n	8007214 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007206:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	029b      	lsls	r3, r3, #10
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40014000 	.word	0x40014000
 8007248:	40014400 	.word	0x40014400
 800724c:	40014800 	.word	0x40014800

08007250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f023 0201 	bic.w	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800727a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 030a 	bic.w	r3, r3, #10
 800728c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b087      	sub	sp, #28
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f023 0210 	bic.w	r2, r3, #16
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	f043 0307 	orr.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	021a      	lsls	r2, r3, #8
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	431a      	orrs	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2201      	movs	r2, #1
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	401a      	ands	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	fa01 f303 	lsl.w	r3, r1, r3
 80073bc:	431a      	orrs	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e068      	b.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2e      	ldr	r2, [pc, #184]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d004      	beq.n	800741c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a2d      	ldr	r2, [pc, #180]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d108      	bne.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1e      	ldr	r2, [pc, #120]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d01d      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745a:	d018      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d013      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00e      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d009      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a13      	ldr	r2, [pc, #76]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a14      	ldr	r2, [pc, #80]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d10c      	bne.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4313      	orrs	r3, r2
 800749e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40013400 	.word	0x40013400
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40014000 	.word	0x40014000

080074e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e040      	b.n	80075b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fa fde8 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2224      	movs	r2, #36	; 0x24
 8007548:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fec0 	bl	80082e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fc05 	bl	8007d78 <UART_SetConfig>
 800756e:	4603      	mov	r3, r0
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e01b      	b.n	80075b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 ff3f 	bl	800842c <UART_CheckIdleState>
 80075ae:	4603      	mov	r3, r0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d178      	bne.n	80076c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_UART_Transmit+0x24>
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e071      	b.n	80076c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2221      	movs	r2, #33	; 0x21
 80075ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ee:	f7fb f9cf 	bl	8002990 <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	88fa      	ldrh	r2, [r7, #6]
 80075f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760c:	d108      	bne.n	8007620 <HAL_UART_Transmit+0x68>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	e003      	b.n	8007628 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007624:	2300      	movs	r3, #0
 8007626:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007628:	e030      	b.n	800768c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2200      	movs	r2, #0
 8007632:	2180      	movs	r1, #128	; 0x80
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 ffa1 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2220      	movs	r2, #32
 8007644:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e03c      	b.n	80076c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	881a      	ldrh	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800765c:	b292      	uxth	r2, r2
 800765e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	3302      	adds	r3, #2
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	e008      	b.n	800767a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	b292      	uxth	r2, r2
 8007672:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	3301      	adds	r3, #1
 8007678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1c8      	bne.n	800762a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2200      	movs	r2, #0
 80076a0:	2140      	movs	r1, #64	; 0x40
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 ff6a 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d004      	beq.n	80076b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e005      	b.n	80076c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	e000      	b.n	80076c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80076c2:	2302      	movs	r3, #2
  }
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3720      	adds	r7, #32
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e0:	2b20      	cmp	r3, #32
 80076e2:	d137      	bne.n	8007754 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_UART_Receive_IT+0x24>
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e030      	b.n	8007756 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a18      	ldr	r2, [pc, #96]	; (8007760 <HAL_UART_Receive_IT+0x94>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d01f      	beq.n	8007744 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d018      	beq.n	8007744 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	613b      	str	r3, [r7, #16]
   return(result);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	69f9      	ldr	r1, [r7, #28]
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	61bb      	str	r3, [r7, #24]
   return(result);
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e6      	bne.n	8007712 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	461a      	mov	r2, r3
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 ff7e 	bl	800864c <UART_Start_Receive_IT>
 8007750:	4603      	mov	r3, r0
 8007752:	e000      	b.n	8007756 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007754:	2302      	movs	r3, #2
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	3728      	adds	r7, #40	; 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	40008000 	.word	0x40008000

08007764 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b0ba      	sub	sp, #232	; 0xe8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800778a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800778e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007792:	4013      	ands	r3, r2
 8007794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d115      	bne.n	80077cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00f      	beq.n	80077cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d009      	beq.n	80077cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 82ae 	beq.w	8007d1e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
      }
      return;
 80077ca:	e2a8      	b.n	8007d1e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80077cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 8117 	beq.w	8007a04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077e6:	4b85      	ldr	r3, [pc, #532]	; (80079fc <HAL_UART_IRQHandler+0x298>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 810a 	beq.w	8007a04 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d011      	beq.n	8007820 <HAL_UART_IRQHandler+0xbc>
 80077fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2201      	movs	r2, #1
 800780e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007816:	f043 0201 	orr.w	r2, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d011      	beq.n	8007850 <HAL_UART_IRQHandler+0xec>
 800782c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2202      	movs	r2, #2
 800783e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007846:	f043 0204 	orr.w	r2, r3, #4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d011      	beq.n	8007880 <HAL_UART_IRQHandler+0x11c>
 800785c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2204      	movs	r2, #4
 800786e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	f043 0202 	orr.w	r2, r3, #2
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d017      	beq.n	80078bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d105      	bne.n	80078a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2208      	movs	r2, #8
 80078aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b2:	f043 0208 	orr.w	r2, r3, #8
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d012      	beq.n	80078ee <HAL_UART_IRQHandler+0x18a>
 80078c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00c      	beq.n	80078ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e4:	f043 0220 	orr.w	r2, r3, #32
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8214 	beq.w	8007d22 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00d      	beq.n	8007922 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d005      	beq.n	8007946 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800793a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800793e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007942:	2b00      	cmp	r3, #0
 8007944:	d04f      	beq.n	80079e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 ff46 	bl	80087d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d141      	bne.n	80079de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3308      	adds	r3, #8
 8007982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800798a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800799e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1d9      	bne.n	800795a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d013      	beq.n	80079d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b2:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <HAL_UART_IRQHandler+0x29c>)
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fb fdac 	bl	8003518 <HAL_DMA_Abort_IT>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d017      	beq.n	80079f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	e00f      	b.n	80079f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f9b8 	bl	8007d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079dc:	e00b      	b.n	80079f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f9b4 	bl	8007d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	e007      	b.n	80079f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f9b0 	bl	8007d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80079f4:	e195      	b.n	8007d22 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f6:	bf00      	nop
    return;
 80079f8:	e193      	b.n	8007d22 <HAL_UART_IRQHandler+0x5be>
 80079fa:	bf00      	nop
 80079fc:	04000120 	.word	0x04000120
 8007a00:	080088a1 	.word	0x080088a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	f040 814e 	bne.w	8007caa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8147 	beq.w	8007caa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8140 	beq.w	8007caa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	f040 80b8 	bne.w	8007bb2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8167 	beq.w	8007d26 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a62:	429a      	cmp	r2, r3
 8007a64:	f080 815f 	bcs.w	8007d26 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 8086 	bne.w	8007b90 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ab2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1da      	bne.n	8007a84 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae0:	f023 0301 	bic.w	r3, r3, #1
 8007ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007af2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007af6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e1      	bne.n	8007ace <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e3      	bne.n	8007b0a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b60:	f023 0310 	bic.w	r3, r3, #16
 8007b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e4      	bne.n	8007b50 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fb fc86 	bl	800349c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8d8 	bl	8007d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bb0:	e0b9      	b.n	8007d26 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 80ab 	beq.w	8007d2a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 80a6 	beq.w	8007d2a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c00:	647b      	str	r3, [r7, #68]	; 0x44
 8007c02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e4      	bne.n	8007bde <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	623b      	str	r3, [r7, #32]
   return(result);
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	f023 0301 	bic.w	r3, r3, #1
 8007c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c38:	633a      	str	r2, [r7, #48]	; 0x30
 8007c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e3      	bne.n	8007c14 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f023 0310 	bic.w	r3, r3, #16
 8007c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	69b9      	ldr	r1, [r7, #24]
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e4      	bne.n	8007c60 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f85c 	bl	8007d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ca8:	e03f      	b.n	8007d2a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00e      	beq.n	8007cd4 <HAL_UART_IRQHandler+0x570>
 8007cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d008      	beq.n	8007cd4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 ffe3 	bl	8008c98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cd2:	e02d      	b.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01c      	beq.n	8007d2e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
    }
    return;
 8007cfc:	e017      	b.n	8007d2e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d012      	beq.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
 8007d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00c      	beq.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fdd8 	bl	80088cc <UART_EndTransmit_IT>
    return;
 8007d1c:	e008      	b.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d1e:	bf00      	nop
 8007d20:	e006      	b.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007d22:	bf00      	nop
 8007d24:	e004      	b.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d26:	bf00      	nop
 8007d28:	e002      	b.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d2a:	bf00      	nop
 8007d2c:	e000      	b.n	8007d30 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007d2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d30:	37e8      	adds	r7, #232	; 0xe8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop

08007d38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d7c:	b08a      	sub	sp, #40	; 0x28
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4ba4      	ldr	r3, [pc, #656]	; (8008038 <UART_SetConfig+0x2c0>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007db0:	430b      	orrs	r3, r1
 8007db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a99      	ldr	r2, [pc, #612]	; (800803c <UART_SetConfig+0x2c4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de0:	4313      	orrs	r3, r2
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df4:	430a      	orrs	r2, r1
 8007df6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a90      	ldr	r2, [pc, #576]	; (8008040 <UART_SetConfig+0x2c8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d126      	bne.n	8007e50 <UART_SetConfig+0xd8>
 8007e02:	4b90      	ldr	r3, [pc, #576]	; (8008044 <UART_SetConfig+0x2cc>)
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e08:	f003 0303 	and.w	r3, r3, #3
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d81b      	bhi.n	8007e48 <UART_SetConfig+0xd0>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0xa0>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e41 	.word	0x08007e41
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2e:	e116      	b.n	800805e <UART_SetConfig+0x2e6>
 8007e30:	2302      	movs	r3, #2
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e36:	e112      	b.n	800805e <UART_SetConfig+0x2e6>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e3e:	e10e      	b.n	800805e <UART_SetConfig+0x2e6>
 8007e40:	2308      	movs	r3, #8
 8007e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e46:	e10a      	b.n	800805e <UART_SetConfig+0x2e6>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e4e:	e106      	b.n	800805e <UART_SetConfig+0x2e6>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a7c      	ldr	r2, [pc, #496]	; (8008048 <UART_SetConfig+0x2d0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d138      	bne.n	8007ecc <UART_SetConfig+0x154>
 8007e5a:	4b7a      	ldr	r3, [pc, #488]	; (8008044 <UART_SetConfig+0x2cc>)
 8007e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e60:	f003 030c 	and.w	r3, r3, #12
 8007e64:	2b0c      	cmp	r3, #12
 8007e66:	d82d      	bhi.n	8007ec4 <UART_SetConfig+0x14c>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0xf8>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007ea5 	.word	0x08007ea5
 8007e74:	08007ec5 	.word	0x08007ec5
 8007e78:	08007ec5 	.word	0x08007ec5
 8007e7c:	08007ec5 	.word	0x08007ec5
 8007e80:	08007eb5 	.word	0x08007eb5
 8007e84:	08007ec5 	.word	0x08007ec5
 8007e88:	08007ec5 	.word	0x08007ec5
 8007e8c:	08007ec5 	.word	0x08007ec5
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007ec5 	.word	0x08007ec5
 8007e98:	08007ec5 	.word	0x08007ec5
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ebd 	.word	0x08007ebd
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eaa:	e0d8      	b.n	800805e <UART_SetConfig+0x2e6>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eb2:	e0d4      	b.n	800805e <UART_SetConfig+0x2e6>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eba:	e0d0      	b.n	800805e <UART_SetConfig+0x2e6>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ec2:	e0cc      	b.n	800805e <UART_SetConfig+0x2e6>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eca:	e0c8      	b.n	800805e <UART_SetConfig+0x2e6>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a5e      	ldr	r2, [pc, #376]	; (800804c <UART_SetConfig+0x2d4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d125      	bne.n	8007f22 <UART_SetConfig+0x1aa>
 8007ed6:	4b5b      	ldr	r3, [pc, #364]	; (8008044 <UART_SetConfig+0x2cc>)
 8007ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007edc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ee0:	2b30      	cmp	r3, #48	; 0x30
 8007ee2:	d016      	beq.n	8007f12 <UART_SetConfig+0x19a>
 8007ee4:	2b30      	cmp	r3, #48	; 0x30
 8007ee6:	d818      	bhi.n	8007f1a <UART_SetConfig+0x1a2>
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	d00a      	beq.n	8007f02 <UART_SetConfig+0x18a>
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d814      	bhi.n	8007f1a <UART_SetConfig+0x1a2>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <UART_SetConfig+0x182>
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d008      	beq.n	8007f0a <UART_SetConfig+0x192>
 8007ef8:	e00f      	b.n	8007f1a <UART_SetConfig+0x1a2>
 8007efa:	2300      	movs	r3, #0
 8007efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f00:	e0ad      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f02:	2302      	movs	r3, #2
 8007f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f08:	e0a9      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f0a:	2304      	movs	r3, #4
 8007f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f10:	e0a5      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f12:	2308      	movs	r3, #8
 8007f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f18:	e0a1      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f1a:	2310      	movs	r3, #16
 8007f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f20:	e09d      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a4a      	ldr	r2, [pc, #296]	; (8008050 <UART_SetConfig+0x2d8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d125      	bne.n	8007f78 <UART_SetConfig+0x200>
 8007f2c:	4b45      	ldr	r3, [pc, #276]	; (8008044 <UART_SetConfig+0x2cc>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f36:	2bc0      	cmp	r3, #192	; 0xc0
 8007f38:	d016      	beq.n	8007f68 <UART_SetConfig+0x1f0>
 8007f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f3c:	d818      	bhi.n	8007f70 <UART_SetConfig+0x1f8>
 8007f3e:	2b80      	cmp	r3, #128	; 0x80
 8007f40:	d00a      	beq.n	8007f58 <UART_SetConfig+0x1e0>
 8007f42:	2b80      	cmp	r3, #128	; 0x80
 8007f44:	d814      	bhi.n	8007f70 <UART_SetConfig+0x1f8>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <UART_SetConfig+0x1d8>
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d008      	beq.n	8007f60 <UART_SetConfig+0x1e8>
 8007f4e:	e00f      	b.n	8007f70 <UART_SetConfig+0x1f8>
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f56:	e082      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f5e:	e07e      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f60:	2304      	movs	r3, #4
 8007f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f66:	e07a      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f68:	2308      	movs	r3, #8
 8007f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f6e:	e076      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f70:	2310      	movs	r3, #16
 8007f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f76:	e072      	b.n	800805e <UART_SetConfig+0x2e6>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a35      	ldr	r2, [pc, #212]	; (8008054 <UART_SetConfig+0x2dc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d12a      	bne.n	8007fd8 <UART_SetConfig+0x260>
 8007f82:	4b30      	ldr	r3, [pc, #192]	; (8008044 <UART_SetConfig+0x2cc>)
 8007f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f90:	d01a      	beq.n	8007fc8 <UART_SetConfig+0x250>
 8007f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f96:	d81b      	bhi.n	8007fd0 <UART_SetConfig+0x258>
 8007f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f9c:	d00c      	beq.n	8007fb8 <UART_SetConfig+0x240>
 8007f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa2:	d815      	bhi.n	8007fd0 <UART_SetConfig+0x258>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <UART_SetConfig+0x238>
 8007fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fac:	d008      	beq.n	8007fc0 <UART_SetConfig+0x248>
 8007fae:	e00f      	b.n	8007fd0 <UART_SetConfig+0x258>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fb6:	e052      	b.n	800805e <UART_SetConfig+0x2e6>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fbe:	e04e      	b.n	800805e <UART_SetConfig+0x2e6>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fc6:	e04a      	b.n	800805e <UART_SetConfig+0x2e6>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fce:	e046      	b.n	800805e <UART_SetConfig+0x2e6>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd6:	e042      	b.n	800805e <UART_SetConfig+0x2e6>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a17      	ldr	r2, [pc, #92]	; (800803c <UART_SetConfig+0x2c4>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d13a      	bne.n	8008058 <UART_SetConfig+0x2e0>
 8007fe2:	4b18      	ldr	r3, [pc, #96]	; (8008044 <UART_SetConfig+0x2cc>)
 8007fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff0:	d01a      	beq.n	8008028 <UART_SetConfig+0x2b0>
 8007ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff6:	d81b      	bhi.n	8008030 <UART_SetConfig+0x2b8>
 8007ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffc:	d00c      	beq.n	8008018 <UART_SetConfig+0x2a0>
 8007ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008002:	d815      	bhi.n	8008030 <UART_SetConfig+0x2b8>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <UART_SetConfig+0x298>
 8008008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800c:	d008      	beq.n	8008020 <UART_SetConfig+0x2a8>
 800800e:	e00f      	b.n	8008030 <UART_SetConfig+0x2b8>
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008016:	e022      	b.n	800805e <UART_SetConfig+0x2e6>
 8008018:	2302      	movs	r3, #2
 800801a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800801e:	e01e      	b.n	800805e <UART_SetConfig+0x2e6>
 8008020:	2304      	movs	r3, #4
 8008022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008026:	e01a      	b.n	800805e <UART_SetConfig+0x2e6>
 8008028:	2308      	movs	r3, #8
 800802a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802e:	e016      	b.n	800805e <UART_SetConfig+0x2e6>
 8008030:	2310      	movs	r3, #16
 8008032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008036:	e012      	b.n	800805e <UART_SetConfig+0x2e6>
 8008038:	efff69f3 	.word	0xefff69f3
 800803c:	40008000 	.word	0x40008000
 8008040:	40013800 	.word	0x40013800
 8008044:	40021000 	.word	0x40021000
 8008048:	40004400 	.word	0x40004400
 800804c:	40004800 	.word	0x40004800
 8008050:	40004c00 	.word	0x40004c00
 8008054:	40005000 	.word	0x40005000
 8008058:	2310      	movs	r3, #16
 800805a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a9f      	ldr	r2, [pc, #636]	; (80082e0 <UART_SetConfig+0x568>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d17a      	bne.n	800815e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008068:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800806c:	2b08      	cmp	r3, #8
 800806e:	d824      	bhi.n	80080ba <UART_SetConfig+0x342>
 8008070:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <UART_SetConfig+0x300>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	0800809d 	.word	0x0800809d
 800807c:	080080bb 	.word	0x080080bb
 8008080:	080080a5 	.word	0x080080a5
 8008084:	080080bb 	.word	0x080080bb
 8008088:	080080ab 	.word	0x080080ab
 800808c:	080080bb 	.word	0x080080bb
 8008090:	080080bb 	.word	0x080080bb
 8008094:	080080bb 	.word	0x080080bb
 8008098:	080080b3 	.word	0x080080b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800809c:	f7fc ff6c 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80080a0:	61f8      	str	r0, [r7, #28]
        break;
 80080a2:	e010      	b.n	80080c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080a4:	4b8f      	ldr	r3, [pc, #572]	; (80082e4 <UART_SetConfig+0x56c>)
 80080a6:	61fb      	str	r3, [r7, #28]
        break;
 80080a8:	e00d      	b.n	80080c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080aa:	f7fc fecd 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 80080ae:	61f8      	str	r0, [r7, #28]
        break;
 80080b0:	e009      	b.n	80080c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080b6:	61fb      	str	r3, [r7, #28]
        break;
 80080b8:	e005      	b.n	80080c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 80fb 	beq.w	80082c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	4613      	mov	r3, r2
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	4413      	add	r3, r2
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d305      	bcc.n	80080ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d903      	bls.n	80080f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080f0:	e0e8      	b.n	80082c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2200      	movs	r2, #0
 80080f6:	461c      	mov	r4, r3
 80080f8:	4615      	mov	r5, r2
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	022b      	lsls	r3, r5, #8
 8008104:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008108:	0222      	lsls	r2, r4, #8
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	6849      	ldr	r1, [r1, #4]
 800810e:	0849      	lsrs	r1, r1, #1
 8008110:	2000      	movs	r0, #0
 8008112:	4688      	mov	r8, r1
 8008114:	4681      	mov	r9, r0
 8008116:	eb12 0a08 	adds.w	sl, r2, r8
 800811a:	eb43 0b09 	adc.w	fp, r3, r9
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812c:	4650      	mov	r0, sl
 800812e:	4659      	mov	r1, fp
 8008130:	f7f8 fce8 	bl	8000b04 <__aeabi_uldivmod>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4613      	mov	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008142:	d308      	bcc.n	8008156 <UART_SetConfig+0x3de>
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814a:	d204      	bcs.n	8008156 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	60da      	str	r2, [r3, #12]
 8008154:	e0b6      	b.n	80082c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800815c:	e0b2      	b.n	80082c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008166:	d15e      	bne.n	8008226 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800816c:	2b08      	cmp	r3, #8
 800816e:	d828      	bhi.n	80081c2 <UART_SetConfig+0x44a>
 8008170:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <UART_SetConfig+0x400>)
 8008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008176:	bf00      	nop
 8008178:	0800819d 	.word	0x0800819d
 800817c:	080081a5 	.word	0x080081a5
 8008180:	080081ad 	.word	0x080081ad
 8008184:	080081c3 	.word	0x080081c3
 8008188:	080081b3 	.word	0x080081b3
 800818c:	080081c3 	.word	0x080081c3
 8008190:	080081c3 	.word	0x080081c3
 8008194:	080081c3 	.word	0x080081c3
 8008198:	080081bb 	.word	0x080081bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800819c:	f7fc feec 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80081a0:	61f8      	str	r0, [r7, #28]
        break;
 80081a2:	e014      	b.n	80081ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a4:	f7fc fefe 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 80081a8:	61f8      	str	r0, [r7, #28]
        break;
 80081aa:	e010      	b.n	80081ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ac:	4b4d      	ldr	r3, [pc, #308]	; (80082e4 <UART_SetConfig+0x56c>)
 80081ae:	61fb      	str	r3, [r7, #28]
        break;
 80081b0:	e00d      	b.n	80081ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081b2:	f7fc fe49 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 80081b6:	61f8      	str	r0, [r7, #28]
        break;
 80081b8:	e009      	b.n	80081ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081be:	61fb      	str	r3, [r7, #28]
        break;
 80081c0:	e005      	b.n	80081ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80081cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d077      	beq.n	80082c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	005a      	lsls	r2, r3, #1
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	441a      	add	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b0f      	cmp	r3, #15
 80081ee:	d916      	bls.n	800821e <UART_SetConfig+0x4a6>
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f6:	d212      	bcs.n	800821e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f023 030f 	bic.w	r3, r3, #15
 8008200:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	b29b      	uxth	r3, r3
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	b29a      	uxth	r2, r3
 800820e:	8afb      	ldrh	r3, [r7, #22]
 8008210:	4313      	orrs	r3, r2
 8008212:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	8afa      	ldrh	r2, [r7, #22]
 800821a:	60da      	str	r2, [r3, #12]
 800821c:	e052      	b.n	80082c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008224:	e04e      	b.n	80082c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800822a:	2b08      	cmp	r3, #8
 800822c:	d827      	bhi.n	800827e <UART_SetConfig+0x506>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <UART_SetConfig+0x4bc>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008259 	.word	0x08008259
 8008238:	08008261 	.word	0x08008261
 800823c:	08008269 	.word	0x08008269
 8008240:	0800827f 	.word	0x0800827f
 8008244:	0800826f 	.word	0x0800826f
 8008248:	0800827f 	.word	0x0800827f
 800824c:	0800827f 	.word	0x0800827f
 8008250:	0800827f 	.word	0x0800827f
 8008254:	08008277 	.word	0x08008277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008258:	f7fc fe8e 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 800825c:	61f8      	str	r0, [r7, #28]
        break;
 800825e:	e014      	b.n	800828a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008260:	f7fc fea0 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 8008264:	61f8      	str	r0, [r7, #28]
        break;
 8008266:	e010      	b.n	800828a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008268:	4b1e      	ldr	r3, [pc, #120]	; (80082e4 <UART_SetConfig+0x56c>)
 800826a:	61fb      	str	r3, [r7, #28]
        break;
 800826c:	e00d      	b.n	800828a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826e:	f7fc fdeb 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8008272:	61f8      	str	r0, [r7, #28]
        break;
 8008274:	e009      	b.n	800828a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827a:	61fb      	str	r3, [r7, #28]
        break;
 800827c:	e005      	b.n	800828a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008288:	bf00      	nop
    }

    if (pclk != 0U)
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d019      	beq.n	80082c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	085a      	lsrs	r2, r3, #1
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	441a      	add	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b0f      	cmp	r3, #15
 80082a8:	d909      	bls.n	80082be <UART_SetConfig+0x546>
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b0:	d205      	bcs.n	80082be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60da      	str	r2, [r3, #12]
 80082bc:	e002      	b.n	80082c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80082d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3728      	adds	r7, #40	; 0x28
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082de:	bf00      	nop
 80082e0:	40008000 	.word	0x40008000
 80082e4:	00f42400 	.word	0x00f42400

080082e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	f003 0310 	and.w	r3, r3, #16
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01a      	beq.n	80083fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083e6:	d10a      	bne.n	80083fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b098      	sub	sp, #96	; 0x60
 8008430:	af02      	add	r7, sp, #8
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800843c:	f7fa faa8 	bl	8002990 <HAL_GetTick>
 8008440:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b08      	cmp	r3, #8
 800844e:	d12e      	bne.n	80084ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008458:	2200      	movs	r2, #0
 800845a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f88c 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d021      	beq.n	80084ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847e:	653b      	str	r3, [r7, #80]	; 0x50
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
 800848a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800848e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e6      	bne.n	800846a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e062      	b.n	8008574 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d149      	bne.n	8008550 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c4:	2200      	movs	r2, #0
 80084c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f856 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d03c      	beq.n	8008550 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	623b      	str	r3, [r7, #32]
   return(result);
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f4:	633b      	str	r3, [r7, #48]	; 0x30
 80084f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	60fb      	str	r3, [r7, #12]
   return(result);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008528:	61fa      	str	r2, [r7, #28]
 800852a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	69b9      	ldr	r1, [r7, #24]
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	617b      	str	r3, [r7, #20]
   return(result);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e5      	bne.n	8008508 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e011      	b.n	8008574 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3758      	adds	r7, #88	; 0x58
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858c:	e049      	b.n	8008622 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d045      	beq.n	8008622 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008596:	f7fa f9fb 	bl	8002990 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d302      	bcc.n	80085ac <UART_WaitOnFlagUntilTimeout+0x30>
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e048      	b.n	8008642 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d031      	beq.n	8008622 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d110      	bne.n	80085ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2208      	movs	r2, #8
 80085d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f8ff 	bl	80087d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2208      	movs	r2, #8
 80085de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e029      	b.n	8008642 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085fc:	d111      	bne.n	8008622 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f8e5 	bl	80087d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e00f      	b.n	8008642 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4013      	ands	r3, r2
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	429a      	cmp	r2, r3
 8008630:	bf0c      	ite	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	2300      	movne	r3, #0
 8008636:	b2db      	uxtb	r3, r3
 8008638:	461a      	mov	r2, r3
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	429a      	cmp	r2, r3
 800863e:	d0a6      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800864c:	b480      	push	{r7}
 800864e:	b097      	sub	sp, #92	; 0x5c
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	88fa      	ldrh	r2, [r7, #6]
 800866c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867e:	d10e      	bne.n	800869e <UART_Start_Receive_IT+0x52>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d105      	bne.n	8008694 <UART_Start_Receive_IT+0x48>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800868e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008692:	e02d      	b.n	80086f0 <UART_Start_Receive_IT+0xa4>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	22ff      	movs	r2, #255	; 0xff
 8008698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800869c:	e028      	b.n	80086f0 <UART_Start_Receive_IT+0xa4>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10d      	bne.n	80086c2 <UART_Start_Receive_IT+0x76>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d104      	bne.n	80086b8 <UART_Start_Receive_IT+0x6c>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	22ff      	movs	r2, #255	; 0xff
 80086b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086b6:	e01b      	b.n	80086f0 <UART_Start_Receive_IT+0xa4>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	227f      	movs	r2, #127	; 0x7f
 80086bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086c0:	e016      	b.n	80086f0 <UART_Start_Receive_IT+0xa4>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ca:	d10d      	bne.n	80086e8 <UART_Start_Receive_IT+0x9c>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d104      	bne.n	80086de <UART_Start_Receive_IT+0x92>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	227f      	movs	r2, #127	; 0x7f
 80086d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086dc:	e008      	b.n	80086f0 <UART_Start_Receive_IT+0xa4>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	223f      	movs	r2, #63	; 0x3f
 80086e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086e6:	e003      	b.n	80086f0 <UART_Start_Receive_IT+0xa4>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2222      	movs	r2, #34	; 0x22
 80086fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	657b      	str	r3, [r7, #84]	; 0x54
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008720:	64ba      	str	r2, [r7, #72]	; 0x48
 8008722:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800872e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873c:	d107      	bne.n	800874e <UART_Start_Receive_IT+0x102>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d103      	bne.n	800874e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4a21      	ldr	r2, [pc, #132]	; (80087d0 <UART_Start_Receive_IT+0x184>)
 800874a:	669a      	str	r2, [r3, #104]	; 0x68
 800874c:	e002      	b.n	8008754 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4a20      	ldr	r2, [pc, #128]	; (80087d4 <UART_Start_Receive_IT+0x188>)
 8008752:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d019      	beq.n	8008790 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
 800877c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e6      	bne.n	800875c <UART_Start_Receive_IT+0x110>
 800878e:	e018      	b.n	80087c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	613b      	str	r3, [r7, #16]
   return(result);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f043 0320 	orr.w	r3, r3, #32
 80087a4:	653b      	str	r3, [r7, #80]	; 0x50
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ae:	623b      	str	r3, [r7, #32]
 80087b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	69f9      	ldr	r1, [r7, #28]
 80087b4:	6a3a      	ldr	r2, [r7, #32]
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e6      	bne.n	8008790 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	375c      	adds	r7, #92	; 0x5c
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	08008add 	.word	0x08008add
 80087d4:	08008921 	.word	0x08008921

080087d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b095      	sub	sp, #84	; 0x54
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008800:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e6      	bne.n	80087e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	61fb      	str	r3, [r7, #28]
   return(result);
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	64bb      	str	r3, [r7, #72]	; 0x48
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e5      	bne.n	8008812 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884a:	2b01      	cmp	r3, #1
 800884c:	d118      	bne.n	8008880 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	60bb      	str	r3, [r7, #8]
   return(result);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f023 0310 	bic.w	r3, r3, #16
 8008862:	647b      	str	r3, [r7, #68]	; 0x44
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886c:	61bb      	str	r3, [r7, #24]
 800886e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6979      	ldr	r1, [r7, #20]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	613b      	str	r3, [r7, #16]
   return(result);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e6      	bne.n	800884e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008894:	bf00      	nop
 8008896:	3754      	adds	r7, #84	; 0x54
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff fa44 	bl	8007d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c4:	bf00      	nop
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e8:	61fb      	str	r3, [r7, #28]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6979      	ldr	r1, [r7, #20]
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e6      	bne.n	80088d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fa10 	bl	8007d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008918:	bf00      	nop
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b09c      	sub	sp, #112	; 0x70
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800892e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008938:	2b22      	cmp	r3, #34	; 0x22
 800893a:	f040 80be 	bne.w	8008aba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008944:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008948:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800894c:	b2d9      	uxtb	r1, r3
 800894e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008952:	b2da      	uxtb	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008958:	400a      	ands	r2, r1
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	f040 80a3 	bne.w	8008ace <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800899c:	66bb      	str	r3, [r7, #104]	; 0x68
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80089a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e6      	bne.n	8008988 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	667b      	str	r3, [r7, #100]	; 0x64
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3308      	adds	r3, #8
 80089d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089da:	647a      	str	r2, [r7, #68]	; 0x44
 80089dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a34      	ldr	r2, [pc, #208]	; (8008ad8 <UART_RxISR_8BIT+0x1b8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d01f      	beq.n	8008a4c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d018      	beq.n	8008a4c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	623b      	str	r3, [r7, #32]
   return(result);
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a38:	633b      	str	r3, [r7, #48]	; 0x30
 8008a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e6      	bne.n	8008a1a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d12e      	bne.n	8008ab2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	e853 3f00 	ldrex	r3, [r3]
 8008a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0310 	bic.w	r3, r3, #16
 8008a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	461a      	mov	r2, r3
 8008a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a78:	61fb      	str	r3, [r7, #28]
 8008a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7c:	69b9      	ldr	r1, [r7, #24]
 8008a7e:	69fa      	ldr	r2, [r7, #28]
 8008a80:	e841 2300 	strex	r3, r2, [r1]
 8008a84:	617b      	str	r3, [r7, #20]
   return(result);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e6      	bne.n	8008a5a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b10      	cmp	r3, #16
 8008a98:	d103      	bne.n	8008aa2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2210      	movs	r2, #16
 8008aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff f958 	bl	8007d60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ab0:	e00d      	b.n	8008ace <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7f9 f8c0 	bl	8001c38 <HAL_UART_RxCpltCallback>
}
 8008ab8:	e009      	b.n	8008ace <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	8b1b      	ldrh	r3, [r3, #24]
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0208 	orr.w	r2, r2, #8
 8008aca:	b292      	uxth	r2, r2
 8008acc:	831a      	strh	r2, [r3, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	3770      	adds	r7, #112	; 0x70
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	40008000 	.word	0x40008000

08008adc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b09c      	sub	sp, #112	; 0x70
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af4:	2b22      	cmp	r3, #34	; 0x22
 8008af6:	f040 80be 	bne.w	8008c76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008b12:	4013      	ands	r3, r2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1e:	1c9a      	adds	r2, r3, #2
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 80a3 	bne.w	8008c8a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b58:	667b      	str	r3, [r7, #100]	; 0x64
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b62:	657b      	str	r3, [r7, #84]	; 0x54
 8008b64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e6      	bne.n	8008b44 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	f023 0301 	bic.w	r3, r3, #1
 8008b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3308      	adds	r3, #8
 8008b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b96:	643a      	str	r2, [r7, #64]	; 0x40
 8008b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e5      	bne.n	8008b76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a34      	ldr	r2, [pc, #208]	; (8008c94 <UART_RxISR_16BIT+0x1b8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d01f      	beq.n	8008c08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d018      	beq.n	8008c08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e6      	bne.n	8008bd6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d12e      	bne.n	8008c6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f023 0310 	bic.w	r3, r3, #16
 8008c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6979      	ldr	r1, [r7, #20]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	613b      	str	r3, [r7, #16]
   return(result);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	f003 0310 	and.w	r3, r3, #16
 8008c52:	2b10      	cmp	r3, #16
 8008c54:	d103      	bne.n	8008c5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2210      	movs	r2, #16
 8008c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff f87a 	bl	8007d60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c6c:	e00d      	b.n	8008c8a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7f8 ffe2 	bl	8001c38 <HAL_UART_RxCpltCallback>
}
 8008c74:	e009      	b.n	8008c8a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	8b1b      	ldrh	r3, [r3, #24]
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0208 	orr.w	r2, r2, #8
 8008c86:	b292      	uxth	r2, r2
 8008c88:	831a      	strh	r2, [r3, #24]
}
 8008c8a:	bf00      	nop
 8008c8c:	3770      	adds	r7, #112	; 0x70
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	40008000 	.word	0x40008000

08008c98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <std>:
 8008cac:	2300      	movs	r3, #0
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cba:	6083      	str	r3, [r0, #8]
 8008cbc:	8181      	strh	r1, [r0, #12]
 8008cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8008cc0:	81c2      	strh	r2, [r0, #14]
 8008cc2:	6183      	str	r3, [r0, #24]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	305c      	adds	r0, #92	; 0x5c
 8008cca:	f000 f9e5 	bl	8009098 <memset>
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <std+0x58>)
 8008cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <std+0x5c>)
 8008cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <std+0x60>)
 8008cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cda:	4b0d      	ldr	r3, [pc, #52]	; (8008d10 <std+0x64>)
 8008cdc:	6323      	str	r3, [r4, #48]	; 0x30
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <std+0x68>)
 8008ce0:	6224      	str	r4, [r4, #32]
 8008ce2:	429c      	cmp	r4, r3
 8008ce4:	d006      	beq.n	8008cf4 <std+0x48>
 8008ce6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008cea:	4294      	cmp	r4, r2
 8008cec:	d002      	beq.n	8008cf4 <std+0x48>
 8008cee:	33d0      	adds	r3, #208	; 0xd0
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d105      	bne.n	8008d00 <std+0x54>
 8008cf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f000 ba44 	b.w	8009188 <__retarget_lock_init_recursive>
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	08008ee9 	.word	0x08008ee9
 8008d08:	08008f0b 	.word	0x08008f0b
 8008d0c:	08008f43 	.word	0x08008f43
 8008d10:	08008f67 	.word	0x08008f67
 8008d14:	20000de0 	.word	0x20000de0

08008d18 <stdio_exit_handler>:
 8008d18:	4a02      	ldr	r2, [pc, #8]	; (8008d24 <stdio_exit_handler+0xc>)
 8008d1a:	4903      	ldr	r1, [pc, #12]	; (8008d28 <stdio_exit_handler+0x10>)
 8008d1c:	4803      	ldr	r0, [pc, #12]	; (8008d2c <stdio_exit_handler+0x14>)
 8008d1e:	f000 b869 	b.w	8008df4 <_fwalk_sglue>
 8008d22:	bf00      	nop
 8008d24:	20000160 	.word	0x20000160
 8008d28:	0800948d 	.word	0x0800948d
 8008d2c:	2000016c 	.word	0x2000016c

08008d30 <cleanup_stdio>:
 8008d30:	6841      	ldr	r1, [r0, #4]
 8008d32:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <cleanup_stdio+0x34>)
 8008d34:	4299      	cmp	r1, r3
 8008d36:	b510      	push	{r4, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	d001      	beq.n	8008d40 <cleanup_stdio+0x10>
 8008d3c:	f000 fba6 	bl	800948c <_fflush_r>
 8008d40:	68a1      	ldr	r1, [r4, #8]
 8008d42:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <cleanup_stdio+0x38>)
 8008d44:	4299      	cmp	r1, r3
 8008d46:	d002      	beq.n	8008d4e <cleanup_stdio+0x1e>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fb9f 	bl	800948c <_fflush_r>
 8008d4e:	68e1      	ldr	r1, [r4, #12]
 8008d50:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <cleanup_stdio+0x3c>)
 8008d52:	4299      	cmp	r1, r3
 8008d54:	d004      	beq.n	8008d60 <cleanup_stdio+0x30>
 8008d56:	4620      	mov	r0, r4
 8008d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d5c:	f000 bb96 	b.w	800948c <_fflush_r>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	bf00      	nop
 8008d64:	20000de0 	.word	0x20000de0
 8008d68:	20000e48 	.word	0x20000e48
 8008d6c:	20000eb0 	.word	0x20000eb0

08008d70 <global_stdio_init.part.0>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <global_stdio_init.part.0+0x30>)
 8008d74:	4c0b      	ldr	r4, [pc, #44]	; (8008da4 <global_stdio_init.part.0+0x34>)
 8008d76:	4a0c      	ldr	r2, [pc, #48]	; (8008da8 <global_stdio_init.part.0+0x38>)
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2104      	movs	r1, #4
 8008d80:	f7ff ff94 	bl	8008cac <std>
 8008d84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d88:	2201      	movs	r2, #1
 8008d8a:	2109      	movs	r1, #9
 8008d8c:	f7ff ff8e 	bl	8008cac <std>
 8008d90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d94:	2202      	movs	r2, #2
 8008d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9a:	2112      	movs	r1, #18
 8008d9c:	f7ff bf86 	b.w	8008cac <std>
 8008da0:	20000f18 	.word	0x20000f18
 8008da4:	20000de0 	.word	0x20000de0
 8008da8:	08008d19 	.word	0x08008d19

08008dac <__sfp_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__sfp_lock_acquire+0x8>)
 8008dae:	f000 b9ec 	b.w	800918a <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	20000f21 	.word	0x20000f21

08008db8 <__sfp_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__sfp_lock_release+0x8>)
 8008dba:	f000 b9e7 	b.w	800918c <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20000f21 	.word	0x20000f21

08008dc4 <__sinit>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f7ff fff0 	bl	8008dac <__sfp_lock_acquire>
 8008dcc:	6a23      	ldr	r3, [r4, #32]
 8008dce:	b11b      	cbz	r3, 8008dd8 <__sinit+0x14>
 8008dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd4:	f7ff bff0 	b.w	8008db8 <__sfp_lock_release>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <__sinit+0x28>)
 8008dda:	6223      	str	r3, [r4, #32]
 8008ddc:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <__sinit+0x2c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f5      	bne.n	8008dd0 <__sinit+0xc>
 8008de4:	f7ff ffc4 	bl	8008d70 <global_stdio_init.part.0>
 8008de8:	e7f2      	b.n	8008dd0 <__sinit+0xc>
 8008dea:	bf00      	nop
 8008dec:	08008d31 	.word	0x08008d31
 8008df0:	20000f18 	.word	0x20000f18

08008df4 <_fwalk_sglue>:
 8008df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df8:	4607      	mov	r7, r0
 8008dfa:	4688      	mov	r8, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	2600      	movs	r6, #0
 8008e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e04:	f1b9 0901 	subs.w	r9, r9, #1
 8008e08:	d505      	bpl.n	8008e16 <_fwalk_sglue+0x22>
 8008e0a:	6824      	ldr	r4, [r4, #0]
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	d1f7      	bne.n	8008e00 <_fwalk_sglue+0xc>
 8008e10:	4630      	mov	r0, r6
 8008e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d907      	bls.n	8008e2c <_fwalk_sglue+0x38>
 8008e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e20:	3301      	adds	r3, #1
 8008e22:	d003      	beq.n	8008e2c <_fwalk_sglue+0x38>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4638      	mov	r0, r7
 8008e28:	47c0      	blx	r8
 8008e2a:	4306      	orrs	r6, r0
 8008e2c:	3568      	adds	r5, #104	; 0x68
 8008e2e:	e7e9      	b.n	8008e04 <_fwalk_sglue+0x10>

08008e30 <_puts_r>:
 8008e30:	6a03      	ldr	r3, [r0, #32]
 8008e32:	b570      	push	{r4, r5, r6, lr}
 8008e34:	6884      	ldr	r4, [r0, #8]
 8008e36:	4605      	mov	r5, r0
 8008e38:	460e      	mov	r6, r1
 8008e3a:	b90b      	cbnz	r3, 8008e40 <_puts_r+0x10>
 8008e3c:	f7ff ffc2 	bl	8008dc4 <__sinit>
 8008e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e42:	07db      	lsls	r3, r3, #31
 8008e44:	d405      	bmi.n	8008e52 <_puts_r+0x22>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	0598      	lsls	r0, r3, #22
 8008e4a:	d402      	bmi.n	8008e52 <_puts_r+0x22>
 8008e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4e:	f000 f99c 	bl	800918a <__retarget_lock_acquire_recursive>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	0719      	lsls	r1, r3, #28
 8008e56:	d513      	bpl.n	8008e80 <_puts_r+0x50>
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	b18b      	cbz	r3, 8008e80 <_puts_r+0x50>
 8008e5c:	3e01      	subs	r6, #1
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e64:	3b01      	subs	r3, #1
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	b9e9      	cbnz	r1, 8008ea6 <_puts_r+0x76>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	da2e      	bge.n	8008ecc <_puts_r+0x9c>
 8008e6e:	4622      	mov	r2, r4
 8008e70:	210a      	movs	r1, #10
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f87b 	bl	8008f6e <__swbuf_r>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d007      	beq.n	8008e8c <_puts_r+0x5c>
 8008e7c:	250a      	movs	r5, #10
 8008e7e:	e007      	b.n	8008e90 <_puts_r+0x60>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f8b0 	bl	8008fe8 <__swsetup_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0e7      	beq.n	8008e5c <_puts_r+0x2c>
 8008e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8008e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e92:	07da      	lsls	r2, r3, #31
 8008e94:	d405      	bmi.n	8008ea2 <_puts_r+0x72>
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	059b      	lsls	r3, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_puts_r+0x72>
 8008e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9e:	f000 f975 	bl	800918c <__retarget_lock_release_recursive>
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	bd70      	pop	{r4, r5, r6, pc}
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	da04      	bge.n	8008eb4 <_puts_r+0x84>
 8008eaa:	69a2      	ldr	r2, [r4, #24]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	dc06      	bgt.n	8008ebe <_puts_r+0x8e>
 8008eb0:	290a      	cmp	r1, #10
 8008eb2:	d004      	beq.n	8008ebe <_puts_r+0x8e>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	6022      	str	r2, [r4, #0]
 8008eba:	7019      	strb	r1, [r3, #0]
 8008ebc:	e7cf      	b.n	8008e5e <_puts_r+0x2e>
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f000 f854 	bl	8008f6e <__swbuf_r>
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d1c9      	bne.n	8008e5e <_puts_r+0x2e>
 8008eca:	e7df      	b.n	8008e8c <_puts_r+0x5c>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	250a      	movs	r5, #10
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	6022      	str	r2, [r4, #0]
 8008ed4:	701d      	strb	r5, [r3, #0]
 8008ed6:	e7db      	b.n	8008e90 <_puts_r+0x60>

08008ed8 <puts>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <puts+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f7ff bfa7 	b.w	8008e30 <_puts_r>
 8008ee2:	bf00      	nop
 8008ee4:	200001b8 	.word	0x200001b8

08008ee8 <__sread>:
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef0:	f000 f8fc 	bl	80090ec <_read_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	bfab      	itete	ge
 8008ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008efa:	89a3      	ldrhlt	r3, [r4, #12]
 8008efc:	181b      	addge	r3, r3, r0
 8008efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f02:	bfac      	ite	ge
 8008f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f06:	81a3      	strhlt	r3, [r4, #12]
 8008f08:	bd10      	pop	{r4, pc}

08008f0a <__swrite>:
 8008f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0e:	461f      	mov	r7, r3
 8008f10:	898b      	ldrh	r3, [r1, #12]
 8008f12:	05db      	lsls	r3, r3, #23
 8008f14:	4605      	mov	r5, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	4616      	mov	r6, r2
 8008f1a:	d505      	bpl.n	8008f28 <__swrite+0x1e>
 8008f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f20:	2302      	movs	r3, #2
 8008f22:	2200      	movs	r2, #0
 8008f24:	f000 f8d0 	bl	80090c8 <_lseek_r>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	4632      	mov	r2, r6
 8008f36:	463b      	mov	r3, r7
 8008f38:	4628      	mov	r0, r5
 8008f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3e:	f000 b8e7 	b.w	8009110 <_write_r>

08008f42 <__sseek>:
 8008f42:	b510      	push	{r4, lr}
 8008f44:	460c      	mov	r4, r1
 8008f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4a:	f000 f8bd 	bl	80090c8 <_lseek_r>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	bf15      	itete	ne
 8008f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f5e:	81a3      	strheq	r3, [r4, #12]
 8008f60:	bf18      	it	ne
 8008f62:	81a3      	strhne	r3, [r4, #12]
 8008f64:	bd10      	pop	{r4, pc}

08008f66 <__sclose>:
 8008f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6a:	f000 b89d 	b.w	80090a8 <_close_r>

08008f6e <__swbuf_r>:
 8008f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f70:	460e      	mov	r6, r1
 8008f72:	4614      	mov	r4, r2
 8008f74:	4605      	mov	r5, r0
 8008f76:	b118      	cbz	r0, 8008f80 <__swbuf_r+0x12>
 8008f78:	6a03      	ldr	r3, [r0, #32]
 8008f7a:	b90b      	cbnz	r3, 8008f80 <__swbuf_r+0x12>
 8008f7c:	f7ff ff22 	bl	8008dc4 <__sinit>
 8008f80:	69a3      	ldr	r3, [r4, #24]
 8008f82:	60a3      	str	r3, [r4, #8]
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	071a      	lsls	r2, r3, #28
 8008f88:	d525      	bpl.n	8008fd6 <__swbuf_r+0x68>
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	b31b      	cbz	r3, 8008fd6 <__swbuf_r+0x68>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	6922      	ldr	r2, [r4, #16]
 8008f92:	1a98      	subs	r0, r3, r2
 8008f94:	6963      	ldr	r3, [r4, #20]
 8008f96:	b2f6      	uxtb	r6, r6
 8008f98:	4283      	cmp	r3, r0
 8008f9a:	4637      	mov	r7, r6
 8008f9c:	dc04      	bgt.n	8008fa8 <__swbuf_r+0x3a>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 fa73 	bl	800948c <_fflush_r>
 8008fa6:	b9e0      	cbnz	r0, 8008fe2 <__swbuf_r+0x74>
 8008fa8:	68a3      	ldr	r3, [r4, #8]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	60a3      	str	r3, [r4, #8]
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	6022      	str	r2, [r4, #0]
 8008fb4:	701e      	strb	r6, [r3, #0]
 8008fb6:	6962      	ldr	r2, [r4, #20]
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d004      	beq.n	8008fc8 <__swbuf_r+0x5a>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	07db      	lsls	r3, r3, #31
 8008fc2:	d506      	bpl.n	8008fd2 <__swbuf_r+0x64>
 8008fc4:	2e0a      	cmp	r6, #10
 8008fc6:	d104      	bne.n	8008fd2 <__swbuf_r+0x64>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 fa5e 	bl	800948c <_fflush_r>
 8008fd0:	b938      	cbnz	r0, 8008fe2 <__swbuf_r+0x74>
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 f805 	bl	8008fe8 <__swsetup_r>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d0d5      	beq.n	8008f8e <__swbuf_r+0x20>
 8008fe2:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe6:	e7f4      	b.n	8008fd2 <__swbuf_r+0x64>

08008fe8 <__swsetup_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4b2a      	ldr	r3, [pc, #168]	; (8009094 <__swsetup_r+0xac>)
 8008fec:	4605      	mov	r5, r0
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	b118      	cbz	r0, 8008ffc <__swsetup_r+0x14>
 8008ff4:	6a03      	ldr	r3, [r0, #32]
 8008ff6:	b90b      	cbnz	r3, 8008ffc <__swsetup_r+0x14>
 8008ff8:	f7ff fee4 	bl	8008dc4 <__sinit>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009002:	0718      	lsls	r0, r3, #28
 8009004:	d422      	bmi.n	800904c <__swsetup_r+0x64>
 8009006:	06d9      	lsls	r1, r3, #27
 8009008:	d407      	bmi.n	800901a <__swsetup_r+0x32>
 800900a:	2309      	movs	r3, #9
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	f04f 30ff 	mov.w	r0, #4294967295
 8009018:	e034      	b.n	8009084 <__swsetup_r+0x9c>
 800901a:	0758      	lsls	r0, r3, #29
 800901c:	d512      	bpl.n	8009044 <__swsetup_r+0x5c>
 800901e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009020:	b141      	cbz	r1, 8009034 <__swsetup_r+0x4c>
 8009022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009026:	4299      	cmp	r1, r3
 8009028:	d002      	beq.n	8009030 <__swsetup_r+0x48>
 800902a:	4628      	mov	r0, r5
 800902c:	f000 f8b0 	bl	8009190 <_free_r>
 8009030:	2300      	movs	r3, #0
 8009032:	6363      	str	r3, [r4, #52]	; 0x34
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	2300      	movs	r3, #0
 800903e:	6063      	str	r3, [r4, #4]
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0308 	orr.w	r3, r3, #8
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	b94b      	cbnz	r3, 8009064 <__swsetup_r+0x7c>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905a:	d003      	beq.n	8009064 <__swsetup_r+0x7c>
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f000 fa62 	bl	8009528 <__smakebuf_r>
 8009064:	89a0      	ldrh	r0, [r4, #12]
 8009066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800906a:	f010 0301 	ands.w	r3, r0, #1
 800906e:	d00a      	beq.n	8009086 <__swsetup_r+0x9e>
 8009070:	2300      	movs	r3, #0
 8009072:	60a3      	str	r3, [r4, #8]
 8009074:	6963      	ldr	r3, [r4, #20]
 8009076:	425b      	negs	r3, r3
 8009078:	61a3      	str	r3, [r4, #24]
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	b943      	cbnz	r3, 8009090 <__swsetup_r+0xa8>
 800907e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009082:	d1c4      	bne.n	800900e <__swsetup_r+0x26>
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	0781      	lsls	r1, r0, #30
 8009088:	bf58      	it	pl
 800908a:	6963      	ldrpl	r3, [r4, #20]
 800908c:	60a3      	str	r3, [r4, #8]
 800908e:	e7f4      	b.n	800907a <__swsetup_r+0x92>
 8009090:	2000      	movs	r0, #0
 8009092:	e7f7      	b.n	8009084 <__swsetup_r+0x9c>
 8009094:	200001b8 	.word	0x200001b8

08009098 <memset>:
 8009098:	4402      	add	r2, r0
 800909a:	4603      	mov	r3, r0
 800909c:	4293      	cmp	r3, r2
 800909e:	d100      	bne.n	80090a2 <memset+0xa>
 80090a0:	4770      	bx	lr
 80090a2:	f803 1b01 	strb.w	r1, [r3], #1
 80090a6:	e7f9      	b.n	800909c <memset+0x4>

080090a8 <_close_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d06      	ldr	r5, [pc, #24]	; (80090c4 <_close_r+0x1c>)
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f9 fad5 	bl	8002662 <_close>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_close_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_close_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20000f1c 	.word	0x20000f1c

080090c8 <_lseek_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d07      	ldr	r5, [pc, #28]	; (80090e8 <_lseek_r+0x20>)
 80090cc:	4604      	mov	r4, r0
 80090ce:	4608      	mov	r0, r1
 80090d0:	4611      	mov	r1, r2
 80090d2:	2200      	movs	r2, #0
 80090d4:	602a      	str	r2, [r5, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f7f9 faea 	bl	80026b0 <_lseek>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_lseek_r+0x1e>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_lseek_r+0x1e>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20000f1c 	.word	0x20000f1c

080090ec <_read_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_read_r+0x20>)
 80090f0:	4604      	mov	r4, r0
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7f9 fa78 	bl	80025f0 <_read>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_read_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_read_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20000f1c 	.word	0x20000f1c

08009110 <_write_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d07      	ldr	r5, [pc, #28]	; (8009130 <_write_r+0x20>)
 8009114:	4604      	mov	r4, r0
 8009116:	4608      	mov	r0, r1
 8009118:	4611      	mov	r1, r2
 800911a:	2200      	movs	r2, #0
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7f9 fa83 	bl	800262a <_write>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_write_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_write_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000f1c 	.word	0x20000f1c

08009134 <__errno>:
 8009134:	4b01      	ldr	r3, [pc, #4]	; (800913c <__errno+0x8>)
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	200001b8 	.word	0x200001b8

08009140 <__libc_init_array>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4d0d      	ldr	r5, [pc, #52]	; (8009178 <__libc_init_array+0x38>)
 8009144:	4c0d      	ldr	r4, [pc, #52]	; (800917c <__libc_init_array+0x3c>)
 8009146:	1b64      	subs	r4, r4, r5
 8009148:	10a4      	asrs	r4, r4, #2
 800914a:	2600      	movs	r6, #0
 800914c:	42a6      	cmp	r6, r4
 800914e:	d109      	bne.n	8009164 <__libc_init_array+0x24>
 8009150:	4d0b      	ldr	r5, [pc, #44]	; (8009180 <__libc_init_array+0x40>)
 8009152:	4c0c      	ldr	r4, [pc, #48]	; (8009184 <__libc_init_array+0x44>)
 8009154:	f000 fc5e 	bl	8009a14 <_init>
 8009158:	1b64      	subs	r4, r4, r5
 800915a:	10a4      	asrs	r4, r4, #2
 800915c:	2600      	movs	r6, #0
 800915e:	42a6      	cmp	r6, r4
 8009160:	d105      	bne.n	800916e <__libc_init_array+0x2e>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f855 3b04 	ldr.w	r3, [r5], #4
 8009168:	4798      	blx	r3
 800916a:	3601      	adds	r6, #1
 800916c:	e7ee      	b.n	800914c <__libc_init_array+0xc>
 800916e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009172:	4798      	blx	r3
 8009174:	3601      	adds	r6, #1
 8009176:	e7f2      	b.n	800915e <__libc_init_array+0x1e>
 8009178:	08009ac0 	.word	0x08009ac0
 800917c:	08009ac0 	.word	0x08009ac0
 8009180:	08009ac0 	.word	0x08009ac0
 8009184:	08009ac4 	.word	0x08009ac4

08009188 <__retarget_lock_init_recursive>:
 8009188:	4770      	bx	lr

0800918a <__retarget_lock_acquire_recursive>:
 800918a:	4770      	bx	lr

0800918c <__retarget_lock_release_recursive>:
 800918c:	4770      	bx	lr
	...

08009190 <_free_r>:
 8009190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009192:	2900      	cmp	r1, #0
 8009194:	d044      	beq.n	8009220 <_free_r+0x90>
 8009196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800919a:	9001      	str	r0, [sp, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f1a1 0404 	sub.w	r4, r1, #4
 80091a2:	bfb8      	it	lt
 80091a4:	18e4      	addlt	r4, r4, r3
 80091a6:	f000 f8df 	bl	8009368 <__malloc_lock>
 80091aa:	4a1e      	ldr	r2, [pc, #120]	; (8009224 <_free_r+0x94>)
 80091ac:	9801      	ldr	r0, [sp, #4]
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	b933      	cbnz	r3, 80091c0 <_free_r+0x30>
 80091b2:	6063      	str	r3, [r4, #4]
 80091b4:	6014      	str	r4, [r2, #0]
 80091b6:	b003      	add	sp, #12
 80091b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091bc:	f000 b8da 	b.w	8009374 <__malloc_unlock>
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d908      	bls.n	80091d6 <_free_r+0x46>
 80091c4:	6825      	ldr	r5, [r4, #0]
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	428b      	cmp	r3, r1
 80091ca:	bf01      	itttt	eq
 80091cc:	6819      	ldreq	r1, [r3, #0]
 80091ce:	685b      	ldreq	r3, [r3, #4]
 80091d0:	1949      	addeq	r1, r1, r5
 80091d2:	6021      	streq	r1, [r4, #0]
 80091d4:	e7ed      	b.n	80091b2 <_free_r+0x22>
 80091d6:	461a      	mov	r2, r3
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	b10b      	cbz	r3, 80091e0 <_free_r+0x50>
 80091dc:	42a3      	cmp	r3, r4
 80091de:	d9fa      	bls.n	80091d6 <_free_r+0x46>
 80091e0:	6811      	ldr	r1, [r2, #0]
 80091e2:	1855      	adds	r5, r2, r1
 80091e4:	42a5      	cmp	r5, r4
 80091e6:	d10b      	bne.n	8009200 <_free_r+0x70>
 80091e8:	6824      	ldr	r4, [r4, #0]
 80091ea:	4421      	add	r1, r4
 80091ec:	1854      	adds	r4, r2, r1
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	6011      	str	r1, [r2, #0]
 80091f2:	d1e0      	bne.n	80091b6 <_free_r+0x26>
 80091f4:	681c      	ldr	r4, [r3, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	6053      	str	r3, [r2, #4]
 80091fa:	440c      	add	r4, r1
 80091fc:	6014      	str	r4, [r2, #0]
 80091fe:	e7da      	b.n	80091b6 <_free_r+0x26>
 8009200:	d902      	bls.n	8009208 <_free_r+0x78>
 8009202:	230c      	movs	r3, #12
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	e7d6      	b.n	80091b6 <_free_r+0x26>
 8009208:	6825      	ldr	r5, [r4, #0]
 800920a:	1961      	adds	r1, r4, r5
 800920c:	428b      	cmp	r3, r1
 800920e:	bf04      	itt	eq
 8009210:	6819      	ldreq	r1, [r3, #0]
 8009212:	685b      	ldreq	r3, [r3, #4]
 8009214:	6063      	str	r3, [r4, #4]
 8009216:	bf04      	itt	eq
 8009218:	1949      	addeq	r1, r1, r5
 800921a:	6021      	streq	r1, [r4, #0]
 800921c:	6054      	str	r4, [r2, #4]
 800921e:	e7ca      	b.n	80091b6 <_free_r+0x26>
 8009220:	b003      	add	sp, #12
 8009222:	bd30      	pop	{r4, r5, pc}
 8009224:	20000f24 	.word	0x20000f24

08009228 <sbrk_aligned>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4e0e      	ldr	r6, [pc, #56]	; (8009264 <sbrk_aligned+0x3c>)
 800922c:	460c      	mov	r4, r1
 800922e:	6831      	ldr	r1, [r6, #0]
 8009230:	4605      	mov	r5, r0
 8009232:	b911      	cbnz	r1, 800923a <sbrk_aligned+0x12>
 8009234:	f000 f9d6 	bl	80095e4 <_sbrk_r>
 8009238:	6030      	str	r0, [r6, #0]
 800923a:	4621      	mov	r1, r4
 800923c:	4628      	mov	r0, r5
 800923e:	f000 f9d1 	bl	80095e4 <_sbrk_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d00a      	beq.n	800925c <sbrk_aligned+0x34>
 8009246:	1cc4      	adds	r4, r0, #3
 8009248:	f024 0403 	bic.w	r4, r4, #3
 800924c:	42a0      	cmp	r0, r4
 800924e:	d007      	beq.n	8009260 <sbrk_aligned+0x38>
 8009250:	1a21      	subs	r1, r4, r0
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f9c6 	bl	80095e4 <_sbrk_r>
 8009258:	3001      	adds	r0, #1
 800925a:	d101      	bne.n	8009260 <sbrk_aligned+0x38>
 800925c:	f04f 34ff 	mov.w	r4, #4294967295
 8009260:	4620      	mov	r0, r4
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	20000f28 	.word	0x20000f28

08009268 <_malloc_r>:
 8009268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926c:	1ccd      	adds	r5, r1, #3
 800926e:	f025 0503 	bic.w	r5, r5, #3
 8009272:	3508      	adds	r5, #8
 8009274:	2d0c      	cmp	r5, #12
 8009276:	bf38      	it	cc
 8009278:	250c      	movcc	r5, #12
 800927a:	2d00      	cmp	r5, #0
 800927c:	4607      	mov	r7, r0
 800927e:	db01      	blt.n	8009284 <_malloc_r+0x1c>
 8009280:	42a9      	cmp	r1, r5
 8009282:	d905      	bls.n	8009290 <_malloc_r+0x28>
 8009284:	230c      	movs	r3, #12
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	2600      	movs	r6, #0
 800928a:	4630      	mov	r0, r6
 800928c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009290:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009364 <_malloc_r+0xfc>
 8009294:	f000 f868 	bl	8009368 <__malloc_lock>
 8009298:	f8d8 3000 	ldr.w	r3, [r8]
 800929c:	461c      	mov	r4, r3
 800929e:	bb5c      	cbnz	r4, 80092f8 <_malloc_r+0x90>
 80092a0:	4629      	mov	r1, r5
 80092a2:	4638      	mov	r0, r7
 80092a4:	f7ff ffc0 	bl	8009228 <sbrk_aligned>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	4604      	mov	r4, r0
 80092ac:	d155      	bne.n	800935a <_malloc_r+0xf2>
 80092ae:	f8d8 4000 	ldr.w	r4, [r8]
 80092b2:	4626      	mov	r6, r4
 80092b4:	2e00      	cmp	r6, #0
 80092b6:	d145      	bne.n	8009344 <_malloc_r+0xdc>
 80092b8:	2c00      	cmp	r4, #0
 80092ba:	d048      	beq.n	800934e <_malloc_r+0xe6>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	4631      	mov	r1, r6
 80092c0:	4638      	mov	r0, r7
 80092c2:	eb04 0903 	add.w	r9, r4, r3
 80092c6:	f000 f98d 	bl	80095e4 <_sbrk_r>
 80092ca:	4581      	cmp	r9, r0
 80092cc:	d13f      	bne.n	800934e <_malloc_r+0xe6>
 80092ce:	6821      	ldr	r1, [r4, #0]
 80092d0:	1a6d      	subs	r5, r5, r1
 80092d2:	4629      	mov	r1, r5
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff ffa7 	bl	8009228 <sbrk_aligned>
 80092da:	3001      	adds	r0, #1
 80092dc:	d037      	beq.n	800934e <_malloc_r+0xe6>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	442b      	add	r3, r5
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	f8d8 3000 	ldr.w	r3, [r8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d038      	beq.n	800935e <_malloc_r+0xf6>
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	42a2      	cmp	r2, r4
 80092f0:	d12b      	bne.n	800934a <_malloc_r+0xe2>
 80092f2:	2200      	movs	r2, #0
 80092f4:	605a      	str	r2, [r3, #4]
 80092f6:	e00f      	b.n	8009318 <_malloc_r+0xb0>
 80092f8:	6822      	ldr	r2, [r4, #0]
 80092fa:	1b52      	subs	r2, r2, r5
 80092fc:	d41f      	bmi.n	800933e <_malloc_r+0xd6>
 80092fe:	2a0b      	cmp	r2, #11
 8009300:	d917      	bls.n	8009332 <_malloc_r+0xca>
 8009302:	1961      	adds	r1, r4, r5
 8009304:	42a3      	cmp	r3, r4
 8009306:	6025      	str	r5, [r4, #0]
 8009308:	bf18      	it	ne
 800930a:	6059      	strne	r1, [r3, #4]
 800930c:	6863      	ldr	r3, [r4, #4]
 800930e:	bf08      	it	eq
 8009310:	f8c8 1000 	streq.w	r1, [r8]
 8009314:	5162      	str	r2, [r4, r5]
 8009316:	604b      	str	r3, [r1, #4]
 8009318:	4638      	mov	r0, r7
 800931a:	f104 060b 	add.w	r6, r4, #11
 800931e:	f000 f829 	bl	8009374 <__malloc_unlock>
 8009322:	f026 0607 	bic.w	r6, r6, #7
 8009326:	1d23      	adds	r3, r4, #4
 8009328:	1af2      	subs	r2, r6, r3
 800932a:	d0ae      	beq.n	800928a <_malloc_r+0x22>
 800932c:	1b9b      	subs	r3, r3, r6
 800932e:	50a3      	str	r3, [r4, r2]
 8009330:	e7ab      	b.n	800928a <_malloc_r+0x22>
 8009332:	42a3      	cmp	r3, r4
 8009334:	6862      	ldr	r2, [r4, #4]
 8009336:	d1dd      	bne.n	80092f4 <_malloc_r+0x8c>
 8009338:	f8c8 2000 	str.w	r2, [r8]
 800933c:	e7ec      	b.n	8009318 <_malloc_r+0xb0>
 800933e:	4623      	mov	r3, r4
 8009340:	6864      	ldr	r4, [r4, #4]
 8009342:	e7ac      	b.n	800929e <_malloc_r+0x36>
 8009344:	4634      	mov	r4, r6
 8009346:	6876      	ldr	r6, [r6, #4]
 8009348:	e7b4      	b.n	80092b4 <_malloc_r+0x4c>
 800934a:	4613      	mov	r3, r2
 800934c:	e7cc      	b.n	80092e8 <_malloc_r+0x80>
 800934e:	230c      	movs	r3, #12
 8009350:	603b      	str	r3, [r7, #0]
 8009352:	4638      	mov	r0, r7
 8009354:	f000 f80e 	bl	8009374 <__malloc_unlock>
 8009358:	e797      	b.n	800928a <_malloc_r+0x22>
 800935a:	6025      	str	r5, [r4, #0]
 800935c:	e7dc      	b.n	8009318 <_malloc_r+0xb0>
 800935e:	605b      	str	r3, [r3, #4]
 8009360:	deff      	udf	#255	; 0xff
 8009362:	bf00      	nop
 8009364:	20000f24 	.word	0x20000f24

08009368 <__malloc_lock>:
 8009368:	4801      	ldr	r0, [pc, #4]	; (8009370 <__malloc_lock+0x8>)
 800936a:	f7ff bf0e 	b.w	800918a <__retarget_lock_acquire_recursive>
 800936e:	bf00      	nop
 8009370:	20000f20 	.word	0x20000f20

08009374 <__malloc_unlock>:
 8009374:	4801      	ldr	r0, [pc, #4]	; (800937c <__malloc_unlock+0x8>)
 8009376:	f7ff bf09 	b.w	800918c <__retarget_lock_release_recursive>
 800937a:	bf00      	nop
 800937c:	20000f20 	.word	0x20000f20

08009380 <__sflush_r>:
 8009380:	898a      	ldrh	r2, [r1, #12]
 8009382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009386:	4605      	mov	r5, r0
 8009388:	0710      	lsls	r0, r2, #28
 800938a:	460c      	mov	r4, r1
 800938c:	d458      	bmi.n	8009440 <__sflush_r+0xc0>
 800938e:	684b      	ldr	r3, [r1, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	dc05      	bgt.n	80093a0 <__sflush_r+0x20>
 8009394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	dc02      	bgt.n	80093a0 <__sflush_r+0x20>
 800939a:	2000      	movs	r0, #0
 800939c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	d0f9      	beq.n	800939a <__sflush_r+0x1a>
 80093a6:	2300      	movs	r3, #0
 80093a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093ac:	682f      	ldr	r7, [r5, #0]
 80093ae:	6a21      	ldr	r1, [r4, #32]
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	d032      	beq.n	800941a <__sflush_r+0x9a>
 80093b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	075a      	lsls	r2, r3, #29
 80093ba:	d505      	bpl.n	80093c8 <__sflush_r+0x48>
 80093bc:	6863      	ldr	r3, [r4, #4]
 80093be:	1ac0      	subs	r0, r0, r3
 80093c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093c2:	b10b      	cbz	r3, 80093c8 <__sflush_r+0x48>
 80093c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093c6:	1ac0      	subs	r0, r0, r3
 80093c8:	2300      	movs	r3, #0
 80093ca:	4602      	mov	r2, r0
 80093cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ce:	6a21      	ldr	r1, [r4, #32]
 80093d0:	4628      	mov	r0, r5
 80093d2:	47b0      	blx	r6
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	d106      	bne.n	80093e8 <__sflush_r+0x68>
 80093da:	6829      	ldr	r1, [r5, #0]
 80093dc:	291d      	cmp	r1, #29
 80093de:	d82b      	bhi.n	8009438 <__sflush_r+0xb8>
 80093e0:	4a29      	ldr	r2, [pc, #164]	; (8009488 <__sflush_r+0x108>)
 80093e2:	410a      	asrs	r2, r1
 80093e4:	07d6      	lsls	r6, r2, #31
 80093e6:	d427      	bmi.n	8009438 <__sflush_r+0xb8>
 80093e8:	2200      	movs	r2, #0
 80093ea:	6062      	str	r2, [r4, #4]
 80093ec:	04d9      	lsls	r1, r3, #19
 80093ee:	6922      	ldr	r2, [r4, #16]
 80093f0:	6022      	str	r2, [r4, #0]
 80093f2:	d504      	bpl.n	80093fe <__sflush_r+0x7e>
 80093f4:	1c42      	adds	r2, r0, #1
 80093f6:	d101      	bne.n	80093fc <__sflush_r+0x7c>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b903      	cbnz	r3, 80093fe <__sflush_r+0x7e>
 80093fc:	6560      	str	r0, [r4, #84]	; 0x54
 80093fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009400:	602f      	str	r7, [r5, #0]
 8009402:	2900      	cmp	r1, #0
 8009404:	d0c9      	beq.n	800939a <__sflush_r+0x1a>
 8009406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800940a:	4299      	cmp	r1, r3
 800940c:	d002      	beq.n	8009414 <__sflush_r+0x94>
 800940e:	4628      	mov	r0, r5
 8009410:	f7ff febe 	bl	8009190 <_free_r>
 8009414:	2000      	movs	r0, #0
 8009416:	6360      	str	r0, [r4, #52]	; 0x34
 8009418:	e7c0      	b.n	800939c <__sflush_r+0x1c>
 800941a:	2301      	movs	r3, #1
 800941c:	4628      	mov	r0, r5
 800941e:	47b0      	blx	r6
 8009420:	1c41      	adds	r1, r0, #1
 8009422:	d1c8      	bne.n	80093b6 <__sflush_r+0x36>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0c5      	beq.n	80093b6 <__sflush_r+0x36>
 800942a:	2b1d      	cmp	r3, #29
 800942c:	d001      	beq.n	8009432 <__sflush_r+0xb2>
 800942e:	2b16      	cmp	r3, #22
 8009430:	d101      	bne.n	8009436 <__sflush_r+0xb6>
 8009432:	602f      	str	r7, [r5, #0]
 8009434:	e7b1      	b.n	800939a <__sflush_r+0x1a>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	e7ad      	b.n	800939c <__sflush_r+0x1c>
 8009440:	690f      	ldr	r7, [r1, #16]
 8009442:	2f00      	cmp	r7, #0
 8009444:	d0a9      	beq.n	800939a <__sflush_r+0x1a>
 8009446:	0793      	lsls	r3, r2, #30
 8009448:	680e      	ldr	r6, [r1, #0]
 800944a:	bf08      	it	eq
 800944c:	694b      	ldreq	r3, [r1, #20]
 800944e:	600f      	str	r7, [r1, #0]
 8009450:	bf18      	it	ne
 8009452:	2300      	movne	r3, #0
 8009454:	eba6 0807 	sub.w	r8, r6, r7
 8009458:	608b      	str	r3, [r1, #8]
 800945a:	f1b8 0f00 	cmp.w	r8, #0
 800945e:	dd9c      	ble.n	800939a <__sflush_r+0x1a>
 8009460:	6a21      	ldr	r1, [r4, #32]
 8009462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009464:	4643      	mov	r3, r8
 8009466:	463a      	mov	r2, r7
 8009468:	4628      	mov	r0, r5
 800946a:	47b0      	blx	r6
 800946c:	2800      	cmp	r0, #0
 800946e:	dc06      	bgt.n	800947e <__sflush_r+0xfe>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	e78e      	b.n	800939c <__sflush_r+0x1c>
 800947e:	4407      	add	r7, r0
 8009480:	eba8 0800 	sub.w	r8, r8, r0
 8009484:	e7e9      	b.n	800945a <__sflush_r+0xda>
 8009486:	bf00      	nop
 8009488:	dfbffffe 	.word	0xdfbffffe

0800948c <_fflush_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	4605      	mov	r5, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b913      	cbnz	r3, 800949c <_fflush_r+0x10>
 8009496:	2500      	movs	r5, #0
 8009498:	4628      	mov	r0, r5
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	b118      	cbz	r0, 80094a6 <_fflush_r+0x1a>
 800949e:	6a03      	ldr	r3, [r0, #32]
 80094a0:	b90b      	cbnz	r3, 80094a6 <_fflush_r+0x1a>
 80094a2:	f7ff fc8f 	bl	8008dc4 <__sinit>
 80094a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0f3      	beq.n	8009496 <_fflush_r+0xa>
 80094ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094b0:	07d0      	lsls	r0, r2, #31
 80094b2:	d404      	bmi.n	80094be <_fflush_r+0x32>
 80094b4:	0599      	lsls	r1, r3, #22
 80094b6:	d402      	bmi.n	80094be <_fflush_r+0x32>
 80094b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ba:	f7ff fe66 	bl	800918a <__retarget_lock_acquire_recursive>
 80094be:	4628      	mov	r0, r5
 80094c0:	4621      	mov	r1, r4
 80094c2:	f7ff ff5d 	bl	8009380 <__sflush_r>
 80094c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094c8:	07da      	lsls	r2, r3, #31
 80094ca:	4605      	mov	r5, r0
 80094cc:	d4e4      	bmi.n	8009498 <_fflush_r+0xc>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	059b      	lsls	r3, r3, #22
 80094d2:	d4e1      	bmi.n	8009498 <_fflush_r+0xc>
 80094d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094d6:	f7ff fe59 	bl	800918c <__retarget_lock_release_recursive>
 80094da:	e7dd      	b.n	8009498 <_fflush_r+0xc>

080094dc <__swhatbuf_r>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	2900      	cmp	r1, #0
 80094e6:	b096      	sub	sp, #88	; 0x58
 80094e8:	4615      	mov	r5, r2
 80094ea:	461e      	mov	r6, r3
 80094ec:	da0d      	bge.n	800950a <__swhatbuf_r+0x2e>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094f4:	f04f 0100 	mov.w	r1, #0
 80094f8:	bf0c      	ite	eq
 80094fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094fe:	2340      	movne	r3, #64	; 0x40
 8009500:	2000      	movs	r0, #0
 8009502:	6031      	str	r1, [r6, #0]
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	b016      	add	sp, #88	; 0x58
 8009508:	bd70      	pop	{r4, r5, r6, pc}
 800950a:	466a      	mov	r2, sp
 800950c:	f000 f848 	bl	80095a0 <_fstat_r>
 8009510:	2800      	cmp	r0, #0
 8009512:	dbec      	blt.n	80094ee <__swhatbuf_r+0x12>
 8009514:	9901      	ldr	r1, [sp, #4]
 8009516:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800951a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800951e:	4259      	negs	r1, r3
 8009520:	4159      	adcs	r1, r3
 8009522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009526:	e7eb      	b.n	8009500 <__swhatbuf_r+0x24>

08009528 <__smakebuf_r>:
 8009528:	898b      	ldrh	r3, [r1, #12]
 800952a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800952c:	079d      	lsls	r5, r3, #30
 800952e:	4606      	mov	r6, r0
 8009530:	460c      	mov	r4, r1
 8009532:	d507      	bpl.n	8009544 <__smakebuf_r+0x1c>
 8009534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	6123      	str	r3, [r4, #16]
 800953c:	2301      	movs	r3, #1
 800953e:	6163      	str	r3, [r4, #20]
 8009540:	b002      	add	sp, #8
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	ab01      	add	r3, sp, #4
 8009546:	466a      	mov	r2, sp
 8009548:	f7ff ffc8 	bl	80094dc <__swhatbuf_r>
 800954c:	9900      	ldr	r1, [sp, #0]
 800954e:	4605      	mov	r5, r0
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff fe89 	bl	8009268 <_malloc_r>
 8009556:	b948      	cbnz	r0, 800956c <__smakebuf_r+0x44>
 8009558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d4ef      	bmi.n	8009540 <__smakebuf_r+0x18>
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	f043 0302 	orr.w	r3, r3, #2
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	e7e3      	b.n	8009534 <__smakebuf_r+0xc>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	6020      	str	r0, [r4, #0]
 8009570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	9b00      	ldr	r3, [sp, #0]
 8009578:	6163      	str	r3, [r4, #20]
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	6120      	str	r0, [r4, #16]
 800957e:	b15b      	cbz	r3, 8009598 <__smakebuf_r+0x70>
 8009580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009584:	4630      	mov	r0, r6
 8009586:	f000 f81d 	bl	80095c4 <_isatty_r>
 800958a:	b128      	cbz	r0, 8009598 <__smakebuf_r+0x70>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f023 0303 	bic.w	r3, r3, #3
 8009592:	f043 0301 	orr.w	r3, r3, #1
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	431d      	orrs	r5, r3
 800959c:	81a5      	strh	r5, [r4, #12]
 800959e:	e7cf      	b.n	8009540 <__smakebuf_r+0x18>

080095a0 <_fstat_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d07      	ldr	r5, [pc, #28]	; (80095c0 <_fstat_r+0x20>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	f7f9 f864 	bl	800267a <_fstat>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d102      	bne.n	80095bc <_fstat_r+0x1c>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b103      	cbz	r3, 80095bc <_fstat_r+0x1c>
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	bd38      	pop	{r3, r4, r5, pc}
 80095be:	bf00      	nop
 80095c0:	20000f1c 	.word	0x20000f1c

080095c4 <_isatty_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4d06      	ldr	r5, [pc, #24]	; (80095e0 <_isatty_r+0x1c>)
 80095c8:	2300      	movs	r3, #0
 80095ca:	4604      	mov	r4, r0
 80095cc:	4608      	mov	r0, r1
 80095ce:	602b      	str	r3, [r5, #0]
 80095d0:	f7f9 f863 	bl	800269a <_isatty>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_isatty_r+0x1a>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_isatty_r+0x1a>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	20000f1c 	.word	0x20000f1c

080095e4 <_sbrk_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	; (8009600 <_sbrk_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f9 f86c 	bl	80026cc <_sbrk>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_sbrk_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_sbrk_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20000f1c 	.word	0x20000f1c
 8009604:	00000000 	.word	0x00000000

08009608 <exp>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	ed2d 8b02 	vpush	{d8}
 800960e:	ec55 4b10 	vmov	r4, r5, d0
 8009612:	f000 f84d 	bl	80096b0 <__ieee754_exp>
 8009616:	eeb0 8a40 	vmov.f32	s16, s0
 800961a:	eef0 8a60 	vmov.f32	s17, s1
 800961e:	ec45 4b10 	vmov	d0, r4, r5
 8009622:	f000 f839 	bl	8009698 <finite>
 8009626:	b168      	cbz	r0, 8009644 <exp+0x3c>
 8009628:	a317      	add	r3, pc, #92	; (adr r3, 8009688 <exp+0x80>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f7 fa15 	bl	8000a60 <__aeabi_dcmpgt>
 8009636:	b160      	cbz	r0, 8009652 <exp+0x4a>
 8009638:	f7ff fd7c 	bl	8009134 <__errno>
 800963c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8009678 <exp+0x70>
 8009640:	2322      	movs	r3, #34	; 0x22
 8009642:	6003      	str	r3, [r0, #0]
 8009644:	eeb0 0a48 	vmov.f32	s0, s16
 8009648:	eef0 0a68 	vmov.f32	s1, s17
 800964c:	ecbd 8b02 	vpop	{d8}
 8009650:	bd38      	pop	{r3, r4, r5, pc}
 8009652:	a30f      	add	r3, pc, #60	; (adr r3, 8009690 <exp+0x88>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	f7f7 f9e2 	bl	8000a24 <__aeabi_dcmplt>
 8009660:	2800      	cmp	r0, #0
 8009662:	d0ef      	beq.n	8009644 <exp+0x3c>
 8009664:	f7ff fd66 	bl	8009134 <__errno>
 8009668:	2322      	movs	r3, #34	; 0x22
 800966a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8009680 <exp+0x78>
 800966e:	6003      	str	r3, [r0, #0]
 8009670:	e7e8      	b.n	8009644 <exp+0x3c>
 8009672:	bf00      	nop
 8009674:	f3af 8000 	nop.w
 8009678:	00000000 	.word	0x00000000
 800967c:	7ff00000 	.word	0x7ff00000
	...
 8009688:	fefa39ef 	.word	0xfefa39ef
 800968c:	40862e42 	.word	0x40862e42
 8009690:	d52d3051 	.word	0xd52d3051
 8009694:	c0874910 	.word	0xc0874910

08009698 <finite>:
 8009698:	b082      	sub	sp, #8
 800969a:	ed8d 0b00 	vstr	d0, [sp]
 800969e:	9801      	ldr	r0, [sp, #4]
 80096a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80096a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80096a8:	0fc0      	lsrs	r0, r0, #31
 80096aa:	b002      	add	sp, #8
 80096ac:	4770      	bx	lr
	...

080096b0 <__ieee754_exp>:
 80096b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	ec55 4b10 	vmov	r4, r5, d0
 80096b8:	49b5      	ldr	r1, [pc, #724]	; (8009990 <__ieee754_exp+0x2e0>)
 80096ba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80096be:	428a      	cmp	r2, r1
 80096c0:	ed2d 8b04 	vpush	{d8-d9}
 80096c4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80096c8:	d93b      	bls.n	8009742 <__ieee754_exp+0x92>
 80096ca:	49b2      	ldr	r1, [pc, #712]	; (8009994 <__ieee754_exp+0x2e4>)
 80096cc:	428a      	cmp	r2, r1
 80096ce:	d916      	bls.n	80096fe <__ieee754_exp+0x4e>
 80096d0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80096d4:	4323      	orrs	r3, r4
 80096d6:	ee10 2a10 	vmov	r2, s0
 80096da:	d007      	beq.n	80096ec <__ieee754_exp+0x3c>
 80096dc:	462b      	mov	r3, r5
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7f6 fd77 	bl	80001d4 <__adddf3>
 80096e6:	4604      	mov	r4, r0
 80096e8:	460d      	mov	r5, r1
 80096ea:	e002      	b.n	80096f2 <__ieee754_exp+0x42>
 80096ec:	b10e      	cbz	r6, 80096f2 <__ieee754_exp+0x42>
 80096ee:	2400      	movs	r4, #0
 80096f0:	2500      	movs	r5, #0
 80096f2:	ecbd 8b04 	vpop	{d8-d9}
 80096f6:	ec45 4b10 	vmov	d0, r4, r5
 80096fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fe:	a38e      	add	r3, pc, #568	; (adr r3, 8009938 <__ieee754_exp+0x288>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	ee10 0a10 	vmov	r0, s0
 8009708:	4629      	mov	r1, r5
 800970a:	f7f7 f9a9 	bl	8000a60 <__aeabi_dcmpgt>
 800970e:	4607      	mov	r7, r0
 8009710:	b130      	cbz	r0, 8009720 <__ieee754_exp+0x70>
 8009712:	ecbd 8b04 	vpop	{d8-d9}
 8009716:	2000      	movs	r0, #0
 8009718:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	f000 b971 	b.w	8009a02 <__math_oflow>
 8009720:	a387      	add	r3, pc, #540	; (adr r3, 8009940 <__ieee754_exp+0x290>)
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f7 f97b 	bl	8000a24 <__aeabi_dcmplt>
 800972e:	2800      	cmp	r0, #0
 8009730:	f000 808b 	beq.w	800984a <__ieee754_exp+0x19a>
 8009734:	ecbd 8b04 	vpop	{d8-d9}
 8009738:	4638      	mov	r0, r7
 800973a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800973e:	f000 b957 	b.w	80099f0 <__math_uflow>
 8009742:	4b95      	ldr	r3, [pc, #596]	; (8009998 <__ieee754_exp+0x2e8>)
 8009744:	429a      	cmp	r2, r3
 8009746:	f240 80ac 	bls.w	80098a2 <__ieee754_exp+0x1f2>
 800974a:	4b94      	ldr	r3, [pc, #592]	; (800999c <__ieee754_exp+0x2ec>)
 800974c:	429a      	cmp	r2, r3
 800974e:	d87c      	bhi.n	800984a <__ieee754_exp+0x19a>
 8009750:	4b93      	ldr	r3, [pc, #588]	; (80099a0 <__ieee754_exp+0x2f0>)
 8009752:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	ee10 0a10 	vmov	r0, s0
 800975e:	4629      	mov	r1, r5
 8009760:	f7f6 fd36 	bl	80001d0 <__aeabi_dsub>
 8009764:	4b8f      	ldr	r3, [pc, #572]	; (80099a4 <__ieee754_exp+0x2f4>)
 8009766:	00f7      	lsls	r7, r6, #3
 8009768:	443b      	add	r3, r7
 800976a:	ed93 7b00 	vldr	d7, [r3]
 800976e:	f1c6 0a01 	rsb	sl, r6, #1
 8009772:	4680      	mov	r8, r0
 8009774:	4689      	mov	r9, r1
 8009776:	ebaa 0a06 	sub.w	sl, sl, r6
 800977a:	eeb0 8a47 	vmov.f32	s16, s14
 800977e:	eef0 8a67 	vmov.f32	s17, s15
 8009782:	ec53 2b18 	vmov	r2, r3, d8
 8009786:	4640      	mov	r0, r8
 8009788:	4649      	mov	r1, r9
 800978a:	f7f6 fd21 	bl	80001d0 <__aeabi_dsub>
 800978e:	4604      	mov	r4, r0
 8009790:	460d      	mov	r5, r1
 8009792:	4622      	mov	r2, r4
 8009794:	462b      	mov	r3, r5
 8009796:	4620      	mov	r0, r4
 8009798:	4629      	mov	r1, r5
 800979a:	f7f6 fed1 	bl	8000540 <__aeabi_dmul>
 800979e:	a36a      	add	r3, pc, #424	; (adr r3, 8009948 <__ieee754_exp+0x298>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	4606      	mov	r6, r0
 80097a6:	460f      	mov	r7, r1
 80097a8:	f7f6 feca 	bl	8000540 <__aeabi_dmul>
 80097ac:	a368      	add	r3, pc, #416	; (adr r3, 8009950 <__ieee754_exp+0x2a0>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f7f6 fd0d 	bl	80001d0 <__aeabi_dsub>
 80097b6:	4632      	mov	r2, r6
 80097b8:	463b      	mov	r3, r7
 80097ba:	f7f6 fec1 	bl	8000540 <__aeabi_dmul>
 80097be:	a366      	add	r3, pc, #408	; (adr r3, 8009958 <__ieee754_exp+0x2a8>)
 80097c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c4:	f7f6 fd06 	bl	80001d4 <__adddf3>
 80097c8:	4632      	mov	r2, r6
 80097ca:	463b      	mov	r3, r7
 80097cc:	f7f6 feb8 	bl	8000540 <__aeabi_dmul>
 80097d0:	a363      	add	r3, pc, #396	; (adr r3, 8009960 <__ieee754_exp+0x2b0>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f7f6 fcfb 	bl	80001d0 <__aeabi_dsub>
 80097da:	4632      	mov	r2, r6
 80097dc:	463b      	mov	r3, r7
 80097de:	f7f6 feaf 	bl	8000540 <__aeabi_dmul>
 80097e2:	a361      	add	r3, pc, #388	; (adr r3, 8009968 <__ieee754_exp+0x2b8>)
 80097e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e8:	f7f6 fcf4 	bl	80001d4 <__adddf3>
 80097ec:	4632      	mov	r2, r6
 80097ee:	463b      	mov	r3, r7
 80097f0:	f7f6 fea6 	bl	8000540 <__aeabi_dmul>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4620      	mov	r0, r4
 80097fa:	4629      	mov	r1, r5
 80097fc:	f7f6 fce8 	bl	80001d0 <__aeabi_dsub>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	4620      	mov	r0, r4
 800980a:	4629      	mov	r1, r5
 800980c:	f7f6 fe98 	bl	8000540 <__aeabi_dmul>
 8009810:	ec41 0b19 	vmov	d9, r0, r1
 8009814:	f1ba 0f00 	cmp.w	sl, #0
 8009818:	d15d      	bne.n	80098d6 <__ieee754_exp+0x226>
 800981a:	2200      	movs	r2, #0
 800981c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009820:	4630      	mov	r0, r6
 8009822:	4639      	mov	r1, r7
 8009824:	f7f6 fcd4 	bl	80001d0 <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	ec51 0b19 	vmov	r0, r1, d9
 8009830:	f7f6 ffb0 	bl	8000794 <__aeabi_ddiv>
 8009834:	4622      	mov	r2, r4
 8009836:	462b      	mov	r3, r5
 8009838:	f7f6 fcca 	bl	80001d0 <__aeabi_dsub>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	2000      	movs	r0, #0
 8009842:	4959      	ldr	r1, [pc, #356]	; (80099a8 <__ieee754_exp+0x2f8>)
 8009844:	f7f6 fcc4 	bl	80001d0 <__aeabi_dsub>
 8009848:	e74d      	b.n	80096e6 <__ieee754_exp+0x36>
 800984a:	4b58      	ldr	r3, [pc, #352]	; (80099ac <__ieee754_exp+0x2fc>)
 800984c:	4620      	mov	r0, r4
 800984e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009852:	4629      	mov	r1, r5
 8009854:	a346      	add	r3, pc, #280	; (adr r3, 8009970 <__ieee754_exp+0x2c0>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fe71 	bl	8000540 <__aeabi_dmul>
 800985e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009862:	f7f6 fcb7 	bl	80001d4 <__adddf3>
 8009866:	f7f7 f905 	bl	8000a74 <__aeabi_d2iz>
 800986a:	4682      	mov	sl, r0
 800986c:	f7f6 fdfe 	bl	800046c <__aeabi_i2d>
 8009870:	a341      	add	r3, pc, #260	; (adr r3, 8009978 <__ieee754_exp+0x2c8>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	4606      	mov	r6, r0
 8009878:	460f      	mov	r7, r1
 800987a:	f7f6 fe61 	bl	8000540 <__aeabi_dmul>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4620      	mov	r0, r4
 8009884:	4629      	mov	r1, r5
 8009886:	f7f6 fca3 	bl	80001d0 <__aeabi_dsub>
 800988a:	a33d      	add	r3, pc, #244	; (adr r3, 8009980 <__ieee754_exp+0x2d0>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	4680      	mov	r8, r0
 8009892:	4689      	mov	r9, r1
 8009894:	4630      	mov	r0, r6
 8009896:	4639      	mov	r1, r7
 8009898:	f7f6 fe52 	bl	8000540 <__aeabi_dmul>
 800989c:	ec41 0b18 	vmov	d8, r0, r1
 80098a0:	e76f      	b.n	8009782 <__ieee754_exp+0xd2>
 80098a2:	4b43      	ldr	r3, [pc, #268]	; (80099b0 <__ieee754_exp+0x300>)
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d811      	bhi.n	80098cc <__ieee754_exp+0x21c>
 80098a8:	a337      	add	r3, pc, #220	; (adr r3, 8009988 <__ieee754_exp+0x2d8>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	ee10 0a10 	vmov	r0, s0
 80098b2:	4629      	mov	r1, r5
 80098b4:	f7f6 fc8e 	bl	80001d4 <__adddf3>
 80098b8:	4b3b      	ldr	r3, [pc, #236]	; (80099a8 <__ieee754_exp+0x2f8>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7f7 f8d0 	bl	8000a60 <__aeabi_dcmpgt>
 80098c0:	b138      	cbz	r0, 80098d2 <__ieee754_exp+0x222>
 80098c2:	4b39      	ldr	r3, [pc, #228]	; (80099a8 <__ieee754_exp+0x2f8>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	e70a      	b.n	80096e2 <__ieee754_exp+0x32>
 80098cc:	f04f 0a00 	mov.w	sl, #0
 80098d0:	e75f      	b.n	8009792 <__ieee754_exp+0xe2>
 80098d2:	4682      	mov	sl, r0
 80098d4:	e75d      	b.n	8009792 <__ieee754_exp+0xe2>
 80098d6:	4632      	mov	r2, r6
 80098d8:	463b      	mov	r3, r7
 80098da:	2000      	movs	r0, #0
 80098dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80098e0:	f7f6 fc76 	bl	80001d0 <__aeabi_dsub>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	ec51 0b19 	vmov	r0, r1, d9
 80098ec:	f7f6 ff52 	bl	8000794 <__aeabi_ddiv>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	ec51 0b18 	vmov	r0, r1, d8
 80098f8:	f7f6 fc6a 	bl	80001d0 <__aeabi_dsub>
 80098fc:	4642      	mov	r2, r8
 80098fe:	464b      	mov	r3, r9
 8009900:	f7f6 fc66 	bl	80001d0 <__aeabi_dsub>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	2000      	movs	r0, #0
 800990a:	4927      	ldr	r1, [pc, #156]	; (80099a8 <__ieee754_exp+0x2f8>)
 800990c:	f7f6 fc60 	bl	80001d0 <__aeabi_dsub>
 8009910:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009914:	4592      	cmp	sl, r2
 8009916:	db02      	blt.n	800991e <__ieee754_exp+0x26e>
 8009918:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800991c:	e6e3      	b.n	80096e6 <__ieee754_exp+0x36>
 800991e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8009922:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009926:	2200      	movs	r2, #0
 8009928:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800992c:	f7f6 fe08 	bl	8000540 <__aeabi_dmul>
 8009930:	e6d9      	b.n	80096e6 <__ieee754_exp+0x36>
 8009932:	bf00      	nop
 8009934:	f3af 8000 	nop.w
 8009938:	fefa39ef 	.word	0xfefa39ef
 800993c:	40862e42 	.word	0x40862e42
 8009940:	d52d3051 	.word	0xd52d3051
 8009944:	c0874910 	.word	0xc0874910
 8009948:	72bea4d0 	.word	0x72bea4d0
 800994c:	3e663769 	.word	0x3e663769
 8009950:	c5d26bf1 	.word	0xc5d26bf1
 8009954:	3ebbbd41 	.word	0x3ebbbd41
 8009958:	af25de2c 	.word	0xaf25de2c
 800995c:	3f11566a 	.word	0x3f11566a
 8009960:	16bebd93 	.word	0x16bebd93
 8009964:	3f66c16c 	.word	0x3f66c16c
 8009968:	5555553e 	.word	0x5555553e
 800996c:	3fc55555 	.word	0x3fc55555
 8009970:	652b82fe 	.word	0x652b82fe
 8009974:	3ff71547 	.word	0x3ff71547
 8009978:	fee00000 	.word	0xfee00000
 800997c:	3fe62e42 	.word	0x3fe62e42
 8009980:	35793c76 	.word	0x35793c76
 8009984:	3dea39ef 	.word	0x3dea39ef
 8009988:	8800759c 	.word	0x8800759c
 800998c:	7e37e43c 	.word	0x7e37e43c
 8009990:	40862e41 	.word	0x40862e41
 8009994:	7fefffff 	.word	0x7fefffff
 8009998:	3fd62e42 	.word	0x3fd62e42
 800999c:	3ff0a2b1 	.word	0x3ff0a2b1
 80099a0:	08009a98 	.word	0x08009a98
 80099a4:	08009aa8 	.word	0x08009aa8
 80099a8:	3ff00000 	.word	0x3ff00000
 80099ac:	08009a88 	.word	0x08009a88
 80099b0:	3defffff 	.word	0x3defffff

080099b4 <with_errno>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	4616      	mov	r6, r2
 80099bc:	f7ff fbba 	bl	8009134 <__errno>
 80099c0:	4629      	mov	r1, r5
 80099c2:	6006      	str	r6, [r0, #0]
 80099c4:	4620      	mov	r0, r4
 80099c6:	bd70      	pop	{r4, r5, r6, pc}

080099c8 <xflow>:
 80099c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ca:	4614      	mov	r4, r2
 80099cc:	461d      	mov	r5, r3
 80099ce:	b108      	cbz	r0, 80099d4 <xflow+0xc>
 80099d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099d4:	e9cd 2300 	strd	r2, r3, [sp]
 80099d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099dc:	4620      	mov	r0, r4
 80099de:	4629      	mov	r1, r5
 80099e0:	f7f6 fdae 	bl	8000540 <__aeabi_dmul>
 80099e4:	2222      	movs	r2, #34	; 0x22
 80099e6:	b003      	add	sp, #12
 80099e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099ec:	f7ff bfe2 	b.w	80099b4 <with_errno>

080099f0 <__math_uflow>:
 80099f0:	b508      	push	{r3, lr}
 80099f2:	2200      	movs	r2, #0
 80099f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099f8:	f7ff ffe6 	bl	80099c8 <xflow>
 80099fc:	ec41 0b10 	vmov	d0, r0, r1
 8009a00:	bd08      	pop	{r3, pc}

08009a02 <__math_oflow>:
 8009a02:	b508      	push	{r3, lr}
 8009a04:	2200      	movs	r2, #0
 8009a06:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009a0a:	f7ff ffdd 	bl	80099c8 <xflow>
 8009a0e:	ec41 0b10 	vmov	d0, r0, r1
 8009a12:	bd08      	pop	{r3, pc}

08009a14 <_init>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

08009a20 <_fini>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr
